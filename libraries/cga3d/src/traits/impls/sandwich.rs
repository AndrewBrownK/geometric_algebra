use crate::traits::GeometricProduct;
use crate::traits::Reverse;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        84     116       0
//  Average:       151     182       0
//  Maximum:      1458    1528       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        96     132       0
//  Average:       187     224       0
//  Maximum:      1984    2068       0
impl std::ops::Div<sandwich> for AntiCircleRotor {
    type Output = sandwich_partial<AntiCircleRotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      213      248        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      226      263        0
    //  no simd      265      307        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      221      256        0
    //    simd3        0        1        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      243      280        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431])
                    - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412])
                    - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e45] * other[e1])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e45] * other[e2])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e45] * other[e3])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      131      165        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      140      176        0
    //  no simd      167      208        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[scalar]) + (self[e23] * other[e1234]),
                (self[e42] * other[scalar]) + (self[e31] * other[e1234]),
                (self[e43] * other[scalar]) + (self[e12] * other[e1234]),
                self[scalar] * other[scalar],
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e15] * other[e1234]),
                (self[e31] * other[scalar]) + (self[e25] * other[e1234]),
                (self[e12] * other[scalar]) + (self[e35] * other[e1234]),
                self[e45] * other[scalar],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e15] * other[scalar],
                self[e25] * other[scalar],
                self[e35] * other[scalar],
                (self[scalar] * other[e1234]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e15] * other[e1234], self[e25] * other[e1234], self[e35] * other[e1234], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      174        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      150      189        0
    //  no simd      189      233        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e41] * other[e321] * -1.0,
                self[e42] * other[e321] * -1.0,
                self[e43] * other[e321] * -1.0,
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]),
                (self[scalar] * other[e321]) - (self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[scalar] * other[e235]) - (self[e31] * other[e125]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]) - (self[e12] * other[e235]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]) - (self[e23] * other[e315]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) - (self[e42] * other[e125]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) - (self[e43] * other[e235]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) - (self[e41] * other[e315]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      203        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      184      221        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e1]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e2]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e3]),
                (self[scalar] * other[e321])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e2]) - (self[e31] * other[e125]) - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) - (self[e12] * other[e235]) - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) - (self[e23] * other[e315]) - (self[e15] * other[e2]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[scalar] * other[e1])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[scalar] * other[e2])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[scalar] * other[e3])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      209        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      183      220        0
    //  no simd      210      252        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) - (self[e42] * other[e12]),
                (self[e41] * other[e12]) - (self[e43] * other[e23]),
                (self[e42] * other[e23]) - (self[e41] * other[e31]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[scalar] * other[e23]) - (self[e42] * other[e35]) - (self[e31] * other[e12]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[scalar] * other[e31]) - (self[e43] * other[e15]) - (self[e12] * other[e23]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[scalar] * other[e12]) - (self[e41] * other[e25]) - (self[e23] * other[e31]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]) - (self[e31] * other[e35]) - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]) - (self[e12] * other[e15]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]) - (self[e23] * other[e25]) - (self[e15] * other[e31]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e45] * other[e23]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e45] * other[e31]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e45] * other[e12]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      219        0
    //    simd3        0        1        0
    //    simd4       12       13        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) - (self[e42] * other[e12]),
                (self[e41] * other[e12]) - (self[e43] * other[e23]),
                (self[e42] * other[e23]) - (self[e41] * other[e31]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[scalar] * other[e23])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e23] * other[e12]) + (self[scalar] * other[e31])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e31] * other[e23]) + (self[scalar] * other[e12])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) - (self[e41] * other[e3215]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) - (self[e41] * other[e35]) - (self[e42] * other[e3215]),
                (self[e41] * other[e25]) - (self[e42] * other[e15]) - (self[e43] * other[e3215]),
                (self[scalar] * other[e3215])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      172        0
    //    simd3        0        1        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      148      184        0
    //  no simd      178      219        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      116        0
    //    simd3        0        2        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       99      124        0
    //  no simd      105      146        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      229        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      209      246        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e42] * other[e435])
                    - (self[e31] * other[e412])
                    - (self[e45] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431])
                    - (self[e43] * other[e415])
                    - (self[e12] * other[e423])
                    - (self[e45] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412])
                    - (self[e41] * other[e425])
                    - (self[e23] * other[e431])
                    - (self[e45] * other[e412]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e15] * other[e412])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e25] * other[e423])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e15] * other[e412]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e25] * other[e423]),
                -(self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      201      236        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      217      254        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e42] * other[e435])
                    - (self[e31] * other[e412])
                    - (self[e45] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431])
                    - (self[e43] * other[e415])
                    - (self[e12] * other[e423])
                    - (self[e45] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412])
                    - (self[e41] * other[e425])
                    - (self[e23] * other[e431])
                    - (self[e45] * other[e412]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e321])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e321])
                    + (self[e25] * other[e12345])
                    + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e321])
                    + (self[e35] * other[e12345])
                    + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e15] * other[e412]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e25] * other[e423]),
                -(self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      210      245        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      221      258        0
    //  no simd      254      296        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e42] * other[e12]) - (self[e31] * other[e43]) - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e43] * other[e23]) - (self[e12] * other[e41]) - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e41] * other[e31]) - (self[e23] * other[e42]) - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e45] * other[e23]) + (self[e35] * other[e42]) - (self[e43] * other[e25]) - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e45] * other[e31]) + (self[e15] * other[e43]) - (self[e41] * other[e35]) - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e25] * other[e41]) - (self[e42] * other[e15]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      253      288        0
    //    simd3        0        1        0
    //    simd4       14       15        0
    // Totals...
    // yes simd      267      304        0
    //  no simd      309      351        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      115      153        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      128      168        0
    //  no simd      167      212        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e23] * other[e4]),
                (self[e42] * other[e12345]) + (self[e31] * other[e4]),
                (self[e43] * other[e12345]) + (self[e12] * other[e4]),
                self[scalar] * other[e12345],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e15] * other[e4]),
                (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                self[e45] * other[e12345] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e15] * other[e4] * -1.0,
                self[e25] * other[e4] * -1.0,
                self[e35] * other[e4] * -1.0,
                (self[scalar] * other[e4]) - (self[e45] * other[e4]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      153      187        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      162      198        0
    //  no simd      189      230        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[scalar] * other[e15]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[scalar] * other[e25]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[scalar] * other[e35]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      223        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      199      236        0
    //  no simd      232      274        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e45] * other[e4235]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e45] * other[e4315]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e45] * other[e4125]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      158      193        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      171      208        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      203        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      184      221        0
    //  no simd      232      274        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[scalar] * other[e415])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[scalar] * other[e425])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[scalar] * other[e435])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      372      441        0
    //    simd2       20       20        0
    //    simd3       52       53        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      462      533        0
    //  no simd      640      716        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0]) + (Simd32x2::from(self[scalar]) * Simd32x2::from([other[scalar], other[e12345]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5]) + (self[scalar] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) - (self[e42] * other[e12]) - (self[e42] * other[e4125]) - (self[e31] * other[e43]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) - (self[e43] * other[e23]) - (self[e43] * other[e4235]) - (self[e12] * other[e41]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) - (self[e41] * other[e31]) - (self[e41] * other[e4315]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e1234
            (self[scalar] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      180        0
    //    simd3        0        1        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      154      190        0
    //  no simd      178      219        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      180        0
    //    simd3        1        2        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      157      193        0
    //  no simd      189      230        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]) + (self[scalar] * other[e4]) - (self[e45] * other[e4]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      108        0
    //    simd3        0        2        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       93      117        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      188        0
    //    simd3        1        2        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      163      199        0
    //  no simd      189      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                (self[scalar] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      259        0
    //    simd3        0        1        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      248      285        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431])
                    - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412])
                    - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      291        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      272      309        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiDipoleInversion {
    type Output = sandwich_partial<AntiDipoleInversion>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      301      336        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      319      356        0
    //  no simd      373      415        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e45] * self[e1])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e45] * self[e2])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e45] * self[e3])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e35] * self[e2]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[e15] * self[e3]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e25] * self[e1]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      337      372        0
    //    simd3        0        1        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      361      398        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e1])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e2])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e3])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      190      225        0
    //    simd3        0        1        0
    //    simd4       12       14        0
    // Totals...
    // yes simd      202      240        0
    //  no simd      238      284        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar]) + (self[e415] * other[e1234]) + (self[e1] * other[e1234]),
                (self[e431] * other[scalar]) + (self[e425] * other[e1234]) + (self[e2] * other[e1234]),
                (self[e412] * other[scalar]) + (self[e435] * other[e1234]) + (self[e3] * other[e1234]),
                self[e5] * other[e1234],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e235] * other[e1234], self[e315] * other[e1234], self[e125] * other[e1234], (self[e5] * other[e1234]) * -1.0])
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e235] * other[e1234]) * -1.0,
                (self[e315] * other[e1234]) * -1.0,
                (self[e125] * other[e1234]) * -1.0,
                self[e321] * other[e1234],
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      243        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      223      260        0
    //  no simd      268      310        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e423] * other[e321],
                self[e431] * other[e321],
                self[e412] * other[e321],
                (self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) - (self[e321] * other[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) - (self[e412] * other[e315]) - (self[e4] * other[e235]) - (self[e1] * other[e321]),
                (self[e412] * other[e235]) - (self[e423] * other[e125]) - (self[e4] * other[e315]) - (self[e2] * other[e321]),
                (self[e423] * other[e315]) - (self[e431] * other[e235]) - (self[e4] * other[e125]) - (self[e3] * other[e321]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e2] * other[e125]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315]),
                self[e4] * other[e321],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e4] * other[e235]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e4] * other[e315]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e4] * other[e125]) - (self[e423] * other[e315]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      264      299        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      280      317        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) + (self[e431] * other[e321]) + (self[e4] * other[e2]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) + (self[e412] * other[e321]) + (self[e4] * other[e3]) - (self[e423] * other[e2]),
                (self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3])
                    - (self[e321] * other[e321])
                    - (self[e4] * other[e5]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e2] * other[e3])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e321] * other[e1])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2]),
                (self[e412] * other[e235]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e321] * other[e2])
                    - (self[e4] * other[e315])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321]),
                (self[e423] * other[e315]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e321] * other[e3])
                    - (self[e4] * other[e125])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321]),
                (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e3]),
                (self[e4] * other[e321]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e4] * other[e235])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e4] * other[e315])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e4] * other[e125])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      246      281        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      259      296        0
    //  no simd      298      340        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]) - (self[e431] * other[e12]),
                (self[e423] * other[e12]) + (self[e4] * other[e31]) - (self[e412] * other[e23]),
                (self[e431] * other[e23]) + (self[e4] * other[e12]) - (self[e423] * other[e31]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e425] * other[e12]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e435] * other[e23]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e415] * other[e31]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e3] * other[e31]) - (self[e431] * other[e35]) - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) - (self[e412] * other[e15]) - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) - (self[e423] * other[e25]) - (self[e1] * other[e31]),
                -(self[e423] * other[e23]) - (self[e431] * other[e31]) - (self[e412] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      252      287        0
    //    simd3        0        1        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      271      308        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar]) + (self[e412] * other[e31]) - (self[e431] * other[e12]),
                (self[e423] * other[e12]) + (self[e431] * other[scalar]) - (self[e412] * other[e23]),
                (self[e431] * other[e23]) + (self[e412] * other[scalar]) - (self[e423] * other[e31]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e425] * other[e12]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e435] * other[e23]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e415] * other[e31]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e1] * other[e31]),
                -(self[e423] * other[e23]) - (self[e431] * other[e31]) - (self[e412] * other[e12]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      204      239        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      220      257        0
    //  no simd      268      310        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) + (self[e4] * other[e2]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) + (self[e4] * other[e3]) - (self[e423] * other[e2]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e4] * other[e5]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]) - (self[e415] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]) - (self[e425] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]) - (self[e435] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      180        0
    //    simd3        0        3        0
    //    simd4       12       19        0
    // Totals...
    // yes simd      173      202        0
    //  no simd      209      265        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      290      325        0
    //    simd3        0        1        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      307      344        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e2] * other[e412])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e4] * other[e415])
                    - (self[e3] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e415] * other[e412])
                    - (self[e4] * other[e425])
                    - (self[e1] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e1] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e425] * other[e423])
                    - (self[e4] * other[e435])
                    - (self[e2] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      301      336        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      319      356        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e2] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e4] * other[e415])
                    - (self[e3] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e415] * other[e412])
                    - (self[e4] * other[e425])
                    - (self[e1] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e1] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e4] * other[e435])
                    - (self[e2] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      298      333        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      313      350        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e1] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e2] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42]) + (self[e4] * other[e15]) + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e4] * other[e25]) + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e4] * other[e35]) + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      341      376        0
    //    simd3        0        1        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      364      401        0
    //  no simd      433      475        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e4] * other[e4235])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e4] * other[e4315])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e4] * other[e4125])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215])
                    + (self[e435] * other[e25])
                    + (self[e315] * other[e4125])
                    + (self[e125] * other[e31])
                    + (self[e2] * other[e35])
                    + (self[e5] * other[e23]),
                (self[e415] * other[e35])
                    + (self[e425] * other[e3215])
                    + (self[e235] * other[e12])
                    + (self[e125] * other[e4235])
                    + (self[e3] * other[e15])
                    + (self[e5] * other[e31]),
                (self[e425] * other[e15])
                    + (self[e435] * other[e3215])
                    + (self[e235] * other[e4315])
                    + (self[e315] * other[e23])
                    + (self[e1] * other[e25])
                    + (self[e5] * other[e12]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      217        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      190      235        0
    //  no simd      238      288        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e423] * other[e12345]) - (self[e415] * other[e4]) - (self[e1] * other[e4]),
                -(self[e431] * other[e12345]) - (self[e425] * other[e4]) - (self[e2] * other[e4]),
                -(self[e412] * other[e12345]) - (self[e435] * other[e4]) - (self[e3] * other[e4]),
                self[e5] * other[e4] * -1.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e415] * other[e12345]) * -1.0,
                (self[e425] * other[e12345]) * -1.0,
                (self[e435] * other[e12345]) * -1.0,
                self[e321] * other[e12345],
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e235] * other[e12345] * -1.0,
                self[e315] * other[e12345] * -1.0,
                self[e125] * other[e12345] * -1.0,
                -(self[e321] * other[e4]) - (self[e4] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) - (self[e235] * other[e4]),
                (self[e2] * other[e12345]) - (self[e315] * other[e4]),
                (self[e3] * other[e12345]) - (self[e125] * other[e4]),
                self[e5] * other[e12345] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      247        0
    //    simd3        0        1        0
    //    simd4       14       15        0
    // Totals...
    // yes simd      226      263        0
    //  no simd      268      310        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e1] * other[e45]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e3] * other[e45]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e415] * other[e45]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e425] * other[e45]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e435] * other[e45]),
                self[e4] * other[e45],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      291        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      274      311        0
    //  no simd      328      370        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]) + (self[e2] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]) + (self[e3] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]) + (self[e1] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e2] * other[e35])
                    - (self[e125] * other[e4315])
                    - (self[e5] * other[e4235]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e125] * other[e4235]) + (self[e3] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e5] * other[e4315]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315]) + (self[e1] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e5] * other[e4125]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      238      273        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      253      290        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]) - (self[e4] * other[e415]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e4] * other[e425]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e4] * other[e435]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]) - (self[e4] * other[e235]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]) - (self[e4] * other[e315]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]) - (self[e4] * other[e125]),
                -(self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) + (self[e4] * other[e235]) + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) + (self[e4] * other[e315]) + (self[e1] * other[e435])
                    - (self[e412] * other[e235])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) + (self[e4] * other[e125]) + (self[e2] * other[e415])
                    - (self[e423] * other[e315])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      291        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      274      311        0
    //  no simd      328      370        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e423] * other[e12345]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e431] * other[e12345]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]) - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e4] * other[e235]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e4] * other[e315]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e4] * other[e125]),
                (self[e321] * other[e12345]) + (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) + (self[e4] * other[e235]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) + (self[e4] * other[e315]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) + (self[e4] * other[e125]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      578      645        0
    //    simd2        8        8        0
    //    simd3       74       75        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      680      749        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e4] * other[e5])
                    - (self[e5] * other[e4]),
                (self[e4] * other[e3215]) + (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e425] * other[e4125])
                    + (self[e315] * other[e43])
                    + (self[e1] * other[scalar])
                    + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e435] * other[e4235])
                    + (self[e125] * other[e41])
                    + (self[e1] * other[e12])
                    + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e415] * other[e4315])
                    + (self[e235] * other[e42])
                    + (self[e2] * other[e23])
                    + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                (self[e4] * other[e45])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) + (self[e2] * other[e412]) - (self[e435] * other[e431]) - (self[e3] * other[e431]),
                (self[e435] * other[e423]) + (self[e3] * other[e423]) - (self[e415] * other[e412]) - (self[e1] * other[e412]),
                (self[e415] * other[e431]) + (self[e1] * other[e431]) - (self[e425] * other[e423]) - (self[e2] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e3] * other[e2]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412])
                    - (self[e1] * other[e3]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423])
                    - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42]) + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43]) + (self[e1] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41]) + (self[e2] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e1] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e4] * other[e321])
                + (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e4] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      216      251        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      229      266        0
    //  no simd      268      310        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      211      246        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      229      266        0
    //  no simd      283      325        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]) - (self[e1] * other[e4]),
                (self[e423] * other[e3]) + (self[e4] * other[e2]) - (self[e412] * other[e1]) - (self[e2] * other[e4]),
                (self[e431] * other[e1]) + (self[e4] * other[e3]) - (self[e423] * other[e2]) - (self[e3] * other[e4]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e4] * other[e5]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]) - (self[e415] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]) - (self[e425] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]) - (self[e435] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      173      192        0
    //    simd3        0        2        0
    //    simd4        9       13        0
    // Totals...
    // yes simd      182      207        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]),
            // e235, e315, e125, e4
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      227      262        0
    //    simd3        0        1        0
    //    simd4       14       15        0
    // Totals...
    // yes simd      241      278        0
    //  no simd      283      325        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e4315]) + (self[e1] * other[e1234]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e2] * other[e1234]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e3] * other[e1234]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e315] * other[e1234]) + (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e125] * other[e1234]) + (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      348      383        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      373      410        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) + (self[e4] * other[e1]) + (self[e2] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e1] * other[e4])
                    - (self[e3] * other[e431]),
                (self[e435] * other[e423]) + (self[e4] * other[e2]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e1] * other[e412])
                    - (self[e2] * other[e4]),
                (self[e415] * other[e431]) + (self[e4] * other[e3]) + (self[e1] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e2] * other[e423])
                    - (self[e3] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    + (self[e1] * other[e1])
                    + (self[e2] * other[e2])
                    + (self[e3] * other[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      336      371        0
    //    simd3        0        1        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      364      401        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e4] * other[e4235])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e4] * other[e4315])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e4] * other[e4125])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e425] * other[e4125])
                    + (self[e315] * other[e43])
                    + (self[e1] * other[scalar])
                    + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e435] * other[e4235])
                    + (self[e125] * other[e41])
                    + (self[e1] * other[e12])
                    + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e415] * other[e4315])
                    + (self[e235] * other[e42])
                    + (self[e2] * other[e23])
                    + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                (self[e4] * other[e45])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiDualNum {
    type Output = sandwich_partial<AntiDualNum>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       44        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       48        0
    //  no simd       24       60        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[scalar]) + (other[e23] * self[e1234]),
                (other[e42] * self[scalar]) + (other[e31] * self[e1234]),
                (other[e43] * self[scalar]) + (other[e12] * self[e1234]),
                other[scalar] * self[scalar],
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e15] * self[e1234]),
                (other[e31] * self[scalar]) + (other[e25] * self[e1234]),
                (other[e12] * self[scalar]) + (other[e35] * self[e1234]),
                other[e45] * self[scalar],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e15] * self[scalar],
                other[e25] * self[scalar],
                other[e35] * self[scalar],
                (other[e45] * self[e1234]) + (other[scalar] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e15] * self[e1234] * -1.0, other[e25] * self[e1234] * -1.0, other[e35] * self[e1234] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       31        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       13       40        0
    //  no simd       31       67        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e415] * self[e1234]) - (other[e1] * self[e1234]),
                (other[e431] * self[scalar]) + (other[e425] * self[e1234]) - (other[e2] * self[e1234]),
                (other[e412] * self[scalar]) + (other[e435] * self[e1234]) - (other[e3] * self[e1234]),
                other[e5] * self[e1234],
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], (other[e321] * self[e1234]) * -1.0])
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(
            // e1234, scalar
            Simd32x2::from([(other[e1234] * self[scalar]) + (other[scalar] * self[e1234]), other[scalar] * self[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       33        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        8       37        0
    //  no simd       14       49        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234] * other[e235], self[e1234] * other[e315], self[e1234] * other[e125], self[scalar] * other[e321]]),
            // e235, e315, e125, e4
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], self[e1234] * other[e321]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234] * other[e235], self[e1234] * other[e315], self[e1234] * other[e125], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       29        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        9       37        0
    //  no simd       21       61        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                (self[e1234] * other[e5]) + (self[scalar] * other[e321]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[scalar] * other[e1]),
                (self[e1234] * other[e315]) + (self[scalar] * other[e2]),
                (self[e1234] * other[e125]) + (self[scalar] * other[e3]),
                self[e1234] * other[e321] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       37        0
    //    simd3        0        1        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       40        0
    //  no simd       17       48        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e15]) + (self[scalar] * other[e23]),
                (self[e1234] * other[e25]) + (self[scalar] * other[e31]),
                (self[e1234] * other[e35]) + (self[scalar] * other[e12]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234] * other[e15] * -1.0, self[e1234] * other[e25] * -1.0, self[e1234] * other[e35] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       40        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       45        0
    //  no simd       21       60        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e23],
                self[e1234] * other[e31],
                self[e1234] * other[e12],
                (self[e1234] * other[e3215]) + (self[scalar] * other[scalar]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e15]) + (self[scalar] * other[e23]),
                (self[e1234] * other[e25]) + (self[scalar] * other[e31]),
                (self[e1234] * other[e35]) + (self[scalar] * other[e12]),
                self[e1234] * other[e3215] * -1.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], self[e1234] * other[scalar]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234] * other[e15], self[e1234] * other[e25], self[e1234] * other[e35], self[scalar] * other[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       21        0
    //    simd4        4        7        0
    // Totals...
    // yes simd        5       28        0
    //  no simd       17       49        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, self[e1234] * other[e5]]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, self[scalar] * other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([self[scalar] * other[e1], self[scalar] * other[e2], self[scalar] * other[e3], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from(other[e12345]) * Simd32x2::from([self[e1234], self[scalar]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       36        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       42        0
    //  no simd       20       58        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[scalar] * other[e415]),
                (self[e1234] * other[e315]) + (self[scalar] * other[e425]),
                (self[e1234] * other[e125]) + (self[scalar] * other[e435]),
                self[scalar] * other[e321],
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], self[e1234] * other[e321]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234] * other[e235], self[e1234] * other[e315], self[e1234] * other[e125], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       38        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       12       43        0
    //  no simd       24       58        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e1234] * other[e415]) + (self[scalar] * other[e423]),
                (self[e1234] * other[e425]) + (self[scalar] * other[e431]),
                (self[e1234] * other[e435]) + (self[scalar] * other[e412]),
                self[scalar] * other[e12345],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[scalar] * other[e415]),
                (self[e1234] * other[e315]) + (self[scalar] * other[e425]),
                (self[e1234] * other[e125]) + (self[scalar] * other[e435]),
                self[scalar] * other[e321],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                (self[e1234] * other[e12345]) - (self[e1234] * other[e321]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       39        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       43        0
    //  no simd       20       53        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e15]) + (self[scalar] * other[e23]),
                (self[e1234] * other[e25]) + (self[scalar] * other[e31]),
                (self[e1234] * other[e35]) + (self[scalar] * other[e12]),
                self[scalar] * other[e45],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], self[e1234] * other[e45]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234] * other[e15] * -1.0, self[e1234] * other[e25] * -1.0, self[e1234] * other[e35] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       46        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       19       51        0
    //  no simd       31       66        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e1234] * other[e23]) + (self[e1234] * other[e4235]) + (self[scalar] * other[e41]),
                (self[e1234] * other[e31]) + (self[e1234] * other[e4315]) + (self[scalar] * other[e42]),
                (self[e1234] * other[e12]) + (self[e1234] * other[e4125]) + (self[scalar] * other[e43]),
                self[e1234] * other[e3215],
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234] * other[e15], self[e1234] * other[e25], self[e1234] * other[e35], (self[e1234] * other[e3215]) * -1.0])
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[scalar] * other[e15],
                self[scalar] * other[e25],
                self[scalar] * other[e35],
                (self[e1234] * other[e45]) + (self[scalar] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e1234] * other[e15]),
                (self[scalar] * other[e4315]) - (self[e1234] * other[e25]),
                (self[scalar] * other[e4125]) - (self[e1234] * other[e35]),
                self[scalar] * other[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(
            // e4, e12345
            Simd32x2::from([(self[e1234] * other[e12345]) + (self[scalar] * other[e4]), self[scalar] * other[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       14       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234] * other[e15], self[e1234] * other[e25], self[e1234] * other[e35], self[scalar] * other[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], self[e1234] * other[e45]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234] * other[e15] * -1.0, self[e1234] * other[e25] * -1.0, self[e1234] * other[e35] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       35        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       40        0
    //  no simd       21       55        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e1234] * other[e15],
                self[e1234] * other[e25],
                self[e1234] * other[e35],
                (self[scalar] * other[e45]) - (self[e1234] * other[e3215]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], self[e1234] * other[e45]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e1234] * other[e15]),
                (self[scalar] * other[e4315]) - (self[e1234] * other[e25]),
                (self[scalar] * other[e4125]) - (self[e1234] * other[e35]),
                self[scalar] * other[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       34        0
    //    simd3        0        1        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       17       49        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[scalar] * other[e415]),
                (self[e1234] * other[e315]) + (self[scalar] * other[e425]),
                (self[e1234] * other[e125]) + (self[scalar] * other[e435]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234] * other[e235], self[e1234] * other[e315], self[e1234] * other[e125], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       28        0
    //    simd4        4        7        0
    // Totals...
    // yes simd        9       35        0
    //  no simd       21       56        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e1234] * other[e415],
                self[e1234] * other[e425],
                self[e1234] * other[e435],
                (self[e1234] * other[e5]) + (self[scalar] * other[e12345]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[scalar] * other[e415]),
                (self[e1234] * other[e315]) + (self[scalar] * other[e425]),
                (self[e1234] * other[e125]) + (self[scalar] * other[e435]),
                self[e1234] * other[e5],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       47        0
    //    simd2        2        4        0
    //    simd3       10       18        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       30       75        0
    //  no simd       67      133        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]])) + (Simd32x2::from(self[scalar]) * Simd32x2::from([other[scalar], other[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other[e321]) * -1.0])
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e5
            self[scalar] * other[e5],
            // e15, e25, e35, e45
            Simd32x4::from([
                self[scalar] * other[e15],
                self[scalar] * other[e25],
                self[scalar] * other[e35],
                (self[scalar] * other[e45]) - (self[e1234] * other[e3215]),
            ]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e1234] * other[e15]),
                (self[scalar] * other[e4315]) - (self[e1234] * other[e25]),
                (self[scalar] * other[e4125]) - (self[e1234] * other[e35]),
                self[scalar] * other[e3215],
            ]),
            // e1234
            (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[scalar] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       21        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       27        0
    //  no simd       17       45        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, self[e1234] * other[e3215] * -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       18        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        5       26        0
    //  no simd       17       50        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, self[e1234] * other[e5]]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, self[scalar] * other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from(other[scalar]) * Simd32x2::from([self[e1234], self[scalar]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       22        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       28        0
    //  no simd       17       46        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, self[e1234] * other[e3215] * -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, self[scalar] * other[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       24        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       10       36        0
    //  no simd       37       72        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self[e1234] * other[e1]) * -1.0, (self[e1234] * other[e2]) * -1.0, (self[e1234] * other[e3]) * -1.0, 0.0])
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other[e321]) * -1.0])
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       40        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       16       47        0
    //  no simd       34       68        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234] * other[e4235], self[e1234] * other[e4315], self[e1234] * other[e4125], 0.0])
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234] * other[e15], self[e1234] * other[e25], self[e1234] * other[e35], (self[e1234] * other[e3215]) * -1.0])
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[scalar] * other[e15],
                self[scalar] * other[e25],
                self[scalar] * other[e35],
                (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[scalar] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e1234] * other[e15]),
                (self[scalar] * other[e4315]) - (self[e1234] * other[e25]),
                (self[scalar] * other[e4125]) - (self[e1234] * other[e35]),
                self[scalar] * other[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiFlatPoint {
    type Output = sandwich_partial<AntiFlatPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      108        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       77      109        0
    //  no simd       77      112        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e41] * self[e321],
                other[e42] * self[e321],
                other[e43] * self[e321],
                -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) - (other[e43] * self[e315]),
                (other[e43] * self[e235]) - (other[e41] * self[e125]),
                (other[e41] * self[e315]) - (other[e42] * self[e235]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]) - (other[e45] * self[e235]) - (other[e15] * self[e321]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]) - (other[e45] * self[e315]) - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]) - (other[e45] * self[e125]) - (other[e35] * self[e321]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) - (other[e42] * self[e125]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) - (other[e43] * self[e235]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) - (other[e41] * self[e315]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      124        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       86      127        0
    //  no simd       92      136        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e423] * self[e321] * -1.0,
                other[e431] * self[e321] * -1.0,
                other[e412] * self[e321] * -1.0,
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) - (other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e1] * self[e321]),
                (other[e423] * self[e125]) - (other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e2] * self[e321]),
                (other[e431] * self[e235]) - (other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e3] * self[e321]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125]),
                (other[e415] * self[e125]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235]),
                (other[e425] * self[e235]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315]),
                other[e4] * self[e321] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) - (other[e431] * self[e125]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) - (other[e412] * self[e235]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) - (other[e423] * self[e315]) - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       74        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       44       75        0
    //  no simd       44       78        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234] * self[e235], other[e1234] * self[e315], other[e1234] * self[e125], other[scalar] * self[e321]]),
            // e235, e315, e125, e4
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], other[e1234] * self[e321]]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234] * self[e235] * -1.0, other[e1234] * self[e315] * -1.0, other[e1234] * self[e125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, other[e321] * self[e321] * -1.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e235] * self[e321]) - (other[e321] * self[e235]),
                (other[e315] * self[e321]) - (other[e321] * self[e315]),
                (other[e125] * self[e321]) - (other[e321] * self[e125]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e235] * other[e321]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]) - (self[e315] * other[e321]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]) - (self[e125] * other[e321]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       17       31        0
    //  no simd       20       43        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) - (self[e315] * other[e12]) - (self[e321] * other[e15]),
                (self[e235] * other[e12]) - (self[e125] * other[e23]) - (self[e321] * other[e25]),
                (self[e315] * other[e23]) - (self[e235] * other[e31]) - (self[e321] * other[e35]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e321] * other[e23],
                self[e321] * other[e31],
                self[e321] * other[e12],
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e235] * other[scalar]) + (self[e125] * other[e31]) - (self[e315] * other[e12]) - (self[e321] * other[e15]),
                (self[e235] * other[e12]) + (self[e315] * other[scalar]) - (self[e125] * other[e23]) - (self[e321] * other[e25]),
                (self[e315] * other[e23]) + (self[e125] * other[scalar]) - (self[e235] * other[e31]) - (self[e321] * other[e35]),
                self[e321] * other[scalar],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e321] * other[e23],
                self[e321] * other[e31],
                self[e321] * other[e12],
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       18       40        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e321] * other[e1] * -1.0, self[e321] * other[e2] * -1.0, self[e321] * other[e3] * -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      107        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       70      109        0
    //  no simd       73      115        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423] * -1.0,
                self[e321] * other[e431] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) - (self[e235] * other[e321]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) - (self[e235] * other[e435]) - (self[e315] * other[e321]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) - (self[e315] * other[e415]) - (self[e125] * other[e321]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) - (self[e315] * other[e423]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      111        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       74      113        0
    //  no simd       77      119        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423] * -1.0,
                self[e321] * other[e431] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) - (self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) - (self[e315] * other[e423]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      104        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       73      105        0
    //  no simd       73      108        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e125] * other[e42]) - (self[e315] * other[e43]),
                (self[e235] * other[e43]) - (self[e125] * other[e41]),
                (self[e315] * other[e41]) - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) - (self[e235] * other[e45]) - (self[e315] * other[e12]) - (self[e321] * other[e15]),
                (self[e235] * other[e12]) - (self[e315] * other[e45]) - (self[e125] * other[e23]) - (self[e321] * other[e25]),
                (self[e315] * other[e23]) - (self[e235] * other[e31]) - (self[e125] * other[e45]) - (self[e321] * other[e35]),
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) - (self[e125] * other[e42]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) - (self[e235] * other[e43]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) - (self[e315] * other[e41]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      108        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       80      113        0
    //  no simd       92      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]),
                (self[e235] * other[e12]) + (self[e125] * other[e4235]),
                (self[e235] * other[e4315]) + (self[e315] * other[e23]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]),
                self[e321] * other[e1234],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       74        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       41       78        0
    //  no simd       44       90        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e235] * other[e4], self[e315] * other[e4], self[e125] * other[e4], self[e321] * other[e12345]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], self[e321] * other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, self[e321] * other[e45] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e235] * other[e45]) - (self[e321] * other[e15]),
                -(self[e315] * other[e45]) - (self[e321] * other[e25]),
                -(self[e125] * other[e45]) - (self[e321] * other[e35]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e235] * other[e45]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e315] * other[e45]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       17       31        0
    //  no simd       20       43        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) - (self[e235] * other[e435]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) - (self[e315] * other[e415]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e321] * other[e415],
                self[e321] * other[e425],
                self[e321] * other[e435],
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]),
                self[e321] * other[e12345],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e321] * other[e415],
                self[e321] * other[e425],
                self[e321] * other[e435],
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]) + (self[e321] * other[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      180        0
    //    simd2        2        2        0
    //    simd3       13       20        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      149      208        0
    //  no simd      192      268        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]),
                self[e321] * other[e1234],
            ]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e235, e315, e125
            (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e1234
            self[e321] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       18       40        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([self[e321] * other[e4235] * -1.0, self[e321] * other[e4315] * -1.0, self[e321] * other[e4125] * -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       84        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       50       86        0
    //  no simd       53       92        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e321] * other[e1]),
                -(self[e315] * other[e4]) - (self[e321] * other[e2]),
                -(self[e125] * other[e4]) - (self[e321] * other[e3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]),
                self[e321] * other[e4] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       16        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       83        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       53       84        0
    //  no simd       53       87        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) - (self[e321] * other[e4235]),
                (self[e315] * other[e1234]) - (self[e321] * other[e4315]),
                (self[e125] * other[e1234]) - (self[e321] * other[e4125]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                self[e321] * other[e1234],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e235] * other[e1234] * -1.0,
                self[e315] * other[e1234] * -1.0,
                self[e125] * other[e1234] * -1.0,
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      128        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       90      131        0
    //  no simd       96      140        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423] * -1.0,
                self[e321] * other[e431] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]) - (self[e321] * other[e1]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]) - (self[e321] * other[e2]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]) - (self[e321] * other[e3]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e315] * other[e3]) + (self[e321] * other[e235])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e125] * other[e415]) + (self[e125] * other[e1]) + (self[e321] * other[e315])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e235] * other[e425]) + (self[e235] * other[e2]) + (self[e321] * other[e125])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                self[e321] * other[e4] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      100        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       78      108        0
    //  no simd       96      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]),
                self[e321] * other[e1234],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiFlector {
    type Output = sandwich_partial<AntiFlector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      204        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      175      208        0
    //  no simd      184      220        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e42] * self[e321]) + (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) + (other[e43] * self[e321]) - (other[e42] * self[e1]),
                -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) - (other[e43] * self[e315]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) - (other[e41] * self[e125]) - (other[e45] * self[e2]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) - (other[e42] * self[e235]) - (other[e45] * self[e3]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e35] * self[e2]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e15] * self[e321])
                    - (other[e25] * self[e3]),
                (other[e12] * self[e235]) + (other[e15] * self[e3]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e25] * self[e321])
                    - (other[e35] * self[e1]),
                (other[e23] * self[e315]) + (other[e25] * self[e1]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e15] * self[e2])
                    - (other[e35] * self[e321]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      208        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      186      219        0
    //  no simd      216      252        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e321] * self[e1])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3]),
                (other[e423] * self[e125]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e321] * self[e2])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1]),
                (other[e431] * self[e235]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e321] * self[e3])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e415] * self[e125]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e4] * self[e321]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e425] * self[e3]) - (other[e431] * self[e125]) - (other[e435] * self[e2]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e435] * self[e1]) - (other[e412] * self[e235]) - (other[e415] * self[e3]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e415] * self[e2]) - (other[e423] * self[e315]) - (other[e425] * self[e1]) - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      136        0
    //    simd4        1        4        0
    // Totals...
    // yes simd      113      140        0
    //  no simd      116      152        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e1234] * self[e235],
                other[e1234] * self[e315],
                other[e1234] * self[e125],
                (other[scalar] * self[e321]) - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[scalar] * self[e1]) - (other[e1234] * self[e235]),
                (other[scalar] * self[e2]) - (other[e1234] * self[e315]),
                (other[scalar] * self[e3]) - (other[e1234] * self[e125]),
                other[e1234] * self[e321],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       48        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       40       55        0
    //  no simd       52       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) + (other[e125] * self[e321]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       62       79        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]),
                (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e235] * self[e3]) - (other[e2] * self[e5]) - (other[e3] * self[e235]),
                (other[e235] * self[e2]) + (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e315] * self[e1]) - (other[e1] * self[e315]) - (other[e3] * self[e5]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       59       76        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       65       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23])
                    - (self[e315] * other[e12])
                    - (self[e321] * other[e15])
                    - (self[e1] * other[e3215])
                    - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31])
                    - (self[e125] * other[e23])
                    - (self[e321] * other[e25])
                    - (self[e1] * other[e35])
                    - (self[e2] * other[e3215]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12])
                    - (self[e235] * other[e31])
                    - (self[e321] * other[e35])
                    - (self[e2] * other[e15])
                    - (self[e3] * other[e3215]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12])
                    - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       48       65        0
    //  no simd       60       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      155      188        0
    //  no simd      176      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]) - (self[e1] * other[e321]) - (self[e5] * other[e423]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e2] * other[e321]) - (self[e5] * other[e431]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) + (self[e3] * other[e425]) - (self[e125] * other[e431]) - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) + (self[e1] * other[e435]) - (self[e235] * other[e412]) - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) + (self[e2] * other[e415]) - (self[e315] * other[e423]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      188        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      163      196        0
    //  no simd      184      220        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]) - (self[e1] * other[e321]) - (self[e5] * other[e423]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e2] * other[e321]) - (self[e5] * other[e431]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      200        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      170      203        0
    //  no simd      176      212        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e125] * other[e42]) + (self[e5] * other[e41]) - (self[e315] * other[e43]) - (self[e1] * other[e45]),
                (self[e235] * other[e43]) + (self[e5] * other[e42]) - (self[e125] * other[e41]) - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e5] * other[e43]) - (self[e235] * other[e42]) - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e125] * other[e42]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e235] * other[e43]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e315] * other[e41]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      216        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      192      225        0
    //  no simd      216      252        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e125] * other[e4235]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e235] * other[e4315]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e3] * other[e31]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd4        5        9        0
    // Totals...
    // yes simd      101      137        0
    //  no simd      116      164        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                (self[e321] * other[e12345]) - (self[e5] * other[e4]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], self[e321] * other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) - (self[e235] * other[e4]),
                (self[e2] * other[e12345]) - (self[e315] * other[e4]),
                (self[e3] * other[e12345]) - (self[e125] * other[e4]),
                self[e5] * other[e12345] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       60        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       49       64        0
    //  no simd       52       76        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       71       88        0
    //  no simd       80      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e2] * other[e35])
                    - (self[e125] * other[e4315])
                    - (self[e1] * other[e3215])
                    - (self[e3] * other[e25])
                    - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) + (self[e3] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e1] * other[e35])
                    - (self[e2] * other[e3215])
                    - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) + (self[e1] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e2] * other[e15])
                    - (self[e3] * other[e3215])
                    - (self[e5] * other[e4125]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       59       76        0
    //  no simd       68       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e321] * other[e425]) + (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e321] * other[e435]) + (self[e2] * other[e415]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       65       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      292      356        0
    //    simd2        8        8        0
    //    simd3       32       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      343      408        0
    //  no simd      448      516        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e5] * other[e4]),
                (self[e5] * other[e1234]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e1]) + (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e2]) + (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e315] * other[e412]) + (self[e2] * other[e3]) - (self[e125] * other[e431]) - (self[e3] * other[e2]),
                (self[e125] * other[e423]) + (self[e3] * other[e1]) - (self[e235] * other[e412]) - (self[e1] * other[e3]),
                (self[e235] * other[e431]) + (self[e1] * other[e2]) - (self[e315] * other[e423]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       57       74        0
    //  no simd       60       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      156        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      121      162        0
    //  no simd      136      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1] * other[e4] * -1.0,
                self[e2] * other[e4] * -1.0,
                self[e3] * other[e4] * -1.0,
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e5] * other[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e235] * other[e4]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e315] * other[e4]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e125] * other[e4]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                self[e5] * other[e4] * -1.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                self[e321] * other[e4] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       31       42        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      157        0
    //    simd4        2        5        0
    // Totals...
    // yes simd      130      162        0
    //  no simd      136      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e1] * other[e1234],
                self[e2] * other[e1234],
                self[e3] * other[e1234],
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e315] * other[e1234]) + (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e125] * other[e1234]) + (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                self[e5] * other[e1234] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      216        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      194      227        0
    //  no simd      224      260        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e125] * other[e431])
                    - (self[e321] * other[e1])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2])
                    - (self[e5] * other[e423]),
                (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e321] * other[e2])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e321] * other[e3])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e315] * other[e3]) + (self[e321] * other[e235]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e125] * other[e415]) + (self[e125] * other[e1]) + (self[e321] * other[e315]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e235] * other[e425]) + (self[e235] * other[e2]) + (self[e321] * other[e125]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      208        0
    //    simd4       12       13        0
    // Totals...
    // yes simd      188      221        0
    //  no simd      224      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiLine {
    type Output = sandwich_partial<AntiLine>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      162        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) - (other[e43] * self[e31]),
                (other[e43] * self[e23]) - (other[e41] * self[e12]),
                (other[e41] * self[e31]) - (other[e42] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]) - (other[e43] * self[e25]) - (other[e12] * self[e31]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]) - (other[e41] * self[e35]) - (other[e23] * self[e12]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[scalar] * self[e12]) - (other[e42] * self[e15]) - (other[e31] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      162        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      136      170        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]) - (other[e412] * self[e31]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e4] * self[e12]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e4] * self[e15]) - (other[e412] * self[e25]) - (other[e435] * self[e31]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e4] * self[e25]) - (other[e423] * self[e35]) - (other[e415] * self[e12]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e4] * self[e35]) - (other[e431] * self[e15]) - (other[e425] * self[e23]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e431] * self[e35]) - (other[e4] * self[e15]) - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e412] * self[e15]) - (other[e4] * self[e25]) - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e423] * self[e25]) - (other[e4] * self[e35]) - (other[e2] * self[e23]),
                -(other[e423] * self[e23]) - (other[e431] * self[e31]) - (other[e412] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      102        0
    //    simd3        0        3        0
    // Totals...
    // yes simd       77      105        0
    //  no simd       77      111        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e23]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e31]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e12]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234] * self[e15], other[e1234] * self[e25], other[e1234] * self[e35], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       51        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) - (other[e125] * self[e31]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) - (other[e235] * self[e12]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) - (other[e315] * self[e23]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e321] * self[e23],
                other[e321] * self[e31],
                other[e321] * self[e12],
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e125] * self[e31]) - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e235] * self[e12]) - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e315] * self[e23]) - (other[e2] * self[e15]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       47       65        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) - (other[e12] * self[e31]),
                (other[e12] * self[e23]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) - (other[e31] * self[e15]) - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) - (self[e31] * other[e12]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) - (self[e12] * other[e23]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) - (self[e23] * other[e31]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar])
                    - (self[e12] * other[e15])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       57        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       41       63        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      106      140        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e35] * other[e431]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      138        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      112      146        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      124      158        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e35] * other[e31]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e15] * other[e12]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e25] * other[e23]) - (self[e23] * other[e25]) - (self[e15] * other[e31]) - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) - (self[e35] * other[e41]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      186        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      154      188        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       93        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68       99        0
    //  no simd       77      114        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e15] * other[e4]),
                (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       51        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       36       57        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e23] * other[e45],
                self[e31] * other[e45],
                self[e12] * other[e45],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       47       65        0
    //  no simd       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      234      294        0
    //    simd2       10       12        0
    //    simd3       18       20        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      265      329        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) - (self[e31] * other[e3]) - (self[e15] * other[e4]) - (self[e35] * other[e431]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e12] * other[e1]) - (self[e15] * other[e412]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e23] * other[e2]) - (self[e25] * other[e423]) - (self[e35] * other[e4]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
            // e5
            -(self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
            // e1234
            -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       57        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       41       63        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      105        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       81      111        0
    //  no simd       90      126        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e15] * other[e4],
                self[e25] * other[e4],
                self[e35] * other[e4],
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      117        0
    //    simd3        0        3        0
    // Totals...
    // yes simd       90      120        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      142      176        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e23] * other[e4]) + (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) + (self[e31] * other[e4]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) + (self[e12] * other[e4]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) - (self[e31] * other[e3]) - (self[e15] * other[e4]) - (self[e35] * other[e431]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e12] * other[e1]) - (self[e15] * other[e412]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e23] * other[e2]) - (self[e25] * other[e423]) - (self[e35] * other[e4]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      192        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      160      194        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiMotor {
    type Output = sandwich_partial<AntiMotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      157      195        0
    //  no simd      184      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) - (other[e43] * self[e31]),
                (other[e43] * self[e23]) - (other[e41] * self[e12]),
                (other[e41] * self[e31]) - (other[e42] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e31]) + (other[scalar] * self[e12])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e25] * self[e31])
                    - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      159      197        0
    //  no simd      216      254        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) - (other[e412] * self[e31]),
                (other[e431] * self[scalar]) + (other[e412] * self[e23]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e412] * self[scalar]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e4] * self[e15])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e4] * self[e25])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e4] * self[e35])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                -(other[e423] * self[e23]) - (other[e431] * self[e31]) - (other[e412] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       98      136        0
    //  no simd      116      154        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e1234] * self[e23],
                other[e1234] * self[e31],
                other[e1234] * self[e12],
                (other[e1234] * self[e3215]) + (other[scalar] * self[scalar]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e23]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e31]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e12]),
                other[e1234] * self[e3215],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], other[e1234] * self[scalar]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234] * self[e15], other[e1234] * self[e25], other[e1234] * self[e35], other[scalar] * self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       46       68        0
    //  no simd       52       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e235] * self[scalar]) + (other[e315] * self[e12]) + (other[e321] * self[e15]) - (other[e125] * self[e31]),
                (other[e315] * self[scalar]) + (other[e125] * self[e23]) + (other[e321] * self[e25]) - (other[e235] * self[e12]),
                (other[e235] * self[e31]) + (other[e125] * self[scalar]) + (other[e321] * self[e35]) - (other[e315] * self[e23]),
                other[e321] * self[scalar],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e321] * self[e23],
                other[e321] * self[e31],
                other[e321] * self[e12],
                (other[e321] * self[e3215]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       87        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) - (other[e12] * self[e31]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[scalar] * self[e23]) - (other[e12] * self[e31]),
                (other[e12] * self[e23]) + (other[scalar] * self[e31]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) + (other[scalar] * self[e12]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e25] * self[e12]) + (other[e3215] * self[e23])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e35] * self[e23]) + (other[e3215] * self[e31])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e3215] * self[e12])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       73        0
    //  no simd       60       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       62        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      128      166        0
    //  no simd      176      214        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) + (self[scalar] * other[e423]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) + (self[scalar] * other[e431]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) + (self[scalar] * other[e412]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e35] * other[e431]) + (self[e3215] * other[e423]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e3215] * other[e431]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e3215] * other[e412]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      130      168        0
    //  no simd      184      222        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      155      193        0
    //  no simd      176      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e25] * other[e43]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e35] * other[e41]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      210        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      183      221        0
    //  no simd      216      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e3215] * other[e41])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e3215] * other[e42])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e3215] * other[e43])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       91        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       74      108        0
    //  no simd      116      159        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e23] * other[e4],
                self[e31] * other[e4],
                self[e12] * other[e4],
                (self[scalar] * other[e12345]) + (self[e3215] * other[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e15] * other[e4]),
                (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                self[e3215] * other[e4] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[scalar]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       43       65        0
    //  no simd       52       74        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                self[scalar] * other[e45],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e23] * other[e45],
                self[e31] * other[e45],
                self[e12] * other[e45],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       87        0
    //  no simd       80      102        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      264      330        0
    //    simd2       14       16        0
    //    simd3       32       32        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      325      393        0
    //  no simd      448      518        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * Simd32x2::from([other[scalar], other[e12345]])) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e3215] * other[e423]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e3215] * other[e431]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e5
            (self[scalar] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e1234
            (self[scalar] * other[e1234]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       48       70        0
    //  no simd       60       82        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       91      126        0
    //  no simd      136      174        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e15] * other[e4],
                self[e25] * other[e4],
                self[e35] * other[e4],
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) + (self[scalar] * other[e2]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[scalar] * other[e3]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                self[scalar] * other[e4],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]),
            // e15, e25, e35, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      142        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      115      150        0
    //  no simd      136      174        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                self[scalar] * other[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      161      199        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[scalar] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[scalar] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[scalar] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e3215] * other[e423]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e3215] * other[e431]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      210        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      185      223        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e3215] * other[e42])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e3215] * other[e43])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiPlane {
    type Output = sandwich_partial<AntiPlane>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       64       95        0
    //  no simd       73      104        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      100        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       74      106        0
    //  no simd       92      124        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e1] * self[e2]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       45       68        0
    //  no simd       48       74        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, other[e1234] * self[e5] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, other[scalar] * self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([other[scalar] * self[e1], other[scalar] * self[e2], other[scalar] * self[e3], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       41        0
    //  no simd       26       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e321] * self[e1] * -1.0, other[e321] * self[e2] * -1.0, other[e321] * self[e3] * -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e1] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       45        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       46        0
    //  no simd       33       49        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       39        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       40        0
    //  no simd       28       43        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e5] * self[e1]) - (other[e1] * self[e5]),
                (other[e5] * self[e2]) - (other[e2] * self[e5]),
                (other[e5] * self[e3]) - (other[e3] * self[e5]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       17        0
    //  no simd        8       23        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       88        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       60       91        0
    //  no simd       69      100        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e1] * other[e321]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       64       95        0
    //  no simd       73      104        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e1] * other[e321]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       63       94        0
    //  no simd       69      100        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) - (self[e1] * other[e45]),
                (self[e5] * other[e42]) - (self[e2] * other[e45]),
                (self[e5] * other[e43]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       83      115        0
    //  no simd       92      124        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       54        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       39       61        0
    //  no simd       48       82        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, self[e5] * other[e4] * -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       26       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([self[e1] * other[e45] * -1.0, self[e2] * other[e45] * -1.0, self[e3] * other[e45] * -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e5] * other[e45]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       37       53        0
    //  no simd       40       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       45        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       46        0
    //  no simd       33       49        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       37       53        0
    //  no simd       40       56        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      184        0
    //    simd2        6        6        0
    //    simd3       14       14        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      143      209        0
    //  no simd      192      258        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e5] * other[e4]) * -1.0, self[e5] * other[e1234]])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
            // e5
            (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) + (self[e5] * other[scalar]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
            ]) + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       43        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       50        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       29       55        0
    //  no simd       38       68        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
                self[e5] * other[e4] * -1.0,
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                self[e1] * other[e5],
                self[e2] * other[e5],
                self[e3] * other[e5],
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       58        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       60        0
    //  no simd       38       65        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                self[e5] * other[e1234] * -1.0,
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      104        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       78      110        0
    //  no simd       96      128        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e1] * other[e321]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]) - (self[e2] * other[e321]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]) - (self[e3] * other[e321]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       84      116        0
    //  no simd       96      128        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiScalar {
    type Output = sandwich_partial<AntiScalar>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from(self[e12345]) * Simd32x2::from([other[e1234], other[scalar]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ other[e12345] * self[e12345] * -1.0);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e235], other[e315], other[e125]]) * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(
            // e1234, scalar
            Simd32x2::from(self[e12345]) * Simd32x2::from([other[e4], other[e12345]]) * Simd32x2::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]) * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e235], other[e315], other[e125]]) * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * Simd32x2::from([other[e12345], other[scalar]]) * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]) * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ self[e12345] * other[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Circle {
    type Output = sandwich_partial<Circle>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      226      258        0
    //    simd3        0        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      229      264        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e15] * self[e431])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      234      266        0
    //    simd3        0        2        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      245      280        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431])
                    - (other[e4] * self[e125])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e2] * self[e435]) + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e3] * self[e415]) + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e1] * self[e425]) + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      159        0
    //    simd3        1        4        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      132      166        0
    //  no simd      140      183        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1234] * self[e235]) + (other[scalar] * self[e415]),
                (other[e1234] * self[e315]) + (other[scalar] * self[e425]),
                (other[e1234] * self[e125]) + (other[scalar] * self[e435]),
                other[scalar] * self[e321],
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], other[e1234] * self[e321]]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234] * self[e235] * -1.0, other[e1234] * self[e315] * -1.0, other[e1234] * self[e125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      145      176        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      151      185        0
    //  no simd      169      210        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
                -(other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e235] * self[e425]) - (other[e321] * self[e125]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      212        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      187      222        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]) - (other[e1] * self[e321]) - (other[e5] * self[e423]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]) - (other[e2] * self[e321]) - (other[e5] * self[e431]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e2] * self[e435]) - (other[e125] * self[e431]) - (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e3] * self[e415]) - (other[e235] * self[e412]) - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) - (other[e315] * self[e423]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      212        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      182      217        0
    //  no simd      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e15] * self[e321]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e15] * self[e435]) - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e25] * self[e415]) - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      224        0
    //    simd3        0        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      196      231        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) + (other[scalar] * self[e423]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) + (other[scalar] * self[e431]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) + (other[scalar] * self[e412]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      135      166        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      141      175        0
    //  no simd      159      200        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e5] * self[e423]),
                -(other[e2] * self[e321]) - (other[e5] * self[e431]),
                -(other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd3        0        6        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       81      106        0
    //  no simd       84      130        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e235], self[e315], self[e125]]) * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      232        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      207      242        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) - (other[e431] * self[e435]) - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431]) - (other[e412] * self[e415]) - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412]) - (other[e423] * self[e425]) - (other[e415] * self[e431]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      210      242        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      217      252        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e415] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e125] * other[e12345]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      220      252        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      222      257        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31])
                    - (self[e425] * other[e35])
                    - (self[e321] * other[e15])
                    - (self[e235] * other[e45])
                    - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12])
                    - (self[e435] * other[e15])
                    - (self[e321] * other[e25])
                    - (self[e315] * other[e45])
                    - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23])
                    - (self[e415] * other[e25])
                    - (self[e321] * other[e35])
                    - (self[e235] * other[e31])
                    - (self[e125] * other[e45]),
                -(self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      250      282        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      257      292        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e125] * other[e31]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e235] * other[e12]) + (self[e125] * other[e4235]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315]) + (self[e315] * other[e23]) - (self[e415] * other[e25]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      147        0
    //    simd3        1        4        0
    //    simd4        5        7        0
    // Totals...
    // yes simd      123      158        0
    //  no simd      140      187        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            -(Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e415] * other[e12345]) - (self[e235] * other[e4]),
                -(self[e425] * other[e12345]) - (self[e315] * other[e4]),
                -(self[e435] * other[e12345]) - (self[e125] * other[e4]),
                self[e321] * other[e12345],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], self[e321] * other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      192        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      163      197        0
    //  no simd      169      210        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]) - (self[e321] * other[e15]) - (self[e235] * other[e45]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]) - (self[e321] * other[e25]) - (self[e315] * other[e45]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]) - (self[e321] * other[e35]) - (self[e125] * other[e45]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e415] * other[e45]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]) - (self[e425] * other[e45]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]) - (self[e435] * other[e45]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      196      228        0
    //    simd3        0        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      199      234        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e321] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) - (self[e412] * other[e15]) - (self[e321] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) - (self[e423] * other[e25]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125])
                    - (self[e425] * other[e35])
                    - (self[e235] * other[e45])
                    - (self[e125] * other[e4315]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e125] * other[e4235])
                    - (self[e435] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315])
                    - (self[e415] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      196        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      170      205        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) - (self[e435] * other[e315]) - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) - (self[e415] * other[e125]) - (self[e235] * other[e435]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) - (self[e425] * other[e235]) - (self[e315] * other[e415]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      212        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      187      222        0
    //  no simd      208      250        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e423] * other[e12345]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e431] * other[e12345]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345]),
                (self[e321] * other[e12345]) - (self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      404      468        0
    //    simd2        2        2        0
    //    simd3       44       46        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      459      526        0
    //  no simd      576      650        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      182        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      153      187        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      173        0
    //    simd3        1        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      149      183        0
    //  no simd      169      210        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e235] * other[e4]),
                -(self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e315] * other[e4]),
                -(self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd3        0        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       81      103        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      158      189        0
    //    simd3        1        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      161      195        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      276        0
    //    simd3        0        2        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      255      290        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e415] * other[e4])
                    - (self[e435] * other[e431]),
                (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e425] * other[e4]),
                (self[e415] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e435] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      276        0
    //    simd3        0        2        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      255      290        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for CircleRotor {
    type Output = sandwich_partial<CircleRotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      241      276        0
    //    simd3        0        1        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      247      284        0
    //  no simd      265      307        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e45] * self[e12345])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      249      284        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      264      301        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e415])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e425])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415])
                    - (other[e423] * self[e425])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e435])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e4] * self[e125])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e321] * self[e415])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e321] * self[e425])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      188        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      155      194        0
    //  no simd      167      211        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e1234] * self[e415]) + (other[scalar] * self[e423]),
                (other[e1234] * self[e425]) + (other[scalar] * self[e431]),
                (other[e1234] * self[e435]) + (other[scalar] * self[e412]),
                other[scalar] * self[e12345],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1234] * self[e235]) + (other[scalar] * self[e415]),
                (other[e1234] * self[e315]) + (other[scalar] * self[e425]),
                (other[e1234] * self[e125]) + (other[scalar] * self[e435]),
                other[scalar] * self[e321],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e1234] * self[e235] * -1.0,
                other[e1234] * self[e315] * -1.0,
                other[e1234] * self[e125] * -1.0,
                (other[e1234] * self[e321]) + (other[e1234] * self[e12345]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      153      187        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      162      198        0
    //  no simd      189      230        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
                (other[e321] * self[e12345]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e321] * self[e125]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      227        0
    //    simd3        0        1        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      202      239        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]) - (other[e1] * self[e321]) - (other[e5] * self[e423]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]) - (other[e2] * self[e321]) - (other[e5] * self[e431]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      229        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      198      235        0
    //  no simd      210      252        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      235        0
    //    simd3        0        1        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      208      245        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      180        0
    //    simd3        0        1        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      154      190        0
    //  no simd      178      219        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e5] * self[e423]),
                -(other[e2] * self[e321]) - (other[e5] * self[e431]),
                -(other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      112        0
    //    simd3        0        3        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       96      123        0
    //  no simd      105      153        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e12345]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      214      249        0
    //    simd3        0        1        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      224      261        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      221      256        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      232      269        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e12345] * self[e423]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e12345] * self[e431]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431])
                    - (other[e12345] * self[e412]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e12345] * self[e321])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      238      273        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      242      279        0
    //  no simd      254      296        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42]) + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e12345] * other[e15])
                    - (self[e425] * other[e35])
                    - (self[e321] * other[e15])
                    - (self[e235] * other[e45])
                    - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e12345] * other[e25])
                    - (self[e435] * other[e15])
                    - (self[e321] * other[e25])
                    - (self[e315] * other[e45])
                    - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e12345] * other[e35])
                    - (self[e415] * other[e25])
                    - (self[e321] * other[e35])
                    - (self[e235] * other[e31])
                    - (self[e125] * other[e45]),
                -(self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      269      304        0
    //    simd3        0        1        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      279      316        0
    //  no simd      309      351        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e125] * other[e31]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e235] * other[e4315]) + (self[e315] * other[e23]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      131      172        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      140      183        0
    //  no simd      167      215        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e423] * other[e12345]) - (self[e415] * other[e4]),
                -(self[e431] * other[e12345]) - (self[e425] * other[e4]),
                -(self[e412] * other[e12345]) - (self[e435] * other[e4]),
                self[e12345] * other[e12345] * -1.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e415] * other[e12345]) - (self[e235] * other[e4]),
                -(self[e425] * other[e12345]) - (self[e315] * other[e4]),
                -(self[e435] * other[e12345]) - (self[e125] * other[e4]),
                self[e321] * other[e12345],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e235] * other[e12345] * -1.0,
                self[e315] * other[e12345] * -1.0,
                self[e125] * other[e12345] * -1.0,
                -(self[e321] * other[e4]) - (self[e12345] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      173      207        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      177      213        0
    //  no simd      189      230        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]) - (self[e321] * other[e15]) - (self[e235] * other[e45]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]) - (self[e321] * other[e25]) - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]) - (self[e321] * other[e35]) - (self[e125] * other[e45]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e415] * other[e45]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]) - (self[e425] * other[e45]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]) - (self[e435] * other[e45]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      243        0
    //    simd3        0        1        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      214      251        0
    //  no simd      232      274        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e321] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) - (self[e412] * other[e15]) - (self[e321] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) - (self[e423] * other[e25]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15])
                    - (self[e425] * other[e35])
                    - (self[e235] * other[e45])
                    - (self[e125] * other[e4315]),
                (self[e415] * other[e35]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25])
                    - (self[e435] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e235] * other[e4315]) + (self[e12345] * other[e35])
                    - (self[e415] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      209        0
    //    simd3        0        1        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      183      220        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]) - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]) - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]) - (self[e12345] * other[e435]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e12345] * other[e125]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      223        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      199      236        0
    //  no simd      232      274        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e12345] * other[e435]),
                (self[e321] * other[e12345]) - (self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e12345] * other[e125]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      436      503        0
    //    simd2        2        2        0
    //    simd3       52       53        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      501      570        0
    //  no simd      640      714        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345]),
                (self[e12345] * other[scalar])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e12345] * other[e3215])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e12345] * other[e125]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e12345] * other[e321])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e12345] * other[e3])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e12345] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      162      196        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      166      202        0
    //  no simd      178      219        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      188        0
    //    simd3        1        2        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      163      199        0
    //  no simd      189      230        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e235] * other[e4]),
                -(self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e315] * other[e4]),
                -(self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]) - (self[e12345] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) + (self[e12345] * other[e1]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) + (self[e12345] * other[e2]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e12345] * other[e3]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      116        0
    //    simd3        0        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       99      123        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      170      204        0
    //    simd3        1        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      175      211        0
    //  no simd      189      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e321] * other[e1234]) + (self[e12345] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      291        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      272      309        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e415] * other[e4])
                    - (self[e435] * other[e431])
                    - (self[e12345] * other[e423]),
                (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e425] * other[e4])
                    - (self[e12345] * other[e431]),
                (self[e415] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e425] * other[e423])
                    - (self[e435] * other[e4])
                    - (self[e12345] * other[e412]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e12345] * other[e435]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e12345] * other[e321])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e12345] * other[e3])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      295        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      275      312        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Dipole {
    type Output = sandwich_partial<Dipole>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      210      242        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      217      252        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      218      250        0
    //    simd3        0        2        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      233      268        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e4] * self[e23]) + (other[e3] * self[e42]) - (other[e412] * self[e31]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e4] * self[e31]) + (other[e1] * self[e43]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e4] * self[e12]) + (other[e2] * self[e41]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43]) + (other[e4] * self[e15]) + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41]) + (other[e4] * self[e25]) + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e4] * self[e35]) + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]) + (other[e2] * self[e12]) + (other[e5] * self[e41])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]) + (other[e3] * self[e23]) + (other[e5] * self[e42])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e1] * self[e31]) + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      148        0
    //    simd3        1        4        0
    //    simd4        4        6        0
    // Totals...
    // yes simd      126      158        0
    //  no simd      140      184        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e23]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e31]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e12]),
                other[scalar] * self[e45],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], other[e1234] * self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234] * self[e15], other[e1234] * self[e25], other[e1234] * self[e35], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      133      167        0
    //    simd3        0        2        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      142      179        0
    //  no simd      169      213        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41] * -1.0,
                other[e321] * self[e42] * -1.0,
                other[e321] * self[e43] * -1.0,
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) - (other[e125] * self[e42]),
                (other[e125] * self[e41]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) - (other[e315] * self[e41]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e321] * self[e15]) - (other[e125] * self[e31]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]) - (other[e235] * self[e12]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]) - (other[e315] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e321] * self[e23]) - (other[e125] * self[e42]),
                (other[e125] * self[e41]) + (other[e321] * self[e31]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e321] * self[e12]) - (other[e315] * self[e41]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      196        0
    //    simd3        0        2        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      175      210        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]) - (other[e125] * self[e42]) - (other[e1] * self[e45]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]) - (other[e235] * self[e43]) - (other[e2] * self[e45]),
                (other[e235] * self[e42]) + (other[e5] * self[e43]) - (other[e315] * self[e41]) - (other[e3] * self[e45]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e125] * self[e31]) - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e235] * self[e12]) - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e315] * self[e23]) - (other[e2] * self[e15]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e125] * self[e42]) - (other[e3] * self[e31]),
                (other[e125] * self[e41]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e235] * self[e43]) - (other[e1] * self[e12]),
                (other[e235] * self[e42]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e315] * self[e41]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      200        0
    //    simd3        0        2        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      173      208        0
    //  no simd      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) - (other[e31] * self[e15]) - (other[e25] * self[e23]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e35] * self[e42]) - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e15] * self[e43]) - (other[e35] * self[e41]),
                (other[e12] * self[e45]) + (other[e25] * self[e41]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      212        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      187      222        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) + (other[e3215] * self[e41]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) + (other[e3215] * self[e42]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e3215] * self[e43]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e3215] * self[e23])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e3215] * self[e31])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e3215] * self[e12])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) - (other[e25] * self[e43]) - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) - (other[e35] * self[e41]) - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) - (other[e15] * self[e42]) - (other[e3215] * self[e43]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      135      166        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      141      175        0
    //  no simd      159      200        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e5] * self[e41]) - (other[e1] * self[e45]),
                (other[e5] * self[e42]) - (other[e2] * self[e45]),
                (other[e5] * self[e43]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e2] * self[e15]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd3        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       84      107        0
    //  no simd       84      124        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      220        0
    //    simd3        0        2        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      198      233        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) - (other[e412] * self[e31]) - (other[e435] * self[e42]) - (other[e321] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) - (other[e423] * self[e12]) - (other[e415] * self[e43]) - (other[e321] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) - (other[e431] * self[e23]) - (other[e425] * self[e41]) - (other[e321] * self[e43]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      198      230        0
    //    simd3        0        2        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      208      243        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e412] * self[e31])
                    - (other[e435] * self[e42])
                    - (other[e321] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e423] * self[e12])
                    - (other[e415] * self[e43])
                    - (other[e321] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e12345] * self[e43])
                    - (other[e431] * self[e23])
                    - (other[e425] * self[e41])
                    - (other[e321] * self[e43]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43]) + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41]) + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e12345] * self[e15])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e12345] * self[e25])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e12345] * self[e35])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      204      236        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      210      245        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      250      282        0
    //    simd3        0        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      257      292        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      148        0
    //    simd3        1        4        0
    //    simd4        5        7        0
    // Totals...
    // yes simd      123      159        0
    //  no simd      140      188        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e15] * other[e4]),
                (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                self[e45] * other[e12345] * -1.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], self[e45] * other[e4]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      149      180        0
    //    simd3        0        2        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      154      188        0
    //  no simd      169      210        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      216        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      190      225        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e45] * other[e4235]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e45] * other[e4315]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e45] * other[e4125]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      184        0
    //    simd3        0        2        0
    //    simd4        9       10        0
    // Totals...
    // yes simd      161      196        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      200        0
    //    simd3        0        2        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      178      213        0
    //  no simd      208      250        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      368      434        0
    //    simd2       18       18        0
    //    simd3       44       46        0
    //    simd4       10       11        0
    // Totals...
    // yes simd      440      509        0
    //  no simd      576      652        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0])
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) - (self[e42] * other[e12]) - (self[e42] * other[e4125]) - (self[e31] * other[e43]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) - (self[e43] * other[e23]) - (self[e43] * other[e4235]) - (self[e12] * other[e41]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) - (self[e41] * other[e31]) - (self[e41] * other[e4315]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            -(self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      143      174        0
    //    simd3        0        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      147      181        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      173        0
    //    simd3        1        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      149      183        0
    //  no simd      169      210        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]) - (self[e45] * other[e4]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd3        0        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       81      103        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      181        0
    //    simd3        1        3        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      155      189        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      256        0
    //    simd3        0        2        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      240      275        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      288        0
    //    simd3        0        2        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      264      299        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[scalar]) + (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e42] * other[scalar]) + (self[e23] * other[e43]) + (self[e31] * other[e1234])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e43] * other[scalar]) + (self[e31] * other[e41]) + (self[e12] * other[e1234])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for DipoleInversion {
    type Output = sandwich_partial<DipoleInversion>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      301      336        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      319      356        0
    //  no simd      373      415        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[scalar] * self[e41])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[scalar] * self[e42])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[scalar] * self[e43])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      313      348        0
    //    simd3        0        1        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      343      380        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e4] * self[e4235])
                    - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e4] * self[e4315])
                    - (other[e2] * self[e1234]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e4] * self[e4125])
                    - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      190      221        0
    //    simd3        0        1        0
    //    simd4       12       14        0
    // Totals...
    // yes simd      202      236        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1234] * self[e23]) + (other[scalar] * self[e41]) - (other[e1234] * self[e4235]),
                (other[e1234] * self[e31]) + (other[scalar] * self[e42]) - (other[e1234] * self[e4315]),
                (other[e1234] * self[e12]) + (other[scalar] * self[e43]) - (other[e1234] * self[e4125]),
                other[e1234] * self[e3215],
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[scalar] * self[e15],
                other[scalar] * self[e25],
                other[scalar] * self[e35],
                (other[scalar] * self[e1234]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e4235]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e4315]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e4125]),
                other[scalar] * self[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      231        0
    //    simd3        0        1        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      211      252        0
    //  no simd      268      314        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41] * -1.0,
                other[e321] * self[e42] * -1.0,
                other[e321] * self[e43] * -1.0,
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) - (other[e125] * self[e31]) - (other[e125] * self[e4315]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) - (other[e235] * self[e12]) - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) - (other[e315] * self[e23]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e321] * self[e23]) - (other[e125] * self[e42]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e321] * self[e31]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e321] * self[e12]) - (other[e315] * self[e41]),
                other[e321] * self[e1234] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      240      275        0
    //    simd3        0        1        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      262      299        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      254      289        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      265      302        0
    //  no simd      298      340        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      264      299        0
    //    simd3        0        1        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      280      317        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e3215] * self[e41]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e3215] * self[e42]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e3215] * self[e43]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      223        0
    //    simd3        0        1        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      208      245        0
    //  no simd      268      310        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      157      176        0
    //    simd3        0        2        0
    //    simd4       13       19        0
    // Totals...
    // yes simd      170      197        0
    //  no simd      209      258        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      266      301        0
    //    simd3        0        1        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      289      326        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      273      308        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      298      335        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      298      333        0
    //    simd3        0        1        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      313      350        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      357      392        0
    //    simd3        0        1        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      376      413        0
    //  no simd      433      475        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e31] * self[e43]) + (other[e4235] * self[e1234]) + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[e4315] * self[e1234]) + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e4235] * self[e42]) + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      162      196        0
    //    simd3        0        1        0
    //    simd4       19       21        0
    // Totals...
    // yes simd      181      218        0
    //  no simd      238      283        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e23] * other[e4]) - (self[e4235] * other[e4]),
                (self[e42] * other[e12345]) + (self[e31] * other[e4]) - (self[e4315] * other[e4]),
                (self[e43] * other[e12345]) + (self[e12] * other[e4]) - (self[e4125] * other[e4]),
                self[e3215] * other[e4],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e15] * other[e4]),
                (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                -(self[e45] * other[e12345]) - (self[e3215] * other[e4]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4235] * other[e12345]) * -1.0,
                (self[e4315] * other[e12345]) * -1.0,
                (self[e4125] * other[e12345]) * -1.0,
                self[e1234] * other[e12345],
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      259        0
    //    simd3        0        1        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      235      272        0
    //  no simd      268      310        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e1234] * other[e15]) + (self[e4235] * other[e45]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e1234] * other[e25]) + (self[e4315] * other[e45]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e1234] * other[e35]) + (self[e4125] * other[e45]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e4125] * other[e25]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e4315] * other[e35]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e4235] * other[e35]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e4125] * other[e15]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e4315] * other[e15]) - (self[e23] * other[e25]) - (self[e35] * other[e45]) - (self[e4235] * other[e25]),
                self[e1234] * other[e45],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]) - (self[e1234] * other[e15]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]) - (self[e1234] * other[e25]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]) - (self[e1234] * other[e35]),
                -(self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      276      311        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      289      326        0
    //  no simd      328      370        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e45] * other[e4235])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    - (self[e42] * other[e35])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e45] * other[e4315])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    - (self[e43] * other[e15])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e45] * other[e4125])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    - (self[e41] * other[e25])
                    - (self[e4235] * other[e4315]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e1234] * other[e3215]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e25] * other[e4125])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e1234] * other[e45]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e1234] * other[e15]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e1234] * other[e25]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e1234] * other[e35]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      226      261        0
    //    simd3        0        1        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      244      281        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e1234] * other[e425]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e1234] * other[e435]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e1234] * other[e235]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e1234] * other[e315]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e1234] * other[e125]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e4125] * other[e425]),
                (self[e41] * other[e125]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435]),
                (self[e42] * other[e235]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      271        0
    //    simd3        0        1        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      259      296        0
    //  no simd      328      370        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e1234] * other[e235])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e1234] * other[e315])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e1234] * other[e125])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      542      609        0
    //    simd2       22       22        0
    //    simd3       74       75        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      660      729        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e4125] * other[e4315])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e4235] * other[e4125])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e4315] * other[e4235])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e1234] * other[e235])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e1234] * other[e315])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e1234] * other[e125])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) + (self[e4315] * other[e412]),
                (self[e23] * other[e412]) + (self[e4125] * other[e423]),
                (self[e31] * other[e423]) + (self[e4235] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) + (self[e4125] * other[e315])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e3])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) + (self[e4235] * other[e125])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e1])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) + (self[e4315] * other[e235])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e2])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43])
                    - (self[e1234] * other[e15])
                    - (self[e4315] * other[e12]),
                (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41])
                    - (self[e1234] * other[e25])
                    - (self[e4125] * other[e23]),
                (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42])
                    - (self[e1234] * other[e35])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
            // e1234
            (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      220      255        0
    //    simd3        0        1        0
    //    simd4       12       13        0
    // Totals...
    // yes simd      232      269        0
    //  no simd      268      310        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      195      230        0
    //    simd3        0        1        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      217      254        0
    //  no simd      283      325        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]) - (self[e1234] * other[e1]) - (self[e4235] * other[e4]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]) - (self[e1234] * other[e2]) - (self[e4315] * other[e4]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]) - (self[e1234] * other[e3]) - (self[e4125] * other[e4]),
                (self[e1234] * other[e5]) + (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]) - (self[e45] * other[e1]) - (self[e4125] * other[e2]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]) - (self[e45] * other[e2]) - (self[e4235] * other[e3]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]) - (self[e45] * other[e3]) - (self[e4315] * other[e1]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e4235] * other[e5]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e4315] * other[e5]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e4125] * other[e5]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e42] * other[e5]) + (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e43] * other[e5]) + (self[e31] * other[e1]) - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      177      196        0
    //    simd3        0        2        0
    //    simd4        8       12        0
    // Totals...
    // yes simd      185      210        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      227      262        0
    //    simd3        0        1        0
    //    simd4       14       15        0
    // Totals...
    // yes simd      241      278        0
    //  no simd      283      325        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]) - (self[e4235] * other[e1234]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]) - (self[e4315] * other[e1234]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]) - (self[e4125] * other[e1234]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      351        0
    //    simd3        0        1        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      349      386        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[e4315] * other[e412])
                    - (self[e1234] * other[e1])
                    - (self[e4235] * other[e4]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e4125] * other[e423])
                    - (self[e1234] * other[e2])
                    - (self[e4315] * other[e4]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e4235] * other[e431])
                    - (self[e1234] * other[e3])
                    - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e1234] * other[e235])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e1234] * other[e315])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e1234] * other[e125])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      395        0
    //    simd3        0        1        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      382      419        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[scalar])
                    + (self[e43] * other[e31])
                    + (self[e43] * other[e4315])
                    + (self[e12] * other[e42])
                    + (self[e1234] * other[e4235])
                    + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e4235] * other[e1234]),
                (self[e41] * other[e12])
                    + (self[e41] * other[e4125])
                    + (self[e42] * other[scalar])
                    + (self[e23] * other[e43])
                    + (self[e1234] * other[e4315])
                    + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e4315] * other[e1234]),
                (self[e42] * other[e23])
                    + (self[e42] * other[e4235])
                    + (self[e43] * other[scalar])
                    + (self[e31] * other[e41])
                    + (self[e1234] * other[e4125])
                    + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e4125] * other[e1234]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e35] * other[e42])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    + (self[e3215] * other[e41])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    + (self[e3215] * other[e42])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    + (self[e3215] * other[e43])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                    - (self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43])
                    - (self[e1234] * other[e15])
                    - (self[e4315] * other[e12]),
                (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41])
                    - (self[e1234] * other[e25])
                    - (self[e4125] * other[e23]),
                (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42])
                    - (self[e1234] * other[e35])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for DualNum {
    type Output = sandwich_partial<DualNum>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       53        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       56        0
    //  no simd       24       65        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e23] * self[e4]),
                (other[e42] * self[e12345]) + (other[e31] * self[e4]),
                (other[e43] * self[e12345]) + (other[e12] * self[e4]),
                other[scalar] * self[e12345],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e15] * self[e4]),
                (other[e31] * self[e12345]) + (other[e25] * self[e4]),
                (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                other[e45] * self[e12345] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                (other[e45] * self[e4]) + (other[scalar] * self[e4]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       57        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       22       61        0
    //  no simd       31       73        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1] * self[e4]) - (other[e423] * self[e12345]) - (other[e415] * self[e4]),
                (other[e2] * self[e4]) - (other[e431] * self[e12345]) - (other[e425] * self[e4]),
                (other[e3] * self[e4]) - (other[e412] * self[e12345]) - (other[e435] * self[e4]),
                other[e5] * self[e4] * -1.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e415] * self[e12345]) - (other[e235] * self[e4]),
                -(other[e425] * self[e12345]) - (other[e315] * self[e4]),
                -(other[e435] * self[e12345]) - (other[e125] * self[e4]),
                (other[e321] * self[e12345]) + (other[e5] * self[e4]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e235] * self[e12345] * -1.0,
                other[e315] * self[e12345] * -1.0,
                other[e125] * self[e12345] * -1.0,
                (other[e321] * self[e4]) - (other[e4] * self[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e1] * self[e12345]),
                (other[e315] * self[e4]) + (other[e2] * self[e12345]),
                (other[e125] * self[e4]) + (other[e3] * self[e12345]),
                other[e5] * self[e12345] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(
            // e4, e12345
            Simd32x2::from([(other[e1234] * self[e12345]) + (other[scalar] * self[e4]), other[scalar] * self[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       11       40        0
    //  no simd       14       52        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e235] * self[e4], other[e315] * self[e4], other[e125] * self[e4], other[e321] * self[e12345]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e235] * self[e12345], other[e315] * self[e12345], other[e125] * self[e12345], other[e321] * self[e4]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e235] * self[e4], other[e315] * self[e4], other[e125] * self[e4], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       42        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       12       49        0
    //  no simd       21       70        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e4] * -1.0,
                other[e315] * self[e4] * -1.0,
                other[e125] * self[e4] * -1.0,
                (other[e321] * self[e12345]) + (other[e5] * self[e4]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e235] * self[e12345], other[e315] * self[e12345], other[e125] * self[e12345], other[e321] * self[e4]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e1] * self[e12345]),
                (other[e315] * self[e4]) + (other[e2] * self[e12345]),
                (other[e125] * self[e4]) + (other[e3] * self[e12345]),
                other[e5] * self[e12345] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       46        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       48        0
    //  no simd       17       53        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e15] * self[e4]),
                (other[e31] * self[e12345]) + (other[e25] * self[e4]),
                (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       47        0
    //  no simd       21       62        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e23] * self[e4],
                other[e31] * self[e4],
                other[e12] * self[e4],
                (other[scalar] * self[e12345]) + (other[e3215] * self[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e15] * self[e4]),
                (other[e31] * self[e12345]) + (other[e25] * self[e4]),
                (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                other[e3215] * self[e4],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       31        0
    //  no simd       17       55        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, other[e5] * self[e4]]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from(other[e12345]) * Simd32x2::from([self[e4], self[e12345]]) * Simd32x2::from(-1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       39        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       15       44        0
    //  no simd       20       57        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            -(Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e415] * self[e12345]) - (other[e235] * self[e4]),
                -(other[e425] * self[e12345]) - (other[e315] * self[e4]),
                -(other[e435] * self[e12345]) - (other[e125] * self[e4]),
                other[e321] * self[e12345],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e235] * self[e12345], other[e315] * self[e12345], other[e125] * self[e12345], other[e321] * self[e4]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e235] * self[e4], other[e315] * self[e4], other[e125] * self[e4], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       48        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       52        0
    //  no simd       24       64        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e415] * self[e4]),
                -(other[e431] * self[e12345]) - (other[e425] * self[e4]),
                -(other[e412] * self[e12345]) - (other[e435] * self[e4]),
                other[e12345] * self[e12345] * -1.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e415] * self[e12345]) - (other[e235] * self[e4]),
                -(other[e425] * self[e12345]) - (other[e315] * self[e4]),
                -(other[e435] * self[e12345]) - (other[e125] * self[e4]),
                other[e321] * self[e12345],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e235] * self[e12345] * -1.0,
                other[e315] * self[e12345] * -1.0,
                other[e125] * self[e12345] * -1.0,
                (other[e321] * self[e4]) - (other[e12345] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e235] * self[e4], other[e315] * self[e4], other[e125] * self[e4], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       49        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       52        0
    //  no simd       20       59        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e15] * self[e4]),
                (other[e31] * self[e12345]) + (other[e25] * self[e4]),
                (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                other[e45] * self[e12345] * -1.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], other[e45] * self[e4]]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       52        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       16       58        0
    //  no simd       31       76        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e23] * self[e4]) + (other[e4235] * self[e4]),
                (other[e42] * self[e12345]) + (other[e31] * self[e4]) + (other[e4315] * self[e4]),
                (other[e43] * self[e12345]) + (other[e12] * self[e4]) + (other[e4125] * self[e4]),
                other[e3215] * self[e4],
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e23] * self[e12345], other[e31] * self[e12345], other[e12] * self[e12345], (other[e45] * self[e12345]) * -1.0])
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4235] * self[e12345]) * -1.0,
                (other[e4315] * self[e12345]) * -1.0,
                (other[e4125] * self[e12345]) * -1.0,
                other[e1234] * self[e12345],
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(
            // e1234, scalar
            Simd32x2::from([-(other[e4] * self[e12345]) - (other[e12345] * self[e4]), other[e12345] * self[e12345] * -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       45        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       47        0
    //  no simd       14       53        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4] * other[e15], self[e4] * other[e25], self[e4] * other[e35], self[e12345] * other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345] * other[e15], self[e12345] * other[e25], self[e12345] * other[e35], self[e4] * other[e45]]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4] * other[e15], self[e4] * other[e25], self[e4] * other[e35], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       47        0
    //  no simd       21       62        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4] * other[e15],
                self[e4] * other[e25],
                self[e4] * other[e35],
                (self[e4] * other[e3215]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4] * other[e15]) - (self[e12345] * other[e4235]),
                (self[e4] * other[e25]) - (self[e12345] * other[e4315]),
                (self[e4] * other[e35]) - (self[e12345] * other[e4125]),
                self[e4] * other[e45],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       40        0
    //    simd3        0        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       44        0
    //  no simd       17       54        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e4] * other[e235]) - (self[e12345] * other[e415]),
                -(self[e4] * other[e315]) - (self[e12345] * other[e425]),
                -(self[e4] * other[e125]) - (self[e12345] * other[e435]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e12345] * other[e235] * -1.0, self[e12345] * other[e315] * -1.0, self[e12345] * other[e125] * -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4] * other[e235], self[e4] * other[e315], self[e4] * other[e125], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       45        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       12       51        0
    //  no simd       21       69        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4] * other[e415] * -1.0,
                self[e4] * other[e425] * -1.0,
                self[e4] * other[e435] * -1.0,
                -(self[e4] * other[e5]) - (self[e12345] * other[e12345]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e4] * other[e235]) - (self[e12345] * other[e415]),
                -(self[e4] * other[e315]) - (self[e12345] * other[e425]),
                -(self[e4] * other[e125]) - (self[e12345] * other[e435]),
                self[e4] * other[e5],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e12345] * other[e235], self[e12345] * other[e315], self[e12345] * other[e125], self[e4] * other[e12345]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4] * other[e235], self[e4] * other[e315], self[e4] * other[e125], self[e12345] * other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       77        0
    //    simd3       10       18        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       35       98        0
    //  no simd       64      143        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e4] * other[e5]) - (self[e12345] * other[e12345]), (self[e4] * other[e3215]) + (self[e12345] * other[scalar])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other[e4235]) * -1.0,
                (self[e12345] * other[e4315]) * -1.0,
                (self[e12345] * other[e4125]) * -1.0,
                (self[e4] * other[e45]) + (self[e12345] * other[e1234]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
            // e5
            self[e12345] * other[e3215],
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e12345] * other[e235] * -1.0,
                self[e12345] * other[e315] * -1.0,
                self[e12345] * other[e125] * -1.0,
                (self[e4] * other[e5]) + (self[e12345] * other[e321]),
            ]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12
            -(Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e12345] * other[e23], self[e12345] * other[e31], self[e12345] * other[e12], (self[e12345] * other[e45]) * -1.0])
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4] * other[e235]) + (self[e12345] * other[e1]),
                (self[e4] * other[e315]) + (self[e12345] * other[e2]),
                (self[e4] * other[e125]) + (self[e12345] * other[e3]),
                self[e12345] * other[e5] * -1.0,
            ]),
            // e1234
            (self[e4] * other[e321]) - (self[e4] * other[e12345]) - (self[e12345] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       38        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       42        0
    //  no simd       17       54        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, self[e4] * other[e3215]]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, self[e12345] * other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e12345] * other[e4235] * -1.0, self[e12345] * other[e4315] * -1.0, self[e12345] * other[e4125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       25        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       33        0
    //  no simd       17       57        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, self[e4] * other[e5]]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, self[e12345] * other[e4] * -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from(other[scalar]) * Simd32x2::from([self[e4], self[e12345]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       32        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       38        0
    //  no simd       17       56        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, self[e4] * other[e3215]]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, self[e12345] * other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       50        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       19       56        0
    //  no simd       34       74        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4] * other[e1], self[e4] * other[e2], self[e4] * other[e3], 0.0])
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e4] * other[e235]) - (self[e12345] * other[e415]),
                -(self[e4] * other[e315]) - (self[e12345] * other[e425]),
                -(self[e4] * other[e125]) - (self[e12345] * other[e435]),
                (self[e4] * other[e5]) + (self[e12345] * other[e321]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e12345] * other[e235] * -1.0,
                self[e12345] * other[e315] * -1.0,
                self[e12345] * other[e125] * -1.0,
                (self[e4] * other[e321]) - (self[e4] * other[e12345]) - (self[e12345] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4] * other[e235]) + (self[e12345] * other[e1]),
                (self[e4] * other[e315]) + (self[e12345] * other[e2]),
                (self[e4] * other[e125]) + (self[e12345] * other[e3]),
                self[e12345] * other[e5] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       46        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       13       54        0
    //  no simd       34       78        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4] * other[e4235], self[e4] * other[e4315], self[e4] * other[e4125], 0.0])
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e12345] * other[e23], self[e12345] * other[e31], self[e12345] * other[e12], (self[e12345] * other[e45]) * -1.0])
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other[e4235]) * -1.0,
                (self[e12345] * other[e4315]) * -1.0,
                (self[e12345] * other[e4125]) * -1.0,
                (self[e4] * other[e45]) + (self[e12345] * other[e1234]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for FlatPoint {
    type Output = sandwich_partial<FlatPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      107        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       74      109        0
    //  no simd       77      115        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45] * -1.0,
                other[e42] * self[e45] * -1.0,
                other[e43] * self[e45] * -1.0,
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) - (other[e42] * self[e15]),
                (other[scalar] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]),
                (other[e23] * self[e25]) + (other[e35] * self[e45]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       92        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       68      102        0
    //  no simd       92      132        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45] * -1.0,
                other[e431] * self[e45] * -1.0,
                other[e412] * self[e45] * -1.0,
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e4] * self[e15]) - (other[e412] * self[e25]) - (other[e1] * self[e45]),
                (other[e412] * self[e15]) + (other[e4] * self[e25]) - (other[e423] * self[e35]) - (other[e2] * self[e45]),
                (other[e423] * self[e25]) + (other[e4] * self[e35]) - (other[e431] * self[e15]) - (other[e3] * self[e45]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) - (other[e435] * self[e25]) - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) - (other[e415] * self[e35]) - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) - (other[e425] * self[e15]) - (other[e2] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) - (other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e4] * self[e15]),
                (other[e423] * self[e35]) - (other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e4] * self[e25]),
                (other[e431] * self[e15]) - (other[e423] * self[e25]) - (other[e435] * self[e45]) - (other[e4] * self[e35]),
                other[e4] * self[e45] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       71        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       44       73        0
    //  no simd       44       79        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234] * self[e15], other[e1234] * self[e25], other[e1234] * self[e35], other[scalar] * self[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], other[e1234] * self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234] * self[e15], other[e1234] * self[e25], other[e1234] * self[e35], 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       15       36        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, other[e321] * self[e45] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e321] * self[e15]),
                (other[e315] * self[e45]) + (other[e321] * self[e25]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       40        0
    //  no simd       24       52        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e321] * self[e25]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       20       39        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) - (other[e12] * self[e25]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) - (other[e23] * self[e35]),
                (other[e23] * self[e25]) + (other[e35] * self[e45]) - (other[e31] * self[e15]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       24       44        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) - (other[e12] * self[e25]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) - (other[e23] * self[e35]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e35] * self[e45]) - (other[e31] * self[e15]),
                other[scalar] * self[e45],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                (other[e3215] * self[e45]) - (other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       41        0
    //  no simd       18       44        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([other[e1] * self[e45] * -1.0, other[e2] * self[e45] * -1.0, other[e3] * self[e45] * -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) - (other[e2] * self[e15]),
                (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       52       84        0
    //  no simd       73      111        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45] * -1.0,
                other[e431] * self[e45] * -1.0,
                other[e412] * self[e45] * -1.0,
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) - (other[e412] * self[e25]),
                (other[e412] * self[e15]) - (other[e423] * self[e35]),
                (other[e423] * self[e25]) - (other[e431] * self[e15]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) - (other[e435] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) - (other[e415] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) - (other[e425] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) - (other[e431] * self[e35]) - (other[e415] * self[e45]),
                (other[e423] * self[e35]) - (other[e412] * self[e15]) - (other[e425] * self[e45]),
                (other[e431] * self[e15]) - (other[e423] * self[e25]) - (other[e435] * self[e45]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       79        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       56       88        0
    //  no simd       77      115        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45] * -1.0,
                other[e431] * self[e45] * -1.0,
                other[e412] * self[e45] * -1.0,
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) - (other[e412] * self[e25]),
                (other[e412] * self[e15]) - (other[e423] * self[e35]),
                (other[e423] * self[e25]) - (other[e431] * self[e15]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]) - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e12345] * self[e15]) - (other[e435] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e12345] * self[e25]) - (other[e415] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]) - (other[e425] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) - (other[e431] * self[e35]) - (other[e415] * self[e45]),
                (other[e423] * self[e35]) - (other[e412] * self[e15]) - (other[e425] * self[e45]),
                (other[e431] * self[e15]) - (other[e423] * self[e25]) - (other[e435] * self[e45]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      103        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       70      105        0
    //  no simd       73      111        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45] * -1.0,
                other[e42] * self[e45] * -1.0,
                other[e43] * self[e45] * -1.0,
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) - (other[e12] * self[e25]) - (other[e45] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) - (other[e23] * self[e35]) - (other[e45] * self[e25]),
                (other[e23] * self[e25]) + (other[e35] * self[e45]) - (other[e31] * self[e15]) - (other[e45] * self[e35]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      120        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       86      123        0
    //  no simd       92      132        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45] * -1.0,
                other[e42] * self[e45] * -1.0,
                other[e43] * self[e45] * -1.0,
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) + (other[e4125] * self[e45]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e4125] * self[e25]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e4315] * self[e35]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e4235] * self[e35]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e4125] * self[e15]),
                (other[e23] * self[e25]) + (other[e35] * self[e45]) + (other[e4315] * self[e15]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e4235] * self[e25]),
                other[e1234] * self[e45] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) - (other[e42] * self[e15]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       58        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       32       65        0
    //  no simd       44       86        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4] * self[e15], other[e4] * self[e25], other[e4] * self[e35], other[e12345] * self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345] * self[e15], other[e12345] * self[e25], other[e12345] * self[e35], other[e4] * self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4] * self[e15] * -1.0, other[e4] * self[e25] * -1.0, other[e4] * self[e35] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       15       31        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, other[e45] * self[e45]]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e15] * self[e45]) - (other[e45] * self[e15]),
                (other[e25] * self[e45]) - (other[e45] * self[e25]),
                (other[e35] * self[e45]) - (other[e45] * self[e35]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       24       44        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e15] * other[e45]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e25] * other[e45]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e35] * other[e45]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       17       34        0
    //  no simd       20       46        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e35] * other[e425]) + (self[e45] * other[e235]) - (self[e25] * other[e435]),
                (self[e15] * other[e435]) + (self[e45] * other[e315]) - (self[e35] * other[e415]),
                (self[e25] * other[e415]) + (self[e45] * other[e125]) - (self[e15] * other[e425]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e45] * other[e415] * -1.0,
                self[e45] * other[e425] * -1.0,
                self[e45] * other[e435] * -1.0,
                -(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       21       40        0
    //  no simd       24       52        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[e45] * other[e235]) - (self[e25] * other[e435]),
                (self[e15] * other[e435]) + (self[e25] * other[e12345]) + (self[e45] * other[e315]) - (self[e35] * other[e415]),
                (self[e25] * other[e415]) + (self[e35] * other[e12345]) + (self[e45] * other[e125]) - (self[e15] * other[e425]),
                self[e45] * other[e12345] * -1.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e45] * other[e415] * -1.0,
                self[e45] * other[e425] * -1.0,
                self[e45] * other[e435] * -1.0,
                (self[e45] * other[e5]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      162        0
    //    simd2        6        6        0
    //    simd3       13       20        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      137      197        0
    //  no simd      193      270        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0])
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) - (self[e15] * other[e4]) - (self[e35] * other[e431]) - (self[e45] * other[e415]),
                (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e25] * other[e4]) - (self[e45] * other[e425]),
                (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e35] * other[e4]) - (self[e45] * other[e435]),
                self[e45] * other[e4] * -1.0,
            ]),
            // e5
            (self[e45] * other[e5])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * Simd32x3::from([other[e41], other[e42], other[e43]]) * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) - (self[e25] * other[e412]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) - (self[e35] * other[e423]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * Simd32x3::from([other[e423], other[e431], other[e412]]) * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            self[e45] * other[e1234] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       33        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       18       37        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e45] * other[e4235], self[e45] * other[e4315], self[e45] * other[e4125], 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       68        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       41       73        0
    //  no simd       53       88        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) - (self[e45] * other[e1]),
                (self[e25] * other[e4]) - (self[e45] * other[e2]),
                (self[e35] * other[e4]) - (self[e45] * other[e3]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) - (self[e15] * other[e2]),
                self[e45] * other[e4] * -1.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e15] * other[e4] * -1.0,
                self[e25] * other[e4] * -1.0,
                self[e35] * other[e4] * -1.0,
                (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       15        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       81        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       53       82        0
    //  no simd       53       85        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e45] * other[e4235]),
                (self[e25] * other[e1234]) + (self[e45] * other[e4315]),
                (self[e35] * other[e1234]) + (self[e45] * other[e4125]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                self[e45] * other[e1234] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       92        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       69      103        0
    //  no simd       96      136        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e45] * other[e423] * -1.0,
                self[e45] * other[e431] * -1.0,
                self[e45] * other[e412] * -1.0,
                -(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) - (self[e25] * other[e412]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) - (self[e35] * other[e423]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) - (self[e25] * other[e435]) - (self[e25] * other[e3]),
                (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]) - (self[e35] * other[e415]) - (self[e35] * other[e1]),
                (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]) - (self[e15] * other[e425]) - (self[e15] * other[e2]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) - (self[e15] * other[e4]) - (self[e35] * other[e431]) - (self[e45] * other[e415]),
                (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e25] * other[e4]) - (self[e45] * other[e425]),
                (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e35] * other[e4]) - (self[e45] * other[e435]),
                self[e45] * other[e4] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      120        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       87      124        0
    //  no simd       96      136        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e45] * other[e41] * -1.0,
                self[e45] * other[e42] * -1.0,
                self[e45] * other[e43] * -1.0,
                (self[e45] * other[e45]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235]) + (self[e45] * other[e25])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar]) + (self[e45] * other[e35])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                self[e45] * other[e1234] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Flector {
    type Output = sandwich_partial<Flector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      196        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      169      202        0
    //  no simd      184      220        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]),
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]) - (other[e43] * self[e25]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]) - (other[e42] * self[e15]),
                (other[scalar] * self[e45])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      165      198        0
    //  no simd      216      252        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e4] * self[e15]) + (other[e3] * self[e4315])
                    - (other[e412] * self[e25])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e4] * self[e25]) + (other[e1] * self[e4125])
                    - (other[e423] * self[e35])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e4] * self[e35]) + (other[e2] * self[e4235])
                    - (other[e431] * self[e15])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e4] * self[e15]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e4] * self[e25]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e4] * self[e35]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      128        0
    //    simd4        4        8        0
    // Totals...
    // yes simd      104      136        0
    //  no simd      116      160        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e1234] * self[e15],
                other[e1234] * self[e25],
                other[e1234] * self[e35],
                (other[e1234] * self[e3215]) + (other[scalar] * self[e45]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], other[e1234] * self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e4235]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e4315]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e4125]),
                other[scalar] * self[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       43       58        0
    //  no simd       52       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e321]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e315] * self[e45]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e125] * self[e45]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       65       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       59       76        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       62       79        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       51       68        0
    //  no simd       60       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      131      164        0
    //  no simd      176      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) - (other[e412] * self[e25]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) - (other[e423] * self[e35]) - (other[e321] * self[e4315]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) - (other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      136      169        0
    //  no simd      184      220        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) - (other[e412] * self[e25]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) - (other[e423] * self[e35]) - (other[e321] * self[e4315]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) - (other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      192        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      164      197        0
    //  no simd      176      212        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]),
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]) - (other[e43] * self[e25]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      224        0
    //    simd4        6        7        0
    // Totals...
    // yes simd      198      231        0
    //  no simd      216      252        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]) - (other[e1234] * self[e4125]),
                (other[e45] * self[e45]) + (other[e1234] * self[e3215])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25]) + (other[e45] * self[e4125]) + (other[e1234] * self[e35]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45])
                    - (other[e42] * self[e15])
                    - (other[e4315] * self[e4235]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e31] * self[e4125]) + (other[e1234] * self[e15])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e12] * self[e4235]) + (other[e1234] * self[e25])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e1234] * self[e35])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       89        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       77      106        0
    //  no simd      116      157        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e4] * self[e15],
                other[e4] * self[e25],
                other[e4] * self[e35],
                -(other[e4] * self[e3215]) - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e4] * self[e15]) - (other[e12345] * self[e4235]),
                -(other[e4] * self[e25]) - (other[e12345] * self[e4315]),
                -(other[e4] * self[e35]) - (other[e12345] * self[e4125]),
                other[e4] * self[e45] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       43       57        0
    //  no simd       52       72        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       65       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e4315]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       59       76        0
    //  no simd       68       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e35] * other[e425]) + (self[e45] * other[e235]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435]) + (self[e45] * other[e315]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415]) + (self[e45] * other[e125]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e45] * other[e415]) - (self[e4125] * other[e425]),
                (self[e4125] * other[e415]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]),
                (self[e4235] * other[e425]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]),
                -(self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       71       88        0
    //  no simd       80      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[e45] * other[e235])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435])
                    + (self[e25] * other[e12345])
                    + (self[e45] * other[e315])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415])
                    + (self[e35] * other[e12345])
                    + (self[e45] * other[e125])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e45] * other[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e45] * other[e415]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]),
                (self[e4125] * other[e415]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]),
                (self[e4235] * other[e425]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]),
                (self[e45] * other[e5]) + (self[e3215] * other[e12345])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      344        0
    //    simd2        8        8        0
    //    simd3       32       32        0
    //    simd4       14       15        0
    // Totals...
    // yes simd      334      399        0
    //  no simd      448      516        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e4315] * other[e43]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e4235] * other[e43]),
                (self[e4235] * other[e42]) - (self[e4315] * other[e41]),
            ]) - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) + (self[e4125] * other[e4315]) - (self[e25] * other[e43]) - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e4235] * other[e4125]) - (self[e35] * other[e41]) - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e4315] * other[e4235]) - (self[e15] * other[e42]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e4315] * other[e3]) + (self[e3215] * other[e423])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e4125] * other[e1]) + (self[e3215] * other[e431])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e4235] * other[e2]) + (self[e3215] * other[e412])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e3215] * other[e4]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e4315] * other[e412]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]),
            ]) - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) + (self[e35] * other[e425]) + (self[e4125] * other[e315])
                    - (self[e25] * other[e3])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e3]) + (self[e15] * other[e435]) + (self[e4235] * other[e125])
                    - (self[e35] * other[e1])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e1]) + (self[e25] * other[e415]) + (self[e4315] * other[e235])
                    - (self[e15] * other[e2])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e12]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e23]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
            // e1234
            (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       51       68        0
    //  no simd       60       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       94      129        0
    //  no simd      136      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4235] * other[e4] * -1.0,
                self[e4315] * other[e4] * -1.0,
                self[e4125] * other[e4] * -1.0,
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]) - (self[e45] * other[e1]) - (self[e4125] * other[e2]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]) - (self[e45] * other[e2]) - (self[e4235] * other[e3]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]) - (self[e45] * other[e3]) - (self[e4315] * other[e1]),
                self[e3215] * other[e4] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       31       42        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      156        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      124      161        0
    //  no simd      136      176        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4235] * other[e1234] * -1.0,
                self[e4315] * other[e1234] * -1.0,
                self[e4125] * other[e1234] * -1.0,
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e25] * other[e1234]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e35] * other[e1234]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                self[e3215] * other[e1234],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                self[e45] * other[e1234] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      167      200        0
    //  no simd      224      260        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e4315] * other[e3]) + (self[e3215] * other[e423])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e4125] * other[e1]) + (self[e3215] * other[e431])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e4235] * other[e2]) + (self[e3215] * other[e412])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e3215] * other[e4]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e4235] * other[e315]),
                -(self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      224        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      200      233        0
    //  no simd      224      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) - (self[e45] * other[e41]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e45] * other[e42]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) - (self[e45] * other[e43]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e45] * other[e45]) + (self[e3215] * other[e1234])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
                -(self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[scalar]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e45] * other[e15])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    + (self[e3215] * other[e23])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e45] * other[e25])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    + (self[e3215] * other[e31])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e45] * other[e35])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    + (self[e3215] * other[e12])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e12]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e23]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Line {
    type Output = sandwich_partial<Line>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      162        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      186        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      154      188        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]) - (other[e4] * self[e415]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]) - (other[e4] * self[e425]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e4] * self[e435]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e4] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e1] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      105        0
    //    simd3        0        3        0
    // Totals...
    // yes simd       77      108        0
    //  no simd       77      114        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1234] * self[e235]) + (other[scalar] * self[e415]),
                (other[e1234] * self[e315]) + (other[scalar] * self[e425]),
                (other[e1234] * self[e125]) + (other[scalar] * self[e435]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234] * self[e235] * -1.0, other[e1234] * self[e315] * -1.0, other[e1234] * self[e125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       51        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) - (other[e235] * self[e425]) - (other[e321] * self[e125]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e321] * self[e415],
                other[e321] * self[e425],
                other[e321] * self[e435],
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e321] * self[e425]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e321] * self[e435]) + (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       47       65        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       57        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       41       63        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        6        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       19       45        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]) * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e235], self[e315], self[e125]]) * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      124      158        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) - (other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) - (other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) - (other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      162        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      124      158        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e45] * self[e235]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e45] * self[e315]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e45] * self[e125]) - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      174        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      145      179        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e1234] * self[e435]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e1234] * self[e235]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e1234] * self[e315]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e1234] * self[e125]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435]) - (other[e25] * self[e415]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e1234] * self[e235])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e1234] * self[e315])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      108        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       77      112        0
    //  no simd       77      120        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e12345] * self[e415]),
                -(other[e4] * self[e315]) - (other[e12345] * self[e425]),
                -(other[e4] * self[e125]) - (other[e12345] * self[e435]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e12345] * self[e235] * -1.0, other[e12345] * self[e315] * -1.0, other[e12345] * self[e125] * -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4] * self[e235] * -1.0, other[e4] * self[e315] * -1.0, other[e4] * self[e125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       54        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       36       56        0
    //  no simd       36       60        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e25] * self[e435]) - (other[e35] * self[e425]) - (other[e45] * self[e235]),
                (other[e35] * self[e415]) - (other[e15] * self[e435]) - (other[e45] * self[e315]),
                (other[e15] * self[e425]) - (other[e25] * self[e415]) - (other[e45] * self[e125]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e45] * self[e415] * -1.0,
                other[e45] * self[e425] * -1.0,
                other[e45] * self[e435] * -1.0,
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425])
                    - (other[e45] * self[e235])
                    - (other[e4315] * self[e125]),
                (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435])
                    - (other[e45] * self[e315])
                    - (other[e4125] * self[e235]),
                (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415])
                    - (other[e45] * self[e125])
                    - (other[e4235] * self[e315]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e45] * self[e415]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e45] * self[e425]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e45] * self[e435]) - (other[e4235] * self[e425]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       47       65        0
    //  no simd       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e425] * self[e435]),
                (other[e415] * self[e435]) - (other[e435] * self[e415]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) - (other[e425] * self[e125]) - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) - (other[e435] * self[e235]) - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) - (other[e415] * self[e315]) - (other[e235] * self[e425]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       56       74        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e415] * other[e12345]) - (self[e435] * other[e425]),
                (self[e435] * other[e415]) - (self[e415] * other[e435]) - (self[e425] * other[e12345]),
                (self[e415] * other[e425]) - (self[e425] * other[e415]) - (self[e435] * other[e12345]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      254      318        0
    //    simd3       18       20        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      275      341        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412]) - (self[e435] * other[e425]) - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423]) - (self[e415] * other[e435]) - (self[e235] * other[e412]),
                (self[e415] * other[e425]) + (self[e235] * other[e431]) - (self[e425] * other[e415]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       57        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       41       63        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      120        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       90      124        0
    //  no simd       90      132        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e415], self[e425], self[e435]]),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      117        0
    //    simd3        0        3        0
    // Totals...
    // yes simd       90      120        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      192        0
    //    simd3        0        2        0
    // Totals...
    // yes simd      160      194        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) - (self[e415] * other[e4]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]) - (self[e425] * other[e4]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]) - (self[e435] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      142      176        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) + (self[e425] * other[e1234]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) + (self[e435] * other[e1234]) - (self[e415] * other[e42]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Motor {
    type Output = sandwich_partial<Motor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      163      201        0
    //  no simd      184      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[scalar] * self[e415])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[scalar] * self[e425])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[scalar] * self[e435])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) - (other[e45] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e41] * self[e5]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e42] * self[e5]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e43] * self[e5]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      210        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      183      221        0
    //  no simd      216      254        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e423] * self[e12345]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e431] * self[e12345]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e4] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e423] * self[e315])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      131        0
    //    simd4        4        7        0
    // Totals...
    // yes simd      104      138        0
    //  no simd      116      159        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1234] * self[e415],
                other[e1234] * self[e425],
                other[e1234] * self[e435],
                (other[e1234] * self[e5]) + (other[scalar] * self[e12345]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1234] * self[e235]) + (other[scalar] * self[e415]),
                (other[e1234] * self[e315]) + (other[scalar] * self[e425]),
                (other[e1234] * self[e125]) + (other[scalar] * self[e435]),
                other[e1234] * self[e5] * -1.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e12345]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       52       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e321] * self[e125]),
                other[e321] * self[e12345],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e321] * self[e415],
                other[e321] * self[e425],
                other[e321] * self[e435],
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e321] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80      102        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e12345]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       60       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       42        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       40       70        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      152      190        0
    //  no simd      176      214        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e423] * self[e12345]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e431] * self[e12345]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      157      195        0
    //  no simd      184      222        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      161      199        0
    //  no simd      176      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) - (other[e45] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e41] * self[e5]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e42] * self[e5]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e43] * self[e5]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      214        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      186      224        0
    //  no simd      216      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e1234] * self[e235])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e1234] * self[e315])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e1234] * self[e125])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e45] * self[e12345])
                    - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e45] * self[e435])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345]) - (other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      130        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       95      139        0
    //  no simd      116      166        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4] * self[e415] * -1.0,
                other[e4] * self[e425] * -1.0,
                other[e4] * self[e435] * -1.0,
                -(other[e4] * self[e5]) - (other[e12345] * self[e12345]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e12345] * self[e415]),
                -(other[e4] * self[e315]) - (other[e12345] * self[e425]),
                -(other[e4] * self[e125]) - (other[e12345] * self[e435]),
                other[e4] * self[e5] * -1.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e12345] * self[e235], other[e12345] * self[e315], other[e12345] * self[e125], other[e4] * self[e12345]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4] * self[e235], other[e4] * self[e315], other[e4] * self[e125], other[e12345] * self[e5]]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       70        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       46       72        0
    //  no simd       52       78        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e15] * self[e12345]) + (other[e25] * self[e435]) - (other[e35] * self[e425]) - (other[e45] * self[e235]),
                (other[e25] * self[e12345]) + (other[e35] * self[e415]) - (other[e15] * self[e435]) - (other[e45] * self[e315]),
                (other[e15] * self[e425]) + (other[e35] * self[e12345]) - (other[e25] * self[e415]) - (other[e45] * self[e125]),
                other[e45] * self[e12345] * -1.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e45] * self[e415] * -1.0,
                other[e45] * self[e425] * -1.0,
                other[e45] * self[e435] * -1.0,
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e45] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       86        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       68       90        0
    //  no simd       80      102        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425])
                    - (other[e4235] * self[e5])
                    - (other[e4315] * self[e125]),
                (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435])
                    - (other[e4315] * self[e5])
                    - (other[e4125] * self[e235]),
                (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415])
                    - (other[e4235] * self[e315])
                    - (other[e4125] * self[e5]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e12345]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]) + (other[e3215] * self[e12345])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]),
                (other[e415] * self[e435]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                (other[e415] * self[e435]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e12345] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e5] * self[e435]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      312      382        0
    //    simd3       32       32        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      354      424        0
    //  no simd      448      518        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345])
                    - (self[e5] * other[e4]),
                (self[e12345] * other[scalar]) + (self[e5] * other[e1234])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43]),
                (self[e12345] * other[e1234]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e12345] * other[e235])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e12345] * other[e315])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e12345] * other[e125])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412]) - (self[e435] * other[e425]) - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423]) - (self[e415] * other[e435]) - (self[e235] * other[e412]),
                (self[e415] * other[e425]) + (self[e235] * other[e431]) - (self[e425] * other[e415]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar])
                    + (self[e435] * other[e31])
                    + (self[e12345] * other[e23])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12])
                    + (self[e425] * other[scalar])
                    + (self[e12345] * other[e31])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23])
                    + (self[e435] * other[scalar])
                    + (self[e12345] * other[e12])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e12345] * other[e45])
                    - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e12345] * other[e1]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e12345] * other[e2]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5])
                    - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]) - (self[e12345] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       54       76        0
    //  no simd       60       82        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4        7        9        0
    // Totals...
    // yes simd      115      155        0
    //  no simd      136      182        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e5] * other[e4]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                self[e12345] * other[e4] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) + (self[e12345] * other[e1]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) + (self[e12345] * other[e2]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e12345] * other[e3]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      150        0
    //    simd4        5        6        0
    // Totals...
    // yes simd      121      156        0
    //  no simd      136      174        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e12345] * other[e4315]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e12345] * other[e4125]) - (self[e125] * other[e1234]),
                self[e12345] * other[e1234],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      214        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      188      226        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e12345] * other[e415])
                    - (self[e125] * other[e431])
                    - (self[e5] * other[e423]),
                (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e12345] * other[e425])
                    - (self[e235] * other[e412])
                    - (self[e5] * other[e431]),
                (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e12345] * other[e435])
                    - (self[e315] * other[e423])
                    - (self[e5] * other[e412]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e12345] * other[e1]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e12345] * other[e2]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5])
                    - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      202        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      179      217        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar])
                    + (self[e435] * other[e31])
                    + (self[e12345] * other[e23])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12])
                    + (self[e425] * other[scalar])
                    + (self[e12345] * other[e31])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23])
                    + (self[e435] * other[scalar])
                    + (self[e12345] * other[e12])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e12345] * other[e45])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43]),
                (self[e12345] * other[e1234]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for MultiVector {
    type Output = sandwich_partial<MultiVector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      792      857        0
    //    simd2       26       26        0
    //    simd3      108      112        0
    //    simd4       36       38        0
    // Totals...
    // yes simd      962     1033        0
    //  no simd     1312     1397        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0]) + (Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[scalar] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) - (other[e43] * self[e2]) - (other[e43] * self[e425]) - (other[e12] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) - (other[e41] * self[e3]) - (other[e41] * self[e435]) - (other[e23] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) - (other[e42] * self[e1]) - (other[e42] * self[e415]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      892      956        0
    //    simd2       20       20        0
    //    simd3      116      120        0
    //    simd4       40       42        0
    // Totals...
    // yes simd     1068     1138        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4]),
                (other[e4] * self[e3215]) + (other[e5] * self[e1234])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e3]) + (other[e423] * self[e435])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e1]) + (other[e431] * self[e415])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431])
                    - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e2] * self[e3]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e3] * self[e1]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431])
                    - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) + (other[e3] * self[e42]),
                (other[e435] * self[e41]) + (other[e1] * self[e43]),
                (other[e415] * self[e42]) + (other[e2] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e2] * self[e35])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e3] * self[e15])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      611      665        0
    //    simd2       17       18        0
    //    simd3       85       93        0
    //    simd4       31       33        0
    // Totals...
    // yes simd      744      809        0
    //  no simd     1024     1112        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]])) + (Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1234] * self[e235]) * -1.0,
                (other[e1234] * self[e315]) * -1.0,
                (other[e1234] * self[e125]) * -1.0,
                (other[e1234] * self[e12345]) + (other[e1234] * self[e321]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
            // e5
            other[scalar] * self[e5],
            // e15, e25, e35, e45
            Simd32x4::from([
                other[scalar] * self[e15],
                other[scalar] * self[e25],
                other[scalar] * self[e35],
                (other[e1234] * self[e3215]) + (other[scalar] * self[e45]),
            ]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234] * self[e235], other[e1234] * self[e315], other[e1234] * self[e125], (other[e1234] * self[e5]) * -1.0])
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e4235]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e4315]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e4125]),
                other[scalar] * self[e3215],
            ]),
            // e1234
            (other[e1234] * self[scalar]) + (other[scalar] * self[e1234]) - (other[e1234] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      671      730        0
    //    simd2       17       17        0
    //    simd3       85       92        0
    //    simd4       32       34        0
    // Totals...
    // yes simd      805      873        0
    //  no simd     1088     1176        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e321] * self[e23]) - (other[e125] * self[e42]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e321] * self[e31]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e321] * self[e12]) - (other[e315] * self[e41]),
                other[e321] * self[e1234] * -1.0,
            ]),
            // e5
            (other[e321] * self[e3215])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e321] * self[e315]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e321] * self[e125]),
                other[e321] * self[e12345],
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from(other[e321]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e23, e31, e12
            Simd32x3::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                (other[e321] * self[scalar]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from(other[e321]) * Simd32x3::from([self[e41], self[e42], self[e43]]) * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) - (other[e125] * self[e31]) - (other[e125] * self[e4315]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) - (other[e235] * self[e12]) - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) - (other[e315] * self[e23]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5]),
            ]),
            // e1234
            other[e321] * self[e4],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      754      818        0
    //    simd2       20       20        0
    //    simd3       94       98        0
    //    simd4       35       37        0
    // Totals...
    // yes simd      903      973        0
    //  no simd     1216     1300        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e5] * self[e4]),
                (other[e5] * self[e1234]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e321] * self[e23])
                    + (other[e1] * self[scalar])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e321] * self[e31])
                    + (other[e2] * self[scalar])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e321] * self[e12])
                    + (other[e1] * self[e31])
                    + (other[e3] * self[scalar])
                    + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e12345]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e125] * self[e431]) + (other[e3] * self[e2]) - (other[e315] * self[e412]) - (other[e2] * self[e3]),
                (other[e235] * self[e412]) + (other[e1] * self[e3]) - (other[e125] * self[e423]) - (other[e3] * self[e1]),
                (other[e315] * self[e423]) + (other[e2] * self[e1]) - (other[e235] * self[e431]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e321] * self[scalar])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e2] * self[e35])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e3] * self[e15])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      721      783        0
    //    simd2       21       22        0
    //    simd3       91       95        0
    //    simd4       29       31        0
    // Totals...
    // yes simd      862      931        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e12] * self[e2]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e23] * self[e3]) - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e31] * self[e1]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
            // e1234
            -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      736      798        0
    //    simd2       23       24        0
    //    simd3       98      102        0
    //    simd4       35       37        0
    // Totals...
    // yes simd      892      961        0
    //  no simd     1216     1300        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]])) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e2])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e3])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e1])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[scalar] * self[e1234]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      661      726        0
    //    simd2       19       19        0
    //    simd3       87       91        0
    //    simd4       32       34        0
    // Totals...
    // yes simd      799      870        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e5] * self[e4]) * -1.0, other[e5] * self[e1234]])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]) - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      604      639        0
    //    simd2       16       18        0
    //    simd3       80       90        0
    //    simd4       29       39        0
    // Totals...
    // yes simd      729      786        0
    //  no simd      992     1101        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * Simd32x2::from([self[e12345], self[scalar]]) * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]) * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]) * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      810      874        0
    //    simd2       17       17        0
    //    simd3      100      104        0
    //    simd4       34       36        0
    // Totals...
    // yes simd      961     1031        0
    //  no simd     1280     1364        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
            // e5
            (other[e321] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e435] * self[e431])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e415] * self[e412])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e425] * self[e423])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      822      886        0
    //    simd2       17       17        0
    //    simd3      104      108        0
    //    simd4       36       38        0
    // Totals...
    // yes simd      979     1049        0
    //  no simd     1312     1396        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345]),
                (other[e12345] * self[scalar])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e5
            (other[e321] * self[e3215]) + (other[e12345] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e435] * self[e431])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e415] * self[e412])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e425] * self[e423])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e12345] * self[e1])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e12345] * self[e2])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e12345] * self[e3])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      790      855        0
    //    simd2       25       25        0
    //    simd3      104      108        0
    //    simd4       32       34        0
    // Totals...
    // yes simd      951     1022        0
    //  no simd     1280     1365        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0])
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) - (other[e43] * self[e2]) - (other[e43] * self[e425]) - (other[e12] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) - (other[e41] * self[e3]) - (other[e41] * self[e435]) - (other[e23] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) - (other[e42] * self[e1]) - (other[e42] * self[e415]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      872      936        0
    //    simd2       27       27        0
    //    simd3      118      122        0
    //    simd4       40       42        0
    // Totals...
    // yes simd     1057     1127        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215]),
                (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215]),
                (other[e23] * self[e25])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e4315] * self[e43]) - (other[e12] * self[e42]) - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e4125] * self[e41]) - (other[e23] * self[e43]) - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e4235] * self[e42]) - (other[e31] * self[e41]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) + (other[e4315] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) + (other[e4125] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e4235] * self[e4315])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e25] * self[e412])
                    + (other[e1234] * self[e235])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e35] * self[e423])
                    + (other[e1234] * self[e315])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e15] * self[e431])
                    + (other[e1234] * self[e125])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e2])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e3])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e1])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) + (other[e4125] * self[e315]),
                (other[e12] * self[e235]) + (other[e4235] * self[e125]),
                (other[e23] * self[e315]) + (other[e4315] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e1234] * self[e45])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      617      676        0
    //    simd2       16       16        0
    //    simd3       85       93        0
    //    simd4       30       32        0
    // Totals...
    // yes simd      748      817        0
    //  no simd     1024     1115        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e4] * self[e5]) - (other[e12345] * self[e12345]), (other[e4] * self[e3215]) + (other[e12345] * self[scalar])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e12345] * self[e4235]) * -1.0,
                (other[e12345] * self[e4315]) * -1.0,
                (other[e12345] * self[e4125]) * -1.0,
                (other[e4] * self[scalar]) + (other[e12345] * self[e1234]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            other[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from([
                other[e12345] * self[e235] * -1.0,
                other[e12345] * self[e315] * -1.0,
                other[e12345] * self[e125] * -1.0,
                (other[e12345] * self[e321]) - (other[e4] * self[e5]),
            ]),
            // e41, e42, e43
            -(Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e23, e31, e12
            -(Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4] * self[e15]) + (other[e12345] * self[e23]),
                (other[e4] * self[e25]) + (other[e12345] * self[e31]),
                (other[e4] * self[e35]) + (other[e12345] * self[e12]),
                -(other[e4] * self[e3215]) - (other[e12345] * self[e45]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]])) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) - (other[e4] * self[e235]),
                (other[e12345] * self[e2]) - (other[e4] * self[e315]),
                (other[e12345] * self[e3]) - (other[e4] * self[e125]),
                other[e12345] * self[e5] * -1.0,
            ]),
            // e1234
            -(other[e4] * self[e12345]) - (other[e4] * self[e321]) - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      662      718        0
    //    simd2       19       19        0
    //    simd3       88       95        0
    //    simd4       31       33        0
    // Totals...
    // yes simd      800      865        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0])
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]) - (other[e45] * self[e415]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]) - (other[e45] * self[e425]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]) - (other[e45] * self[e435]),
                other[e45] * self[e4],
            ]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]) - (other[e35] * self[e31]) - (other[e35] * self[e4315]) - (other[e45] * self[e15]),
                (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]) - (other[e15] * self[e12]) - (other[e15] * self[e4125]) - (other[e45] * self[e25]),
                (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) - (other[e25] * self[e23]) - (other[e25] * self[e4235]) - (other[e45] * self[e35]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e41, e42, e43
            Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) - (other[e35] * self[e42]),
                (other[e35] * self[e41]) - (other[e15] * self[e43]),
                (other[e15] * self[e42]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e235, e315, e125
            (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) - (other[e15] * self[e1234]) - (other[e25] * self[e43]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) - (other[e25] * self[e1234]) - (other[e35] * self[e41]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) - (other[e15] * self[e42]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]),
            // e1234
            other[e45] * self[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      746      810        0
    //    simd2       20       20        0
    //    simd3       98      102        0
    //    simd4       34       36        0
    // Totals...
    // yes simd      898      968        0
    //  no simd     1216     1300        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e45] * self[e15])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e45] * self[e25])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e45] * self[e35])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) + (other[e4315] * self[e4125]) - (other[e35] * self[e42]) - (other[e4125] * self[e4315]),
                (other[e35] * self[e41]) + (other[e4125] * self[e4235]) - (other[e15] * self[e43]) - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e4235] * self[e4315]) - (other[e25] * self[e41]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e2]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423]) + (other[e4235] * self[e3]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431]) + (other[e4315] * self[e1]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e4125] * self[e315]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4315] * self[e12])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) + (other[e4125] * self[e23])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) + (other[e4235] * self[e31])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e1234
            (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      731      795        0
    //    simd2       16       16        0
    //    simd3       87       91        0
    //    simd4       32       34        0
    // Totals...
    // yes simd      866      936        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]),
            // e5
            -(other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
            ]) - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]) - (other[e425] * self[e435]) - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]) - (other[e435] * self[e415]) - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]) - (other[e415] * self[e425]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e315] * self[e412])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e125] * self[e423])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e235] * self[e431]) + (other[e125] * self[e4])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      754      818        0
    //    simd2       16       16        0
    //    simd3       94       98        0
    //    simd4       37       39        0
    // Totals...
    // yes simd      901      971        0
    //  no simd     1216     1300        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e5] * self[e4]),
                (other[e12345] * self[scalar]) + (other[e5] * self[e1234])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e12345] * self[e125])
                    - (other[e5] * self[e435]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]) - (other[e425] * self[e435]) - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]) - (other[e435] * self[e415]) - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]) - (other[e415] * self[e425]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e12345] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e12345] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e12345] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e5] * self[e423])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e5] * self[e431])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e5] * self[e412])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1208     1272        0
    //    simd2       32       32        0
    //    simd3      160      164        0
    //    simd4       58       60        0
    // Totals...
    // yes simd     1458     1528        0
    //  no simd     1984     2068        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
                (other[e12345] * self[scalar])
                    + (other[e4235] * self[e1])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]]))
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    + (other[e25] * self[e412])
                    + (other[e43] * self[e315])
                    + (other[e31] * self[e3])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e412] * self[e25])
                    + (other[e315] * self[e43])
                    + (other[e4125] * self[e425])
                    + (other[e3215] * self[e423])
                    - (other[e12345] * self[e4235])
                    - (other[e3] * self[e31])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435])
                    - (other[e1234] * self[e235]),
                (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    + (other[e35] * self[e423])
                    + (other[e41] * self[e125])
                    + (other[e12] * self[e1])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e423] * self[e35])
                    + (other[e125] * self[e41])
                    + (other[e4235] * self[e435])
                    + (other[e3215] * self[e431])
                    - (other[e12345] * self[e4315])
                    - (other[e1] * self[e12])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415])
                    - (other[e1234] * self[e315]),
                (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    + (other[e15] * self[e431])
                    + (other[e42] * self[e235])
                    + (other[e23] * self[e2])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e431] * self[e15])
                    + (other[e235] * self[e42])
                    + (other[e4315] * self[e415])
                    + (other[e3215] * self[e412])
                    - (other[e12345] * self[e4125])
                    - (other[e2] * self[e23])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e315] * self[e41])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345])
                    - (other[e1234] * self[e125]),
                (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    + (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1234] * self[e12345])
                    - (other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (other[scalar] * self[e5])
                + (other[e12345] * self[e3215])
                + (other[e5] * self[scalar])
                + (other[e5] * self[e45])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e321] * self[e3215])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e31] * self[e35])
                    + (other[e435] * self[e315])
                    + (other[e315] * self[e3])
                    + (other[e125] * self[e425])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12345] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e4235] * self[e3215]),
                (other[e1] * self[e125])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e12] * self[e15])
                    + (other[e415] * self[e125])
                    + (other[e235] * self[e435])
                    + (other[e125] * self[e1])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e12345] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e4315] * self[e3215]),
                (other[e2] * self[e235])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e23] * self[e25])
                    + (other[e425] * self[e235])
                    + (other[e235] * self[e2])
                    + (other[e315] * self[e415])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e12345] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e321] * self[e12345])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e4315] * self[e43])
                    - (other[e3] * self[e431])
                    - (other[e12] * self[e42])
                    - (other[e425] * self[e412])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e4125] * self[e41])
                    - (other[e1] * self[e412])
                    - (other[e23] * self[e43])
                    - (other[e435] * self[e423])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e4235] * self[e42])
                    - (other[e2] * self[e423])
                    - (other[e31] * self[e41])
                    - (other[e415] * self[e431])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2])
                    + (other[e25] * self[e43])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e435] * self[e425])
                    + (other[e412] * self[e315])
                    + (other[e125] * self[e431])
                    + (other[e4315] * self[e4125])
                    - (other[e2] * self[e3])
                    - (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e425] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e315] * self[e412])
                    - (other[e4125] * self[e4315]),
                (other[e1] * self[e3])
                    + (other[e35] * self[e41])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e415] * self[e435])
                    + (other[e423] * self[e125])
                    + (other[e235] * self[e412])
                    + (other[e4125] * self[e4235])
                    - (other[e3] * self[e1])
                    - (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e435] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e125] * self[e423])
                    - (other[e4235] * self[e4125]),
                (other[e2] * self[e1])
                    + (other[e15] * self[e42])
                    + (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e425] * self[e415])
                    + (other[e431] * self[e235])
                    + (other[e315] * self[e423])
                    + (other[e4235] * self[e4315])
                    - (other[e1] * self[e2])
                    - (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e415] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e235] * self[e431])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e12345] * self[e23])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    + (other[e25] * self[e412])
                    + (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e425] * self[e12])
                    + (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    + (other[e1234] * self[e235])
                    - (other[e2] * self[e4125])
                    - (other[e35] * self[e431])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e412] * self[e25])
                    - (other[e125] * self[e42])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e12345] * self[e31])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    + (other[e35] * self[e423])
                    + (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e435] * self[e23])
                    + (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    + (other[e1234] * self[e315])
                    - (other[e3] * self[e4235])
                    - (other[e15] * self[e412])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e423] * self[e35])
                    - (other[e235] * self[e43])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e12345] * self[e12])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    + (other[e15] * self[e431])
                    + (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e415] * self[e31])
                    + (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    + (other[e1234] * self[e125])
                    - (other[e1] * self[e4315])
                    - (other[e25] * self[e423])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e431] * self[e15])
                    - (other[e315] * self[e41])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    + (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) + (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e425] * self[e43]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e2])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e1] * self[e43]) + (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e435] * self[e41]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e3])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e2] * self[e41]) + (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) + (other[e415] * self[e42]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e1])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35])
                    + (other[e31] * self[e125])
                    + (other[e425] * self[e35])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e4125] * self[e315])
                    - (other[e3] * self[e25])
                    - (other[e12] * self[e315])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e4315] * self[e125]),
                (other[e3] * self[e15])
                    + (other[e12] * self[e235])
                    + (other[e435] * self[e15])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e4235] * self[e125])
                    - (other[e1] * self[e35])
                    - (other[e23] * self[e125])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e4125] * self[e235]),
                (other[e1] * self[e25])
                    + (other[e23] * self[e315])
                    + (other[e415] * self[e25])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e4315] * self[e235])
                    - (other[e2] * self[e15])
                    - (other[e31] * self[e235])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e35] * self[e42])
                    + (other[e45] * self[e23])
                    + (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e412] * self[e315])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e4315] * self[e12])
                    + (other[e1234] * self[e15])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e435] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e12345] * self[e2])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e15] * self[e43])
                    + (other[e45] * self[e31])
                    + (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e423] * self[e125])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e4125] * self[e23])
                    + (other[e1234] * self[e25])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e415] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e12345] * self[e3])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e25] * self[e41])
                    + (other[e45] * self[e12])
                    + (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e431] * self[e235])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e4235] * self[e31])
                    + (other[e1234] * self[e35])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e425] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    + (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e4235] * self[e15])
                    + (other[e4315] * self[e25])
                    + (other[e4125] * self[e35])
                    - (other[e5] * self[e12345])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e1234] * self[scalar])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      669      733        0
    //    simd2       17       17        0
    //    simd3       87       91        0
    //    simd4       31       33        0
    // Totals...
    // yes simd      804      874        0
    //  no simd     1088     1172        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]) - (self[e12345] * other[e4235]) - (self[e435] * other[e4315]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]) - (self[e12345] * other[e4315]) - (self[e415] * other[e4125]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]) - (self[e12345] * other[e4125]) - (self[e425] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
            ]) + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e1234
            -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      666      730        0
    //    simd2       19       19        0
    //    simd3       92       96        0
    //    simd4       35       37        0
    // Totals...
    // yes simd      812      882        0
    //  no simd     1120     1204        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e4] * other[e5]) - (self[e5] * other[e4]), (self[e3215] * other[e4]) + (self[e1234] * other[e5])])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e42] * other[e5]) + (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e43] * other[e5]) + (self[e31] * other[e1]) - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]) - (self[e45] * other[e1]) - (self[e4125] * other[e2]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]) - (self[e45] * other[e2]) - (self[e4235] * other[e3]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]) - (self[e45] * other[e3]) - (self[e4315] * other[e1]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) - (self[e15] * other[e2]),
            ]) + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12345] * other[e1]) + (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e12345] * other[e2]) + (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e12345] * other[e3]) + (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            -(self[e12345] * other[e4]) - (self[e321] * other[e4]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      604      638        0
    //    simd2       16       17        0
    //    simd3       80       88        0
    //    simd4       29       35        0
    // Totals...
    // yes simd      729      778        0
    //  no simd      992     1076        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]),
            // e5
            self[e5] * other[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]),
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
            // e1234
            self[e1234] * other[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      684      748        0
    //    simd2       18       18        0
    //    simd3       92       96        0
    //    simd4       31       33        0
    // Totals...
    // yes simd      825      895        0
    //  no simd     1120     1204        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]) - (self[e12345] * other[e4235]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]) - (self[e12345] * other[e4315]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]) - (self[e12345] * other[e4125]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e12345] * other[e1234]) + (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e235] * other[e1234]) - (self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                (self[e3] * other[e4235]) + (self[e315] * other[e1234]) - (self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                (self[e1] * other[e4315]) + (self[e125] * other[e1234]) - (self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
            ]) + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e25] * other[e1234]) + (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e35] * other[e1234]) + (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e1234
            (self[scalar] * other[e1234]) - (self[e45] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      900      964        0
    //    simd2       20       20        0
    //    simd3      120      124        0
    //    simd4       43       45        0
    // Totals...
    // yes simd     1083     1153        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345])
                    - (self[e4] * other[e5])
                    - (self[e5] * other[e4]),
                (self[scalar] * other[e12345]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e415])
                - (self[e15] * other[e1])
                - (self[e25] * other[e425])
                - (self[e25] * other[e2])
                - (self[e35] * other[e435])
                - (self[e35] * other[e3])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3] * other[e315]) + (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e5] * other[e1])
                    - (self[e415] * other[e5])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e1] * other[e125]) + (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e5] * other[e2])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e2] * other[e235]) + (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e5] * other[e3])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) + (self[e425] * other[e412]) - (self[e3] * other[e431]) - (self[e435] * other[e431]),
                (self[e3] * other[e423]) + (self[e435] * other[e423]) - (self[e1] * other[e412]) - (self[e415] * other[e412]),
                (self[e1] * other[e431]) + (self[e415] * other[e431]) - (self[e2] * other[e423]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) + (self[e425] * other[e435]) + (self[e431] * other[e125]) + (self[e315] * other[e412])
                    - (self[e3] * other[e2])
                    - (self[e435] * other[e425])
                    - (self[e412] * other[e315])
                    - (self[e125] * other[e431]),
                (self[e3] * other[e1]) + (self[e435] * other[e415]) + (self[e412] * other[e235]) + (self[e125] * other[e423])
                    - (self[e1] * other[e3])
                    - (self[e415] * other[e435])
                    - (self[e423] * other[e125])
                    - (self[e235] * other[e412]),
                (self[e1] * other[e2]) + (self[e415] * other[e425]) + (self[e423] * other[e315]) + (self[e235] * other[e431])
                    - (self[e2] * other[e1])
                    - (self[e425] * other[e415])
                    - (self[e431] * other[e235])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    + (self[e1234] * other[e235])
                    - (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    + (self[e1234] * other[e315])
                    - (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    + (self[e1234] * other[e125])
                    - (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) + (self[e4315] * other[e412]) - (self[e31] * other[e412]) - (self[e4125] * other[e431]),
                (self[e23] * other[e412]) + (self[e4125] * other[e423]) - (self[e12] * other[e423]) - (self[e4235] * other[e412]),
                (self[e31] * other[e423]) + (self[e4235] * other[e431]) - (self[e23] * other[e431]) - (self[e4315] * other[e423]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[e12] * other[e315]) + (self[e4125] * other[e315])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e31] * other[e125])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e23] * other[e125]) + (self[e4235] * other[e125])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e12] * other[e235])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e31] * other[e235]) + (self[e4315] * other[e235])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e23] * other[e315])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12345] * other[e1])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    + (self[e4] * other[e235])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e423] * other[e5])
                    + (self[e412] * other[e315])
                    + (self[e315] * other[e412])
                    - (self[e2] * other[e435])
                    - (self[e425] * other[e3])
                    - (self[e431] * other[e125])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e12345] * other[e2])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    + (self[e4] * other[e315])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e423] * other[e125])
                    + (self[e431] * other[e5])
                    + (self[e125] * other[e423])
                    - (self[e3] * other[e415])
                    - (self[e435] * other[e1])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e12345] * other[e3])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    + (self[e4] * other[e125])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e431] * other[e235])
                    + (self[e412] * other[e5])
                    + (self[e235] * other[e431])
                    - (self[e1] * other[e425])
                    - (self[e415] * other[e2])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                + (self[e4] * other[e321])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                - (self[e12345] * other[e4])
                - (self[e4] * other[e12345])
                - (self[e321] * other[e4])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      886      950        0
    //    simd2       28       28        0
    //    simd3      118      122        0
    //    simd4       44       46        0
    // Totals...
    // yes simd     1076     1146        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(other[scalar]) * Simd32x2::from([self[scalar], self[e12345]]))
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) + (self[e425] * other[e4125]) + (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e315] * other[e43])
                    - (self[e12345] * other[e4235])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e431] * other[e35])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e1] * other[e12]) + (self[e435] * other[e4235]) + (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e125] * other[e41])
                    - (self[e12345] * other[e4315])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e412] * other[e15])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e2] * other[e23]) + (self[e415] * other[e4315]) + (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e235] * other[e42])
                    - (self[e12345] * other[e4125])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e423] * other[e25])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                (self[e12345] * other[e1234])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
            // e5
            (self[e12345] * other[e3215])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                + (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                - (self[e5] * other[e45])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e45] * other[e15])
                    + (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12])
                    + (self[e35] * other[e4235])
                    + (self[e45] * other[e25])
                    + (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e45] * other[e35])
                    + (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12])
                    - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e4125] * other[e42]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e4235] * other[e43]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e4315] * other[e41]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) + (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e4125] * other[e4315])
                    - (self[e25] * other[e43])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e4235] * other[e4125])
                    - (self[e35] * other[e41])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e4315] * other[e4235])
                    - (self[e15] * other[e42])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12345] * other[e23])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    + (self[e435] * other[e31])
                    + (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    - (self[e3] * other[e4315])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e431] * other[e35])
                    - (self[e315] * other[e43]),
                (self[e12345] * other[e31])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    + (self[e415] * other[e12])
                    + (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    - (self[e1] * other[e4125])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e412] * other[e15])
                    - (self[e125] * other[e41]),
                (self[e12345] * other[e12])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    + (self[e425] * other[e23])
                    + (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    - (self[e2] * other[e4235])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e423] * other[e25])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) + (self[e435] * other[e42]) + (self[e412] * other[e31]) + (self[e412] * other[e4315])
                    - (self[e2] * other[e43])
                    - (self[e425] * other[e43])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125]),
                (self[e1] * other[e43]) + (self[e415] * other[e43]) + (self[e423] * other[e12]) + (self[e423] * other[e4125])
                    - (self[e3] * other[e41])
                    - (self[e435] * other[e41])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235]),
                (self[e2] * other[e41]) + (self[e425] * other[e41]) + (self[e431] * other[e23]) + (self[e431] * other[e4235])
                    - (self[e1] * other[e42])
                    - (self[e415] * other[e42])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) + (self[e435] * other[e25]),
                (self[e3] * other[e15]) + (self[e415] * other[e35]),
                (self[e1] * other[e25]) + (self[e425] * other[e15]),
            ]) + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e4315] * other[e12])
                    - (self[e1234] * other[e15]),
                (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e4125] * other[e23])
                    - (self[e1234] * other[e25]),
                (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e4235] * other[e31])
                    - (self[e1234] * other[e35]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
            // e1234
            (self[scalar] * other[e1234])
                + (self[e4235] * other[e41])
                + (self[e4315] * other[e42])
                + (self[e4125] * other[e43])
                + (self[e1234] * other[scalar])
                + (self[e1234] * other[e45])
                - (self[e45] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Plane {
    type Output = sandwich_partial<Plane>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       96        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       67       98        0
    //  no simd       73      104        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      104        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       77      109        0
    //  no simd       92      124        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e412] * self[e3215]) + (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       57        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       42       62        0
    //  no simd       48       77        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, other[e1234] * self[e3215]]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       26       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([other[e321] * self[e4235] * -1.0, other[e321] * self[e4315] * -1.0, other[e321] * self[e4125] * -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       37       53        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       45        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       46        0
    //  no simd       33       49        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       43        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       17        0
    //  no simd        8       23        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       88        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       60       91        0
    //  no simd       69      100        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       64       95        0
    //  no simd       73      104        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e321] * self[e3215]) + (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       96        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       66       97        0
    //  no simd       69      100        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       83      115        0
    //  no simd       92      124        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e1234] * self[e4125]),
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       57        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       36       63        0
    //  no simd       48       81        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, other[e4] * self[e3215] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, other[e12345] * self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e12345] * self[e4235] * -1.0, other[e12345] * self[e4315] * -1.0, other[e12345] * self[e4125] * -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       26       41        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e45] * self[e4235], other[e45] * self[e4315], other[e45] * self[e4125], 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       40       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       45        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       46        0
    //  no simd       33       49        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e415] * self[e4315]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       37       53        0
    //  no simd       40       56        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      194        0
    //    simd2        2        2        0
    //    simd3       14       14        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      150      214        0
    //  no simd      192      256        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                (other[e415] * self[e4125]) - (other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                (other[e425] * self[e4235]) - (other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e423] * self[e3215]) - (other[e2] * self[e4125]) - (other[e321] * self[e4235]),
                (other[e1] * self[e4125]) + (other[e431] * self[e3215]) - (other[e3] * self[e4235]) - (other[e321] * self[e4315]),
                (other[e2] * self[e4235]) + (other[e412] * self[e3215]) - (other[e1] * self[e4315]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       39        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       40        0
    //  no simd       28       43        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e3215] * self[e4235]) - (other[e4235] * self[e3215]),
                (other[e3215] * self[e4315]) - (other[e4315] * self[e3215]),
                (other[e3215] * self[e4125]) - (other[e4125] * self[e3215]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       54        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       38       68        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]) * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) - (self[e4235] * other[e3]),
                (self[e4235] * other[e2]) - (self[e4315] * other[e1]),
                self[e3215] * other[e4] * -1.0,
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                self[e4235] * other[e5],
                self[e4315] * other[e5],
                self[e4125] * other[e5],
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       57        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       60        0
    //  no simd       38       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                self[e3215] * other[e1234],
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e4235] * other[e3215]) - (self[e3215] * other[e4235]),
                (self[e4315] * other[e3215]) - (self[e3215] * other[e4315]),
                (self[e4125] * other[e3215]) - (self[e3215] * other[e4125]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      104        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       78      110        0
    //  no simd       96      128        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]) - (self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]) - (self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]) - (self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) - (self[e4235] * other[e315]),
                -(self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                (self[e4125] * other[e415]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                (self[e4235] * other[e425]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       84      116        0
    //  no simd       96      128        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]) - (self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]) - (self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]) - (self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]) - (self[e4315] * other[e12]),
                (self[e4235] * other[e12]) + (self[e3215] * other[e42]) - (self[e4125] * other[e23]),
                (self[e4315] * other[e23]) + (self[e3215] * other[e43]) - (self[e4235] * other[e31]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for RoundPoint {
    type Output = sandwich_partial<RoundPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd3        1        1        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       82      113        0
    //  no simd       99      130        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                (other[e45] * self[e4]) + (other[scalar] * self[e4]) - (other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      115        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       93      125        0
    //  no simd      123      155        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) + (other[e1] * self[e4]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) + (other[e2] * self[e4]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) + (other[e3] * self[e4]) - (other[e423] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e235] * self[e4]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e315] * self[e4]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e125] * self[e4]) - (other[e1] * self[e2]),
                (other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       71        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       55       76        0
    //  no simd       64       91        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, other[e1234] * self[e5] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, other[scalar] * self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       79        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       56       83        0
    //  no simd       68       95        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e235] * self[e4]) - (other[e321] * self[e1]),
                -(other[e315] * self[e4]) - (other[e321] * self[e2]),
                -(other[e125] * self[e4]) - (other[e321] * self[e3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e315] * self[e1]),
                other[e321] * self[e4],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       96        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       70      102        0
    //  no simd       88      120        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e1] * self[e4],
                other[e2] * self[e4],
                other[e3] * self[e4],
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e235] * self[e4]) - (other[e321] * self[e1]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e315] * self[e4]) - (other[e321] * self[e2]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e125] * self[e4]) - (other[e321] * self[e3]) - (other[e1] * self[e2]),
                other[e5] * self[e4],
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                other[e321] * self[e4],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       90        0
    //    simd3        0        1        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       66       94        0
    //  no simd       75      105        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      100        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       76      105        0
    //  no simd       88      120        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                (other[e3215] * self[e4]) - (other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[scalar] * self[e1]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[scalar] * self[e2]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[scalar] * self[e3]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                other[scalar] * self[e4],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       61        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       41       65        0
    //  no simd       49       75        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                other[e5] * self[e4],
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e5] * self[e1]) - (other[e1] * self[e5]),
                (other[e5] * self[e2]) - (other[e2] * self[e5]),
                (other[e5] * self[e3]) - (other[e3] * self[e5]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       17       35        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      102        0
    //    simd3        1        1        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       77      108        0
    //  no simd       94      125        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e321] * self[e1]) - (other[e235] * self[e4]),
                -(other[e431] * self[e5]) - (other[e321] * self[e2]) - (other[e315] * self[e4]),
                -(other[e412] * self[e5]) - (other[e321] * self[e3]) - (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd3        1        1        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       82      113        0
    //  no simd       99      130        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e321] * self[e1]) - (other[e235] * self[e4]),
                -(other[e431] * self[e5]) - (other[e321] * self[e2]) - (other[e315] * self[e4]),
                -(other[e412] * self[e5]) - (other[e321] * self[e3]) - (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]) - (other[e12345] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e12345] * self[e1]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e12345] * self[e2]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) + (other[e12345] * self[e3]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        1        1        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       80      111        0
    //  no simd       94      125        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                (other[e45] * self[e4]) - (other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      123        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       99      131        0
    //  no simd      123      155        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e3]) + (other[e4235] * self[e4]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) + (other[e4315] * self[e4]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) + (other[e4125] * self[e4]) - (other[e42] * self[e1]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e4125] * self[e2]) - (other[e45] * self[e1]) - (other[e4315] * self[e3]),
                (other[e42] * self[e5]) + (other[e4235] * self[e3]) - (other[e45] * self[e2]) - (other[e4125] * self[e1]),
                (other[e43] * self[e5]) + (other[e4315] * self[e1]) - (other[e45] * self[e3]) - (other[e4235] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e41] * self[e5]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e42] * self[e5]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e43] * self[e5]) - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       60        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       46       70        0
    //  no simd       64      100        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, other[e4] * self[e5] * -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, other[e12345] * self[e4] * -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       83        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       86        0
    //  no simd       68       95        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) - (other[e45] * self[e1]),
                (other[e25] * self[e4]) - (other[e45] * self[e2]),
                (other[e35] * self[e4]) - (other[e45] * self[e3]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]),
                other[e45] * self[e4],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      100        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       76      105        0
    //  no simd       88      120        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4235] * self[e4],
                other[e4315] * self[e4],
                other[e4125] * self[e4],
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]) - (other[e45] * self[e1]) - (other[e4315] * self[e3]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]) - (other[e45] * self[e2]) - (other[e4125] * self[e1]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]) - (other[e45] * self[e3]) - (other[e4235] * self[e2]),
                other[e3215] * self[e4],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       89        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       63       95        0
    //  no simd       75      111        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]]) * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e4] * -1.0,
                other[e315] * self[e4] * -1.0,
                other[e125] * self[e4] * -1.0,
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       96        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       70      104        0
    //  no simd       88      128        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e4] * -1.0,
                other[e315] * self[e4] * -1.0,
                other[e125] * self[e4] * -1.0,
                (other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                other[e12345] * self[e4] * -1.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e12345] * self[e5]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      188        0
    //    simd2        6        6        0
    //    simd3       24       24        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      166      230        0
    //  no simd      256      320        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e4] * self[e5]) - (other[e5] * self[e4]), (other[e3215] * self[e4]) + (other[e1234] * self[e5])])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e41] * self[e5]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e42] * self[e5]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e43] * self[e5]) - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e4125] * self[e2]) - (other[e45] * self[e1]) - (other[e4315] * self[e3]),
                (other[e42] * self[e5]) + (other[e4235] * self[e3]) - (other[e45] * self[e2]) - (other[e4125] * self[e1]),
                (other[e43] * self[e5]) + (other[e4315] * self[e1]) - (other[e45] * self[e3]) - (other[e4235] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]),
            ]) + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e12345] * self[e2]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e12345] * self[e3]) + (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e321] * self[e5]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[e321] * self[e4]) + (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       65        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       44       68        0
    //  no simd       49       75        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) - (other[e4235] * self[e2]),
                other[e3215] * self[e4],
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       59        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       41       65        0
    //  no simd       54       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]])) - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                (other[e5] * self[e4]) - (other[e4] * self[e5]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                other[e5] * self[e1],
                other[e5] * self[e2],
                other[e5] * self[e3],
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       14       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]),
            // e5
            self[e5] * other[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       67        0
    //    simd3        2        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       47       71        0
    //  no simd       54       80        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                (self[e4] * other[e3215]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       98      130        0
    //  no simd      128      160        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) + (self[e4] * other[e1]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) + (self[e4] * other[e2]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) + (self[e4] * other[e3]) - (self[e2] * other[e423]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e1] * other[e321]) - (self[e3] * other[e2]) - (self[e4] * other[e235]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]) - (self[e2] * other[e321]) - (self[e4] * other[e315]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]) - (self[e3] * other[e321]) - (self[e4] * other[e125]),
                (self[e4] * other[e5]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) + (self[e4] * other[e321]) - (self[e4] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) + (self[e4] * other[e235]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) + (self[e4] * other[e315]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) + (self[e4] * other[e125]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       98      130        0
    //  no simd      128      160        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) + (self[e4] * other[e4235]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) + (self[e4] * other[e4315]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) + (self[e4] * other[e4125]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Scalar {
    type Output = sandwich_partial<Scalar>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from(self[scalar]) * Simd32x2::from([other[e1234], other[scalar]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ other[e12345] * self[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e15], other[e25], other[e35]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from(self[scalar]) * Simd32x2::from([other[e4], other[e12345]]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e415], other[e425], other[e435]]),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * Simd32x2::from([other[scalar], other[e12345]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]),
            // e5
            other[e5] * self[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e41], other[e42], other[e43]]),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e423], other[e431], other[e412]]),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e1234
            other[e1234] * self[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]),
            // e5
            other[e5] * self[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ other[scalar] * self[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
            // e1234
            self[scalar] * other[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Sphere {
    type Output = sandwich_partial<Sphere>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      111        0
    //    simd3        1        1        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       85      116        0
    //  no simd       99      130        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      123        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       99      131        0
    //  no simd      123      155        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]) - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]) - (other[e2] * self[e1234]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]) - (other[e3] * self[e1234]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e412] * self[e3215]) + (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       66        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       52       73        0
    //  no simd       64       94        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, other[e1234] * self[e3215]]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, other[scalar] * self[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       80        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       56       84        0
    //  no simd       68       96        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) - (other[e321] * self[e4315]),
                (other[e125] * self[e1234]) - (other[e321] * self[e4125]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                other[e321] * self[e1234] * -1.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       95        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       70      103        0
    //  no simd       88      127        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1] * self[e1234] * -1.0,
                other[e2] * self[e1234] * -1.0,
                other[e3] * self[e1234] * -1.0,
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e315] * self[e1234]) + (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e125] * self[e1234]) + (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                other[e5] * self[e1234],
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       90        0
    //    simd3        0        1        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       66       94        0
    //  no simd       75      105        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       96        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       73      102        0
    //  no simd       88      120        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]),
                other[scalar] * self[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       61        0
    //    simd3        1        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       41       66        0
    //  no simd       49       78        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]]) * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                other[e5] * self[e1234],
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                other[e1] * self[e3215],
                other[e2] * self[e3215],
                other[e3] * self[e3215],
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       14       34        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        1        1        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       80      111        0
    //  no simd       94      125        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      111        0
    //    simd3        1        1        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       85      116        0
    //  no simd       99      130        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) + (other[e12345] * self[e1234]) - (other[e321] * self[e1234]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e321] * self[e3215]) + (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      110        0
    //    simd3        1        1        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       83      114        0
    //  no simd       94      125        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       99      131        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      105      137        0
    //  no simd      123      155        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e4235] * self[e1234]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) + (other[e4315] * self[e1234]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) + (other[e4125] * self[e1234]) - (other[e41] * self[e4315]) - (other[e1234] * self[e4125]),
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       63        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       49       72        0
    //  no simd       64       99        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, other[e4] * self[e3215] * -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, other[e12345] * self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       86        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       89        0
    //  no simd       68       98        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e45] * self[e4235]),
                (other[e25] * self[e1234]) + (other[e45] * self[e4315]),
                (other[e35] * self[e1234]) + (other[e45] * self[e4125]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                other[e45] * self[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e15] * self[e1234] * -1.0,
                other[e25] * self[e1234] * -1.0,
                other[e35] * self[e1234] * -1.0,
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      108        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       76      112        0
    //  no simd       88      124        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4235] * self[e1234],
                other[e4315] * self[e1234],
                other[e4125] * self[e1234],
                (other[e3215] * self[e1234]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e45] * self[e4235]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e25] * self[e1234]) + (other[e45] * self[e4315]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e35] * self[e1234]) + (other[e45] * self[e4125]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                other[e3215] * self[e1234] * -1.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                other[e45] * self[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e15] * self[e1234] * -1.0,
                other[e25] * self[e1234] * -1.0,
                other[e35] * self[e1234] * -1.0,
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       86        0
    //    simd3        0        1        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       63       91        0
    //  no simd       75      105        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e415] * self[e4315]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       92        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       70       99        0
    //  no simd       88      120        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                other[e12345] * self[e1234],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      216        0
    //    simd2        4        4        0
    //    simd3       24       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      186      250        0
    //  no simd      256      320        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                (other[e415] * self[e4125]) - (other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                (other[e425] * self[e4235]) - (other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e423] * self[e3215]) - (other[e2] * self[e4125]) - (other[e321] * self[e4235]),
                (other[e1] * self[e4125]) + (other[e431] * self[e3215]) - (other[e3] * self[e4235]) - (other[e321] * self[e4315]),
                (other[e2] * self[e4235]) + (other[e412] * self[e3215]) - (other[e1] * self[e4315]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e15] * self[e1234]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e25] * self[e1234]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e35] * self[e1234]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
            // e1234
            (other[scalar] * self[e1234]) + (other[e45] * self[e1234]) + (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       65        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       49       79        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                other[e3215] * self[e1234] * -1.0,
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e4235] * self[e3215]) * -1.0,
                (other[e4315] * self[e3215]) * -1.0,
                (other[e4125] * self[e3215]) * -1.0,
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       59        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       44       65        0
    //  no simd       57       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            -(Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                (other[e5] * self[e1234]) - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       14       33        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
            // e1234
            other[scalar] * self[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       66        0
    //    simd3        2        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       44       71        0
    //  no simd       54       83        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                (other[e1234] * self[e3215]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e4235] * self[e3215]) * -1.0,
                (other[e4315] * self[e3215]) * -1.0,
                (other[e4125] * self[e3215]) * -1.0,
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       98      130        0
    //  no simd      128      160        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]) - (self[e1234] * other[e1]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]) - (self[e1234] * other[e2]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]) - (self[e1234] * other[e3]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]) - (self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]) - (self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]) - (self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) - (self[e4235] * other[e315]),
                -(self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                (self[e4125] * other[e415]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                (self[e4235] * other[e425]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]) - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      107      139        0
    //  no simd      128      160        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) + (self[e1234] * other[e4235]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) + (self[e1234] * other[e4315]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) + (self[e1234] * other[e4125]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e1234] * other[e15]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e1234] * other[e25]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e1234] * other[e35]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]) - (self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]) - (self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]) - (self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) + (self[e1234] * other[scalar]) + (self[e1234] * other[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]) - (self[e4315] * other[e12]) - (self[e1234] * other[e15]),
                (self[e4235] * other[e12]) + (self[e3215] * other[e42]) - (self[e4125] * other[e23]) - (self[e1234] * other[e25]),
                (self[e4315] * other[e23]) + (self[e3215] * other[e43]) - (self[e4235] * other[e31]) - (self[e1234] * other[e35]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for VersorEven {
    type Output = sandwich_partial<VersorEven>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      338        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      325      364        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      348      386        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      377      416        0
    //  no simd      464      506        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e1])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e2])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e3])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      193      230        0
    //    simd4       16       18        0
    // Totals...
    // yes simd      209      248        0
    //  no simd      257      302        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e1234] * self[e1], other[e1234] * self[e2], other[e1234] * self[e3], 0.0])
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234] * self[e235], other[e1234] * self[e315], other[e1234] * self[e125], (other[e1234] * self[e5]) * -1.0])
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1234] * self[e235]) * -1.0,
                (other[e1234] * self[e315]) * -1.0,
                (other[e1234] * self[e125]) * -1.0,
                (other[e1234] * self[e12345]) + (other[e1234] * self[e321]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      250        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      231      270        0
    //  no simd      288      330        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e235] * self[e4]) - (other[e315] * self[e412]) - (other[e321] * self[e1]),
                (other[e235] * self[e412]) - (other[e315] * self[e4]) - (other[e125] * self[e423]) - (other[e321] * self[e2]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e125] * self[e4]) - (other[e321] * self[e3]),
                (other[e321] * self[e12345]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e321] * self[e235]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125]),
                other[e321] * self[e4],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      272      310        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      292      331        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3])
                    - (other[e321] * self[e321])
                    - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e321] * self[e1])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e321] * self[e2])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e321] * self[e3])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e321] * self[e12345]) + (other[e5] * self[e4])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      248      286        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      266      305        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e23] * self[e4]) + (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e31] * self[e4]) + (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) + (other[e12] * self[e4]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e12] * self[e2]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e23] * self[e3]) - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e31] * self[e1]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      248      286        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      274      313        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e2])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e3])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e1])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      246        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      228      267        0
    //  no simd      288      330        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]) - (other[e5] * self[e423]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]) - (other[e5] * self[e431]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e5] * self[e4]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      186        0
    //    simd4       19       28        0
    // Totals...
    // yes simd      183      214        0
    //  no simd      240      298        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      338        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      321      360        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      308      346        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      331      370        0
    //  no simd      400      442        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412])
                    - (other[e12345] * self[e423]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423])
                    - (other[e12345] * self[e431]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4])
                    - (other[e12345] * self[e412]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e12345] * self[e321])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e12345] * self[e1])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e12345] * self[e2])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e12345] * self[e3])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      338        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      321      360        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      344      382        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      374      413        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[e1234] * self[e1])
                    + (other[e4235] * self[e4])
                    + (other[e4315] * self[e412])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[e1234] * self[e2])
                    + (other[e4315] * self[e4])
                    + (other[e4125] * self[e423])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e45] * self[e412])
                    + (other[e1234] * self[e3])
                    + (other[e4235] * self[e431])
                    + (other[e4125] * self[e4])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e25] * self[e412])
                    + (other[e1234] * self[e235])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e35] * self[e423])
                    + (other[e1234] * self[e315])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e15] * self[e431])
                    + (other[e1234] * self[e125])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e4125] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e4235] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e4315] * self[e235]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      169      216        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      191      239        0
    //  no simd      257      308        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([(other[e4] * self[e1]) * -1.0, (other[e4] * self[e2]) * -1.0, (other[e4] * self[e3]) * -1.0, 0.0])
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e12345] * self[e415]) * -1.0,
                (other[e12345] * self[e425]) * -1.0,
                (other[e12345] * self[e435]) * -1.0,
                other[e12345] * self[e321],
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e12345] * self[e235] * -1.0,
                other[e12345] * self[e315] * -1.0,
                other[e12345] * self[e125] * -1.0,
                -(other[e4] * self[e12345]) - (other[e4] * self[e321]) - (other[e12345] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) - (other[e4] * self[e235]),
                (other[e12345] * self[e2]) - (other[e4] * self[e315]),
                (other[e12345] * self[e3]) - (other[e4] * self[e125]),
                other[e12345] * self[e5] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      246        0
    //    simd4       19       21        0
    // Totals...
    // yes simd      231      267        0
    //  no simd      288      330        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e45] * self[e423],
                other[e45] * self[e431],
                other[e45] * self[e412],
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]) - (other[e45] * self[e415]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]) - (other[e45] * self[e425]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]) - (other[e45] * self[e435]),
                other[e45] * self[e4],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      252      290        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      277      316        0
    //  no simd      352      394        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e45] * self[e423]) + (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e45] * self[e431]) + (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e45] * self[e412]) + (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e2]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423]) + (other[e4235] * self[e3]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431]) + (other[e4315] * self[e1]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      282        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      263      302        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e431]) - (other[e415] * self[e4]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e425] * self[e4]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4]),
                -(other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e315] * self[e412])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e125] * self[e423])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e235] * self[e431]) + (other[e125] * self[e4])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      298        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      283      322        0
    //  no simd      352      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e12345] * self[e415])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e5] * self[e423]),
                (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e12345] * self[e425])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e5] * self[e431]),
                (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e12345] * self[e435])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e5] * self[e412]),
                (other[e12345] * self[e321]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e5] * self[e423])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e5] * self[e431])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e5] * self[e412])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      598      668        0
    //    simd2        8        8        0
    //    simd3       78       78        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      712      783        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4]),
                (other[scalar] * self[e12345]) + (other[e3215] * self[e4]) + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435])
                    - (other[e1234] * self[e235]),
                (other[e35] * self[e423]) + (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415])
                    - (other[e1234] * self[e315]),
                (other[e15] * self[e431]) + (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345])
                    - (other[e1234] * self[e125]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[scalar] * self[e5])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e12345] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235]),
                (other[e1] * self[e125]) + (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e12345] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315]),
                (other[e2] * self[e235]) + (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e12345] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125]),
                (other[e321] * self[e12345]) + (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2])
                    - (other[e3] * self[e431])
                    - (other[e425] * self[e412])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3]),
                (other[e423] * self[e435]) + (other[e423] * self[e3])
                    - (other[e1] * self[e412])
                    - (other[e435] * self[e423])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1]),
                (other[e431] * self[e415]) + (other[e431] * self[e1])
                    - (other[e2] * self[e423])
                    - (other[e415] * self[e431])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) + (other[e435] * self[e425]) + (other[e412] * self[e315]) + (other[e125] * self[e431])
                    - (other[e2] * self[e3])
                    - (other[e425] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e315] * self[e412]),
                (other[e1] * self[e3]) + (other[e415] * self[e435]) + (other[e423] * self[e125]) + (other[e235] * self[e412])
                    - (other[e3] * self[e1])
                    - (other[e435] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e125] * self[e423]),
                (other[e2] * self[e1]) + (other[e425] * self[e415]) + (other[e431] * self[e235]) + (other[e315] * self[e423])
                    - (other[e1] * self[e2])
                    - (other[e415] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e5]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                - (Simd32x3::from(other[e321]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(self[e321]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e423], other[e431], other[e412]]))
                - (Simd32x3::from(self[e4]) * Simd32x3::from([other[e235], other[e315], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412])
                    + (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    + (other[e1234] * self[e235])
                    - (other[e35] * self[e431])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423])
                    + (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    + (other[e1234] * self[e315])
                    - (other[e15] * self[e412])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431])
                    + (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    + (other[e1234] * self[e125])
                    - (other[e25] * self[e423])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e435]) + (other[e42] * self[e3]) + (other[e31] * self[e412]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e43] * self[e415]) + (other[e43] * self[e1]) + (other[e12] * self[e423]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e425]) + (other[e41] * self[e2]) + (other[e23] * self[e431]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e423], self[e431], self[e412]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                + (Simd32x3::from(self[e12345]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e321]) * Simd32x3::from([other[e41], other[e42], other[e43]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e4]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) + (other[e4125] * self[e315]) - (other[e12] * self[e315]) - (other[e4315] * self[e125]),
                (other[e12] * self[e235]) + (other[e4235] * self[e125]) - (other[e23] * self[e125]) - (other[e4125] * self[e235]),
                (other[e23] * self[e315]) + (other[e4315] * self[e235]) - (other[e31] * self[e235]) - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e415], self[e425], self[e435]]))
                + (Simd32x3::from(self[e5]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self[e235], self[e315], self[e125]]))
                - (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e1], self[e2], self[e3]]))
                - (Simd32x3::from(self[e5]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e412] * self[e315])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235])
                    - (other[e435] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e12345] * self[e2])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e423] * self[e125])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315])
                    - (other[e415] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e12345] * self[e3])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e431] * self[e235])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125])
                    - (other[e425] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    + (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e5] * self[e12345])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e415])
                + (other[e423] * self[e1])
                + (other[e431] * self[e425])
                + (other[e431] * self[e2])
                + (other[e412] * self[e435])
                + (other[e412] * self[e3])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      262        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      240      279        0
    //  no simd      288      330        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) - (other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) - (other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) - (other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      216      254        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      238      277        0
    //  no simd      304      346        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]) - (other[e4] * self[e1]),
                (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]) - (other[e4] * self[e2]),
                (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]) - (other[e4] * self[e3]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]) - (other[e5] * self[e423]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]) - (other[e5] * self[e431]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e5] * self[e4]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]) - (other[e4] * self[e12345]) - (other[e4] * self[e321]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]) - (other[e4] * self[e235]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]) - (other[e4] * self[e315]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]) - (other[e4] * self[e125]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      214        0
    //    simd4       12       17        0
    // Totals...
    // yes simd      204      231        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      274        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      253      292        0
    //  no simd      304      346        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4315] * self[e412]) + (other[e1234] * self[e1]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) + (other[e1234] * self[e2]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) + (other[e1234] * self[e3]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) + (other[e1234] * self[e235]) - (other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) + (other[e1234] * self[e315]) - (other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) + (other[e1234] * self[e125]) - (other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]) - (other[e1234] * self[e235]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]) - (other[e1234] * self[e315]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]) - (other[e1234] * self[e125]),
                (other[e1234] * self[e12345]) + (other[e1234] * self[e321]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      356      394        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      387      426        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e12345] * self[e423])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431])
                    - (other[e4] * self[e1]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e12345] * self[e431])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412])
                    - (other[e4] * self[e2]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e12345] * self[e412])
                    - (other[e415] * self[e431])
                    - (other[e2] * self[e423])
                    - (other[e4] * self[e3]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e12345] * self[e415])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e5] * self[e423])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e12345] * self[e425])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e5] * self[e431])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e12345] * self[e435])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e5] * self[e412])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e4] * self[e125]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e12345] * self[e321])
                    + (other[e321] * self[e12345])
                    + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) + (other[e3] * self[e315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) + (other[e1] * self[e125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e5] * self[e435])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412])
                    - (other[e4] * self[e321]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e12345] * self[e1])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e5] * self[e423])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125])
                    + (other[e12345] * self[e2])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e5] * self[e431])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235])
                    + (other[e12345] * self[e3])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e5] * self[e412])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      344      382        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      378      417        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e12345] * other[e41])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    + (self[e4] * other[e4235])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e12345] * other[e42])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    + (self[e4] * other[e4315])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e12345] * other[e43])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    + (self[e4] * other[e4125])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e12345] * other[e23])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    + (self[e2] * other[e4125])
                    + (self[e4] * other[e15])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e12345] * other[e31])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    + (self[e3] * other[e4235])
                    + (self[e4] * other[e25])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125]),
                (self[e431] * other[e15])
                    + (self[e12345] * other[e12])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    + (self[e1] * other[e4315])
                    + (self[e4] * other[e35])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e5] * other[e1234])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e321]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e12345] * other[e4235])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41])
                    - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e12345] * other[e4315])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42])
                    - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e12345] * other[e4125])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43])
                    - (self[e1] * other[e31]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for VersorOdd {
    type Output = sandwich_partial<VersorOdd>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      304      342        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      328      367        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[scalar] * self[e41])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[scalar] * self[e42])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[scalar] * self[e43])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      354        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      353      392        0
    //  no simd      464      506        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e4] * self[e4235])
                    - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e4] * self[e4315])
                    - (other[e2] * self[e1234]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e4] * self[e4125])
                    - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      185      221        0
    //    simd4       18       20        0
    // Totals...
    // yes simd      203      241        0
    //  no simd      257      301        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([(other[e1234] * self[e4235]) * -1.0, (other[e1234] * self[e4315]) * -1.0, (other[e1234] * self[e4125]) * -1.0, 0.0])
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[scalar] * self[e15],
                other[scalar] * self[e25],
                other[scalar] * self[e35],
                (other[e1234] * self[scalar]) + (other[scalar] * self[e1234]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1234] * self[e15]) + (other[scalar] * self[e4235]),
                (other[e1234] * self[e25]) + (other[scalar] * self[e4315]),
                (other[e1234] * self[e35]) + (other[scalar] * self[e4125]),
                other[scalar] * self[e3215],
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      196      238        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      219      262        0
    //  no simd      288      334        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41] * -1.0,
                other[e321] * self[e42] * -1.0,
                other[e321] * self[e43] * -1.0,
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                (other[e321] * self[scalar]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e315] * self[scalar]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[scalar]) + (other[e125] * self[e45])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e321] * self[e23]) - (other[e125] * self[e42]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e321] * self[e31]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e321] * self[e12]) - (other[e315] * self[e41]),
                other[e321] * self[e1234] * -1.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      282        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      271      310        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e321] * self[scalar])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e321] * self[e23])
                    + (other[e1] * self[scalar])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e321] * self[e31])
                    + (other[e2] * self[scalar])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e321] * self[e12])
                    + (other[e1] * self[e31])
                    + (other[e3] * self[scalar])
                    + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      298        0
    //    simd4       15       16        0
    // Totals...
    // yes simd      275      314        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e15] * self[e42]) + (other[e35] * self[e1234])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      268      306        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      289      328        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e3215] * self[e41])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e3215] * self[e42])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e3215] * self[e43])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      226        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      213      252        0
    //  no simd      288      330        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      174        0
    //    simd4       22       29        0
    // Totals...
    // yes simd      174      203        0
    //  no simd      240      290        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      272      310        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      300      339        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      276      314        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      307      346        0
    //  no simd      400      442        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      304      342        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      324      363        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[scalar]) + (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e42] * self[scalar]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      398        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      386      425        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[scalar])
                    + (other[e42] * self[e12])
                    + (other[e43] * self[e4315])
                    + (other[e31] * self[e43])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125])
                    + (other[e42] * self[scalar])
                    + (other[e43] * self[e23])
                    + (other[e12] * self[e41])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31])
                    + (other[e42] * self[e4235])
                    + (other[e43] * self[scalar])
                    + (other[e23] * self[e42])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      157      196        0
    //    simd4       25       27        0
    // Totals...
    // yes simd      182      223        0
    //  no simd      257      304        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(other[e4] * self[e4235]) * -1.0, (other[e4] * self[e4315]) * -1.0, (other[e4] * self[e4125]) * -1.0, 0.0])
                + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4] * self[e15]) + (other[e12345] * self[e23]),
                (other[e4] * self[e25]) + (other[e12345] * self[e31]),
                (other[e4] * self[e35]) + (other[e12345] * self[e12]),
                -(other[e4] * self[e3215]) - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e12345] * self[e4235]) * -1.0,
                (other[e12345] * self[e4315]) * -1.0,
                (other[e12345] * self[e4125]) * -1.0,
                (other[e4] * self[scalar]) + (other[e12345] * self[e1234]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      262        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      240      279        0
    //  no simd      288      330        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e45] * self[e41],
                other[e45] * self[e42],
                other[e45] * self[e43],
                (other[e45] * self[e45]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) - (other[e35] * self[e42]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) - (other[e15] * self[e43]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[scalar]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e45] * self[e15]),
                (other[e25] * self[scalar]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e45] * self[e25]),
                (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[scalar]) + (other[e35] * self[e45])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e45] * self[e35]),
                other[e45] * self[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) - (other[e15] * self[e1234]) - (other[e25] * self[e43]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) - (other[e25] * self[e1234]) - (other[e35] * self[e41]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) - (other[e15] * self[e42]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      276      314        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      295      334        0
    //  no simd      352      394        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e45] * self[e15])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e45] * self[e25])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e45] * self[e35])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4315] * self[e12])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) + (other[e4125] * self[e23])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) + (other[e4235] * self[e31])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      232      270        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      254      293        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e425] * self[e1234]) + (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) + (other[e435] * self[e1234]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      274        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      265      304        0
    //  no simd      352      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e12345] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e12345] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e12345] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e12345] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e12345] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e12345] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      552      622        0
    //    simd2       24       24        0
    //    simd3       80       80        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      686      757        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(self[scalar]) * Simd32x2::from([other[scalar], other[e12345]]))
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e412] * self[e25]) + (other[e315] * self[e43])
                    - (other[e12345] * self[e4235])
                    - (other[e3] * self[e31])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e423] * self[e35]) + (other[e125] * self[e41])
                    - (other[e12345] * self[e4315])
                    - (other[e1] * self[e12])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e431] * self[e15]) + (other[e235] * self[e42])
                    - (other[e12345] * self[e4125])
                    - (other[e2] * self[e23])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e315] * self[e41]),
                (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    + (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e321] * self[e3215])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e31] * self[e35])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e12] * self[e15])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e23] * self[e25])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e4315] * self[e43]) - (other[e12] * self[e42]) - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e4125] * self[e41]) - (other[e23] * self[e43]) - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e4235] * self[e42]) - (other[e31] * self[e41]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) + (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e4315] * self[e4125])
                    - (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e4125] * self[e4315]),
                (other[e35] * self[e41]) + (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e4125] * self[e4235])
                    - (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e4235] * self[e4315])
                    - (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[scalar]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e3215]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e1234]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e23], other[e31], other[e12]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e4235], other[e4315], other[e4125]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e15], other[e25], other[e35]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e41], other[e42], other[e43]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e12345] * self[e23])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    + (other[e425] * self[e12])
                    + (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    - (other[e2] * self[e4125])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e412] * self[e25])
                    - (other[e125] * self[e42]),
                (other[e12345] * self[e31])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    + (other[e435] * self[e23])
                    + (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    - (other[e3] * self[e4235])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e423] * self[e35])
                    - (other[e235] * self[e43]),
                (other[e12345] * self[e12])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    + (other[e415] * self[e31])
                    + (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    - (other[e1] * self[e4315])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e431] * self[e15])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    + (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) + (other[e425] * self[e43]),
                (other[e1] * self[e43]) + (other[e435] * self[e41]),
                (other[e2] * self[e41]) + (other[e415] * self[e42]),
            ]) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e41], self[e42], self[e43]]))
                + (Simd32x3::from(other[e4]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e415], other[e425], other[e435]]))
                - (Simd32x3::from(other[e4]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * Simd32x3::from([other[e1], other[e2], other[e3]])),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35]) + (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e3] * self[e25])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e3] * self[e15]) + (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e1] * self[e35])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e1] * self[e25]) + (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e2] * self[e15])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e12345]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e23], self[e31], self[e12]]))
                + (Simd32x3::from(other[e5]) * Simd32x3::from([self[e4235], self[e4315], self[e4125]]))
                + (Simd32x3::from(other[e321]) * Simd32x3::from([self[e15], self[e25], self[e35]]))
                + (Simd32x3::from(self[scalar]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other[e235], other[e315], other[e125]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e1], other[e2], other[e3]]))
                + (Simd32x3::from(self[e3215]) * Simd32x3::from([other[e415], other[e425], other[e435]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42])
                    + (other[e45] * self[e23])
                    + (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e4315] * self[e12])
                    + (other[e1234] * self[e15])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43])
                    + (other[e45] * self[e31])
                    + (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e4125] * self[e23])
                    + (other[e1234] * self[e25])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41])
                    + (other[e45] * self[e12])
                    + (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e4235] * self[e31])
                    + (other[e1234] * self[e35])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      220      258        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      237      276        0
    //  no simd      288      330        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]) - (other[e4235] * self[e3215]) - (other[e4315] * self[e35]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]) - (other[e4315] * self[e3215]) - (other[e4125] * self[e15]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]) - (other[e4235] * self[e25]) - (other[e4125] * self[e3215]),
                -(other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4315] * self[e12]) - (other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                (other[e4125] * self[e23]) - (other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                (other[e4235] * self[e31]) - (other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      230        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      220      259        0
    //  no simd      304      346        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]) - (other[e4] * self[e4235]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]) - (other[e4] * self[e4315]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]) - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      202        0
    //    simd4       15       20        0
    // Totals...
    // yes simd      195      222        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e3215]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      228      266        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      247      286        0
    //  no simd      304      346        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]) - (other[e1234] * self[e4235]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]) - (other[e1234] * self[e4315]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]) - (other[e1234] * self[e4125]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]) - (other[e4235] * self[e3215]) - (other[e4315] * self[e35]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]) - (other[e4315] * self[e3215]) - (other[e4125] * self[e15]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]) - (other[e4235] * self[e25]) - (other[e4125] * self[e3215]),
                (other[e1234] * self[scalar]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4315] * self[e12]) + (other[e1234] * self[e15]) - (other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                (other[e4125] * self[e23]) + (other[e1234] * self[e25]) - (other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                (other[e4235] * self[e31]) + (other[e1234] * self[e35]) - (other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      354        0
    //    simd4       41       42        0
    // Totals...
    // yes simd      357      396        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e12345] * self[e41]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e1] * self[e1234])
                    - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e12345] * self[e42]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e2] * self[e1234])
                    - (other[e4] * self[e4315]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e12345] * self[e43]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e3] * self[e1234])
                    - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e12345] * self[e23])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e5] * self[e41])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e12345] * self[e31])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e5] * self[e42])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e12345] * self[e12])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e5] * self[e43])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41]) + (other[e2] * self[e12])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e12345] * self[e4235])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31])
                    - (other[e4] * self[e15]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42]) + (other[e3] * self[e23])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e12345] * self[e4315])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12])
                    - (other[e4] * self[e25]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43]) + (other[e1] * self[e31])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e12345] * self[e4125])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23])
                    - (other[e4] * self[e35]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      360      398        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      390      429        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12])
                    + (other[e43] * self[e4315])
                    + (other[scalar] * self[e41])
                    + (other[e31] * self[e43])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125])
                    + (other[e43] * self[e23])
                    + (other[scalar] * self[e42])
                    + (other[e12] * self[e41])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31])
                    + (other[e42] * self[e4235])
                    + (other[scalar] * self[e43])
                    + (other[e23] * self[e42])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e1234]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e1234]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[scalar] * self[e4235])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e43] * self[e15])
                    + (other[scalar] * self[e4315])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[scalar] * self[e4125])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
