use crate::traits::GeometricProduct;
use crate::traits::Reverse;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        84     119       0
//  Average:       162     196       0
//  Maximum:      1518    1598       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        96     133       0
//  Average:       187     224       0
//  Maximum:      1984    2068       0
impl InfixSandwich for AntiCircleRotor {}
impl Sandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      205      247        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      220      262        0
    //  no simd      265      307        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      213      255        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      237      279        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (other.group0()[0] * self.group2()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[1] * self.group2()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group1()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group2()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group1()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      167      208        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      221        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      183      224        0
    //  no simd      192      233        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      189      230        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      200      241        0
    //  no simd      233      274        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[2] * other.group1()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      210      252        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      196      238        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      205      247        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      192        0
    //    simd3        1        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      158      200        0
    //  no simd      178      222        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      131        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      105      135        0
    //  no simd      105      146        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      214      256        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      224      266        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      213      255        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      226      268        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      214      256        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      224      266        0
    //  no simd      254      296        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      225      267        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      246      288        0
    //  no simd      309      351        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 1, 2, 1))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      167      212        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      181      225        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      183      227        0
    //  no simd      189      233        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      204      246        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      211      253        0
    //  no simd      232      274        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[0]]) * swizzle!(other.group1(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      202      244        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      204      246        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      196      238        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      205      247        0
    //  no simd      232      274        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      393      459        0
    //    simd2       10       10        0
    //    simd3       37       40        0
    //    simd4       29       29        0
    // Totals...
    // yes simd      469      538        0
    //  no simd      640      715        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group1()[3] * other.group3()[3]), ((self.group1()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (other.group7()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (other.group7()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) - (other.group7()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2]) + (self.group1()[3] * other[e1])
                - (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group2()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group9()[3]) + (self.group2()[1] * other.group9()[2])),
                ((self.group1()[1] * other.group9()[3]) + (self.group2()[2] * other.group9()[0])),
                ((self.group1()[2] * other.group9()[3]) + (self.group2()[0] * other.group9()[1])),
                (-(self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[2])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[1] * self.group2()[0])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group6(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group7()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group2()[1] * other.group1()[2]) - (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group6()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group6()[2]) - (self.group2()[2] * other.group1()[0]) - (self.group2()[2] * other.group6()[0])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3]) + (self.group1()[2] * other.group3()[3])),
                (-(other.group5()[1] * self.group2()[1]) - (other.group5()[2] * self.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                + (Simd32x4::from(self.group2()[3]) * other.group9())
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            (-(self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      163      201        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      167      206        0
    //  no simd      178      219        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      155      194        0
    //    simd3        2        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      164      204        0
    //  no simd      189      231        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      131        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd      105      134        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      163      201        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      170      209        0
    //  no simd      189      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      216      258        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      242      284        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group2(), 1, 3, 3, 3))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      228      270        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      251      293        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[3]]) * swizzle!(other.group1(), 1, 1, 2, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[0]]) * swizzle!(other.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiDipoleInversion {}
impl Sandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      285      327        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      307      349        0
    //  no simd      373      415        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group2()[2]),
                (other.group1()[2] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group3()[2], self.group1()[1], self.group3()[1]]) * swizzle!(other.group2(), 1, 0, 0, 1))
                + (Simd32x4::from([self.group3()[1], self.group1()[0], self.group3()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 2, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      265      307        0
    //    simd4       42       42        0
    // Totals...
    // yes simd      307      349        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])),
                (-(other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group3()[2], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 0, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group3()[1] * self.group1()[0])),
                ((other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      230      272        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      232      275        0
    //  no simd      238      284        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                ((other.group0()[0] * self.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      282        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      251      289        0
    //  no simd      272      310        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      249      289        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      270      310        0
    //  no simd      333      373        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]) + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) * -1.0),
                ((self.group1()[2] * other.group1()[0]) * -1.0),
                ((self.group1()[0] * other.group1()[1]) * -1.0),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      274      316        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      280      322        0
    //  no simd      298      340        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      302        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      277      319        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group3()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      228      265        0
    //    simd4       11       12        0
    // Totals...
    // yes simd      239      277        0
    //  no simd      272      313        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[0] * other.group0()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      209      235        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd      209      243        0
    //  no simd      209      265        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      282      324        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      301      343        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2]) - (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (other.group2()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1]) - (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[0])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])),
                ((other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      269      311        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      295      337        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group1()[1] * other.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group1()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group1()[0] * other.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group2()[0])
                    - (self.group3()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group3()[0] * other.group2()[1])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group3()[0] * other.group2()[3])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group3()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group3()[2] * other.group2()[3])),
                (-(self.group3()[3] * other.group1()[3]) - (self.group3()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      290      332        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      307      349        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (self.group2()[1] * other.group1()[0])),
                ((other.group2()[2] * self.group3()[2]) - (self.group2()[2] * other.group1()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      289      335        0
    //    simd4       36       36        0
    // Totals...
    // yes simd      325      371        0
    //  no simd      433      479        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[3] * other.group3()[3])
                    - (self.group3()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group3()[2] * other.group2()[1]) * -1.0),
                ((self.group3()[3] * other.group3()[1]) * -1.0),
                ((self.group3()[3] * other.group3()[2]) * -1.0),
                ((self.group1()[2] * other.group2()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 3, 3, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      234      284        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      235      285        0
    //  no simd      238      288        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      239      279        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      247      287        0
    //  no simd      271      311        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      298        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      274      316        0
    //  no simd      328      370        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0]) - (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1]) - (self.group3()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2]) - (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[2] * other.group0()[1]) - (self.group3()[3] * other.group1()[0])),
                (-(self.group3()[1] * other.group1()[3]) - (self.group3()[3] * other.group1()[1])),
                (-(self.group3()[2] * other.group1()[3]) - (self.group3()[3] * other.group1()[2])),
                ((self.group2()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      286      328        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      289      331        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group3()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[2] * self.group3()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[1] * self.group1()[1]) - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      258      295        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      277      314        0
    //  no simd      334      371        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group2()[2] * other.group0()[2]) - (self.group3()[2] * other.group1()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      590      658        0
    //    simd2        4        4        0
    //    simd3       50       52        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      681      751        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])
                    - (self.group2()[3] * other[e1])
                    - (self.group3()[3] * other.group1()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    + (self.group2()[3] * other.group9()[3])
                    + (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group5()[1] * self.group3()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0]) + (other.group4()[0] * self.group2()[2]) - (other.group4()[2] * self.group2()[0])
                    + (other.group5()[2] * self.group3()[0])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group9()[3]) - (other.group4()[0] * self.group2()[1])
                    + (other.group4()[1] * self.group2()[0])
                    + (other.group5()[0] * self.group3()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            ((other.group0()[0] * self.group3()[3])
                - (other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                + (self.group3()[0] * other.group3()[0])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[2] * other.group3()[2])
                - (self.group3()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) + (other.group8()[1] * self.group3()[2]) + (other.group8()[2] * self.group1()[1])
                    - (self.group3()[3] * other.group6()[0])),
                (-(other.group0()[1] * self.group2()[1]) + (other.group8()[1] * self.group1()[3]) + (other.group8()[2] * self.group3()[0])
                    - (self.group3()[3] * other.group6()[1])),
                (-(other.group0()[1] * self.group2()[2]) + (other.group8()[0] * self.group3()[1]) + (other.group8()[2] * self.group1()[3])
                    - (self.group3()[3] * other.group6()[2])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * other.group1())
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1]) + (self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0]) - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0]) + (self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * other.group8())
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (other.group4()[0] * self.group3()[3])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group4()[0] * self.group2()[2]) + (other.group4()[1] * self.group3()[3])
                    - (other.group5()[0] * self.group1()[2])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group4()[1] * self.group2()[0]) + (other.group4()[2] * self.group3()[3])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) - (other.group5()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group9(), 2, 0, 1, 2))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group4()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[2] * other.group3()[1]) + (self.group2()[1] * other.group9()[2]) - (self.group2()[2] * other.group9()[1]) + (self.group3()[1] * other.group3()[2])),
                ((self.group1()[0] * other.group3()[2]) - (self.group2()[0] * other.group9()[2]) + (self.group2()[2] * other.group9()[0]) + (self.group3()[2] * other.group3()[0])),
                ((self.group1()[1] * other.group3()[0]) + (self.group2()[0] * other.group9()[1]) - (self.group2()[1] * other.group9()[0]) + (self.group3()[0] * other.group3()[1])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group3()[1]) + (self.group0()[0] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[2] * self.group2()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group3()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                (-(other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group3()[2])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group6()[2])
                    - (self.group3()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group8()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(other.group0()[1] * self.group2()[3]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1])
                + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group3()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group3()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group3()[2])
                - (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group6()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      281        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      244      289        0
    //  no simd      268      313        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) - (self.group3()[0] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group3()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      239      282        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      250      293        0
    //  no simd      283      326        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group3()[2] * other.group0()[3])),
                (-(self.group2()[3] * other[e2]) + (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[1] * other[e2]) + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e2]) + (self.group3()[0] * other.group0()[1])),
                ((self.group2()[3] * other[e2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other[e2])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other[e2])),
                ((self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other[e2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      209      235        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      209      239        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      231      279        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      244      292        0
    //  no simd      283      331        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (self.group3()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[3]]) * self.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) - (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) - (self.group2()[2] * other[e4315])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      272      314        0
    //    simd4       44       44        0
    // Totals...
    // yes simd      316      358        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group3()[3])),
                (-(self.group0()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group3()[3])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[1] * other.group3()[2])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[2] * other.group3()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[0] * other.group3()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[0])),
                (-(self.group1()[1] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group2()[0])
                    - (self.group3()[3] * other.group1()[1])),
                (-(self.group1()[2] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group2()[1])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group3()[3]) + (self.group3()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group3()[3]) + (self.group3()[1] * other.group0()[3])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[2] * other.group3()[3]) + (self.group3()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group3()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      284      326        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      325      367        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group3()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) - (self.group3()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group3()[0]) - (self.group3()[3] * other.group3()[1])),
                ((self.group2()[2] * other.group0()[3]) - (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group2()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 3, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group1())
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group3(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiDualNum {}
impl Sandwich<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       23       57        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       47        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       24       51        0
    //  no simd       30       63        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       33        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       14       36        0
    //  no simd       14       45        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       45        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       20       48        0
    //  no simd       20       57        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       45        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       17       46        0
    //  no simd       17       48        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       49        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       20       51        0
    //  no simd       20       57        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       16       39        0
    //  no simd       16       45        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       44        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       47        0
    //  no simd       20       54        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       23       54        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       47        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       18       49        0
    //  no simd       20       53        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       59        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       27       60        0
    //  no simd       30       63        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       36        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       14       38        0
    //  no simd       14       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       20       46        0
    //  no simd       20       52        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       42        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       17       43        0
    //  no simd       17       45        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       20       46        0
    //  no simd       20       52        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       82        0
    //    simd2        1        2        0
    //    simd3        5        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       47       97        0
    //  no simd       67      129        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group6()[3]) * -1.0)])
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            (self.group0()[1] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other.group9()[3]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       34        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       16       36        0
    //  no simd       16       42        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       34        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       16       46        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       16       43        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       40        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       21       47        0
    //  no simd       36       68        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) * -1.0),
                ((self.group0()[0] * other.group3()[1]) * -1.0),
                ((self.group0()[0] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[3]) * -1.0)])
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       53        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       24       56        0
    //  no simd       33       65        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiFlatPoint {}
impl Sandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       99        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       66      103        0
    //  no simd       78      115        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      124        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       83      127        0
    //  no simd       92      136        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       70        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       44       72        0
    //  no simd       44       78        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       32        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       43        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       39        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       40        0
    //  no simd       18       43        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       14        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      109        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       64      112        0
    //  no simd       73      121        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      113        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68      116        0
    //  no simd       77      125        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       95        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       62       99        0
    //  no simd       74      111        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group0(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       96        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       71      104        0
    //  no simd       95      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[1] * self.group0()[0]) - (self.group0()[3] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[2] * other.group3()[2])])
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       74        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       44       78        0
    //  no simd       44       90        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       32        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       43        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      202        0
    //    simd2        1        1        0
    //    simd3        8       12        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      154      222        0
    //  no simd      192      268        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
                (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group4()[1] * self.group0()[2]) + (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                ((other.group4()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                (-(other.group4()[0] * self.group0()[1]) + (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (self.group0()[3] * other[e45]),
            ]),
            // e5
            (-(other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                - (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group0()[2])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[3] * other.group9()[1])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[3] * other.group9()[2])),
                ((other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[3])),
                (-(other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[1]) - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group6(), 0, 1, 2, 0))),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       21       40        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       53       92        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       16        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       53       87        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      128        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       87      131        0
    //  no simd       96      140        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       96        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       72      105        0
    //  no simd       96      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiFlector {}
impl Sandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      177        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      151      188        0
    //  no simd      184      221        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (other.group2()[3] * self.group1()[3]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 1) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      190        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      165      207        0
    //  no simd      216      258        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group2()[3] * self.group1()[0]) * -1.0),
                ((other.group2()[3] * self.group1()[1]) * -1.0),
                ((other.group2()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group3()[0] * self.group1()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group3()[1] * self.group1()[0]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) - (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (-(other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      144        0
    //    simd4        0        2        0
    // Totals...
    // yes simd      116      146        0
    //  no simd      116      152        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       52       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       56       76        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       62       82        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       60       76        0
    //  no simd       84      100        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       71        0
    //  no simd       60       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      178        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      146      188        0
    //  no simd      176      218        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (-(other.group2()[2] * self.group1()[2]) - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      183        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      154      193        0
    //  no simd      184      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group2()[3]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[2] * self.group0()[0]) + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      173        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      146      183        0
    //  no simd      176      213        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 0) * swizzle!(other.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (other.group2()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group0(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      181        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      162      199        0
    //  no simd      216      253        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) - (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      116      152        0
    //  no simd      116      164        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       52       76        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       76        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[3] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[3] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 3, 3, 3))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       73        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       56       77        0
    //  no simd       68       89        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       60       76        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      304      367        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      347      412        0
    //  no simd      448      517        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) - (self.group1()[3] * other.group1()[3])),
                (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group1()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group4()[1] * self.group0()[2]) + (other.group5()[0] * self.group0()[3]) + (other.group5()[1] * self.group1()[2])
                    - (self.group0()[0] * other[e45])),
                ((other.group0()[0] * self.group1()[1]) - (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) + (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                ((other.group0()[0] * self.group1()[2]) - (other.group4()[0] * self.group0()[1]) + (other.group5()[0] * self.group1()[1]) + (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                ((other.group4()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[0] * self.group1()[3]) - (other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                - (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) + (other.group8()[1] * self.group1()[2]) + (self.group1()[0] * other[e1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group6()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group8()[2] * self.group1()[0]) + (self.group1()[1] * other[e1])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group6()[1])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group8()[0] * self.group1()[1]) + (self.group1()[2] * other[e1])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self.group1()[3]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0]) + (self.group1()[1] * other.group9()[2])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[1] * self.group1()[3]) - (self.group0()[3] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[0])),
                (-(other.group4()[1] * self.group0()[0]) + (other.group4()[2] * self.group1()[3]) - (self.group0()[3] * other.group9()[2])
                    + (self.group1()[0] * other.group9()[1])),
                ((other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (other.group5()[2] * self.group1()[2]) - (self.group1()[3] * other[e45])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (other.group7()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[1]) - (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[0] * self.group0()[1]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group0()[3] * other[e1])
                    - (self.group1()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group6(), 0, 1, 2, 0))),
            // e1234
            ((other.group7()[0] * self.group1()[0]) + (other.group7()[1] * self.group1()[1]) + (other.group7()[2] * self.group1()[2]) - (self.group0()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       71        0
    //  no simd       60       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      136      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      161        0
    //    simd4        2        4        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      136      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e4315]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      195        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      173      212        0
    //  no simd      224      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group3()[3]) * -1.0),
                ((self.group1()[2] * other.group3()[3]) * -1.0),
                ((self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group3()[3]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      172        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      159      194        0
    //  no simd      225      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                ((self.group1()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiLine {}
impl Sandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      180        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      145      183        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      108        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       77      109        0
    //  no simd       77      111        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       50       72        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       47       69        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       35       57        0
    //  no simd       41       63        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       33        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       19       39        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      160        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      124      162        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      188        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      151      189        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      111        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       77      112        0
    //  no simd       77      114        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       36       57        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       50       72        0
    //  no simd       56       78        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       47       69        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      243      299        0
    //    simd2        5        6        0
    //    simd3       17       21        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      269      330        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group8()[0])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[2] * other.group8()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group5()[1])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group5()[2])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[3], other.group9()[2], other.group5()[1], other.group4()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group5()[2], other.group3()[3], other.group9()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group9()[1], other.group5()[0], other.group3()[3], other.group4()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group1(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group6()[1]) + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group7()[2])
                    + (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group6()[0])
                    + (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group6()[0]) - (self.group1()[0] * other.group7()[1])
                    + (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group1())
                + (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group1(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[1], other.group6()[3], other.group6()[3]]) * swizzle!(self.group1(), 2, 1, 2))
                - (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                + (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group9()[2]) + (self.group1()[0] * other[e45]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group9()[0]) + (self.group1()[0] * other.group4()[2]) + (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    + (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group1()[1] * other.group5()[1])
                    + (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group5()[2])
                    + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       58        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       35       60        0
    //  no simd       41       66        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      116        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       84      119        0
    //  no simd       90      127        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       33        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      119        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       87      121        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other[e4315])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      170        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      139      177        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group3()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      151      189        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiMotor {}
impl Sandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      163      201        0
    //  no simd      184      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      171      209        0
    //  no simd      216      254        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      150        0
    //    simd4        0        1        0
    // Totals...
    // yes simd      116      151        0
    //  no simd      116      154        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       52       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       79        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       85        0
    //  no simd       80      103        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       73        0
    //  no simd       60       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       62        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      155      193        0
    //  no simd      176      214        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      157      195        0
    //  no simd      184      222        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      161      199        0
    //  no simd      176      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) - (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      198        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      174      212        0
    //  no simd      216      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[2] * self.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group3()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 1, 2, 2))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      147        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      116      150        0
    //  no simd      116      159        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       52       74        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       74        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       60       81        0
    //  no simd       81      102        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group1(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      283      343        0
    //    simd2        7        8        0
    //    simd3       21       24        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      333      397        0
    //  no simd      448      519        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) - (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1]) + (other.group7()[1] * self.group1()[0]) - (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (self.group0()[3] * other[e1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])
                + (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[0] * self.group1()[3])
                    + (other.group5()[1] * self.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[1] * other.group9()[2])),
                ((other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group5()[0] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group9()[1])),
                ((self.group0()[2] * other.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other[e45]]) * self.group1())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group9()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group6()[1]) + (self.group0()[3] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[1] * other.group6()[0]) + (self.group0()[3] * other.group6()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group6()[3]]) * self.group0())
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group7()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group7()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) - (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group6()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[2] * other.group6()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group9()[0]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group9(), 1, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group9()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e1234
            (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group0()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       70        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       48       74        0
    //  no simd       60       86        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      162        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      136      174        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      161        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      127      165        0
    //  no simd      136      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      153      190        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      171      208        0
    //  no simd      225      262        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 3, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group3()[0]) - (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group3()[1]) - (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group3()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      202        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      179      217        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group3()[0]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group1()[3]) * other.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiPlane {}
impl Sandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       81        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       56       88        0
    //  no simd       73      107        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       92        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       65      101        0
    //  no simd       92      128        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) * -1.0),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                ((other.group2()[3] * self.group0()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       48       71        0
    //  no simd       48       74        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       41        0
    //  no simd       26       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       44        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       27       46        0
    //  no simd       33       52        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       28       48        0
    //  no simd       40       60        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       43        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       17        0
    //  no simd        8       23        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       75        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       55       82        0
    //  no simd       72      101        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[0]) - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       79        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       59       86        0
    //  no simd       76      105        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       81        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       55       87        0
    //  no simd       69      103        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       92        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       65      101        0
    //  no simd       92      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[1] * other.group3()[2])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[2] * other.group3()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                (self.group0()[2] * other.group2()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       66        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       48       70        0
    //  no simd       48       82        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       29       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       38        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       33       50        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       48        0
    //  no simd       40       57        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      123      184        0
    //    simd2        3        3        0
    //    simd3        9       11        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      144      207        0
    //  no simd      192      259        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([((self.group0()[3] * other.group1()[3]) * -1.0), (self.group0()[3] * other[e45])])
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group5()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[1]) + (other.group5()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group4()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])
                - (self.group0()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (self.group0()[0] * other[e1])),
                ((other.group8()[2] * self.group0()[0]) + (self.group0()[1] * other[e1])),
                ((other.group8()[0] * self.group0()[1]) + (self.group0()[2] * other[e1])),
                ((self.group0()[3] * other.group1()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group6(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * other.group7())
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (self.group0()[1] * other.group9()[2])),
                ((other.group4()[1] * self.group0()[3]) + (self.group0()[2] * other.group9()[0])),
                ((other.group4()[2] * self.group0()[3]) + (self.group0()[0] * other.group9()[1])),
                (-(other.group5()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group6()[2])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[1] * other.group6()[0])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (self.group0()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       43        0
    //  no simd       28       46        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       54        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       35       58        0
    //  no simd       41       68        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       62        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       38       63        0
    //  no simd       38       65        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e4315])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       96        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       69      105        0
    //  no simd       96      132        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[3]) * -1.0),
                ((self.group0()[2] * other.group3()[3]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[2] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                ((self.group0()[3] * other.group3()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group1()[0]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group1()[1]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group1()[2]) - (self.group0()[3] * other.group3()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       96        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       69      105        0
    //  no simd       96      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiScalar {}
impl Sandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       21        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       25        0
    //  no simd        0       36        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       19        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0       27        0
    //  no simd        0       49        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       16        0
    //  no simd        0       28        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       18        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       18        0
    //  no simd        0       24        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       15        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (other[e12345] * self[e12345] * -1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       11        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       17        0
    //  no simd        0       31        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       18        0
    //  no simd        0       34        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       19        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       23        0
    //  no simd        0       33        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       26        0
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0       32        0
    //  no simd        0       49        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(self[e12345]) * other.group0() * Simd32x2::from(-1.0)));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       15        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       16        0
    //  no simd        0       28        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       18        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       24        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       51        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       67        0
    //  no simd        0      105        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other[e45]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (other.group9()[3] * self[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (other.group1()[3] * self[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       18        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (other.group0()[3] * self[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (other.group0()[3] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       20        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       28        0
    //  no simd        0       52        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       28        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0       34        0
    //  no simd        0       52        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Circle {}
impl Sandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      202      244        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      211      253        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[2] * other.group1()[1]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group2()[3]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[0] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group2(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      236        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      215      257        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group3()[0])),
                ((self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group2()[3])
                    - (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group2()[3])
                    - (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[1])
                    - (self.group2()[2] * other.group2()[3])
                    - (other.group3()[1] * self.group1()[0])),
                ((self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      177        0
    //    simd3        1        2        0
    // Totals...
    // yes simd      138      179        0
    //  no simd      140      183        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      157      201        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      160      204        0
    //  no simd      169      213        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      168      211        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      178      221        0
    //  no simd      208      251        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (other.group1()[1] * self.group1()[0])),
                ((self.group2()[2] * other.group1()[2]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      222        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      182      224        0
    //  no simd      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      226        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      190      232        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      135      175        0
    //    simd3        1        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      142      183        0
    //  no simd      162      205        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group1()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      110        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       84      116        0
    //  no simd       84      130        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      234        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      201      243        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[1] * self.group1()[2]) - (self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(other.group2()[2] * self.group1()[0]) - (self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3])),
                (-(other.group2()[0] * self.group1()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      186      228        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      199      241        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group2()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group1()[0] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group1()[1] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group1()[2]) + (self.group1()[1] * other.group2()[1]) + (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      242        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      207      249        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (other.group2()[0] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      218      260        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      233      275        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group3()[2]) - (self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      177        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd      138      180        0
    //  no simd      140      187        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      194        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      158      198        0
    //  no simd      170      210        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      214        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      181      223        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                (self.group2()[2] * other.group1()[2]),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      226        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      185      227        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      222        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      184      230        0
    //  no simd      208      254        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      412      480        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      462      532        0
    //  no simd      576      650        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group2()[0] * other.group4()[0])
                    - (self.group2()[1] * other.group4()[1])
                    - (self.group2()[2] * other.group4()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group2()[0] * other[e45])
                    + (self.group2()[1] * other.group4()[2])
                    - (self.group2()[2] * other.group4()[1])
                    + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[2] * other.group4()[0])
                    + (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group2()[0] * other.group4()[1])
                    - (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    + (self.group1()[0] * other.group9()[1])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            (-(self.group2()[0] * other.group5()[0]) + (self.group2()[0] * other.group9()[0]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group9()[1])
                - (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group9()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) - (self.group2()[0] * other.group6()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    - (self.group2()[2] * other.group6()[1])
                    + (other.group8()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[1]) - (self.group2()[0] * other.group6()[2]) - (self.group2()[1] * other.group6()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    + (other.group8()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[2]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    + (other.group8()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group2(), 0, 0, 1))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))
                + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[2] * other.group4()[1])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group2()[0] * other.group4()[2]) + (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0]) + (self.group2()[2] * other[e45])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group2())
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group9()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group5()[2], other.group3()[3], other.group9()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group9()[1], other.group5()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[0], other.group5()[0]]) * swizzle!(self.group2(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[2], other.group5()[2], other.group9()[1]]) * swizzle!(self.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group6()[2])
                    + (other.group8()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[2] * self.group1()[2])
                - (self.group1()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      139      177        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      145      184        0
    //  no simd      162      203        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      139      181        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      147      190        0
    //  no simd      169      214        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      110        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       84      113        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      139      180        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      147      189        0
    //  no simd      169      213        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) * -1.0),
                ((self.group2()[1] * other[e4315]) * -1.0),
                ((self.group2()[2] * other[e4315]) * -1.0),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      242        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      222      264        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group3()[1])),
                ((self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      254        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      231      273        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                ((self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for CircleRotor {}
impl Sandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      213      255        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      226      268        0
    //  no simd      265      307        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0]) + (other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1]) + (other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group2()[3]) + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      201      243        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      228      270        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[3] * self.group2()[0]) - (other.group2()[1] * self.group1()[2]) + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[2] * self.group1()[0]) + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[2] * self.group2()[3]) + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (other.group2()[3] * self.group2()[0]) - (other.group3()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group2()[3] * self.group2()[1]) - (other.group3()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group2()[3] * self.group2()[2]) - (other.group3()[1] * self.group1()[0])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      167      211        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      217        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      180      221        0
    //  no simd      192      233        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      183      226        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      196      239        0
    //  no simd      235      278        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      198      240        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      201      243        0
    //  no simd      210      252        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      242        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      208      250        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[3] * self.group2()[1]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      149      183        0
    //    simd3        1        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      158      193        0
    //  no simd      184      221        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group1()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group2()[0]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group1()[3])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      131        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      105      137        0
    //  no simd      105      153        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      206      248        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      218      260        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group0()[2] * self.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                ((other.group2()[2] * self.group1()[2]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      197      239        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      214      256        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                (-(other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      214      256        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      224      266        0
    //  no simd      254      296        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(other.group2()[2] * self.group1()[2]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      217      259        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      240      282        0
    //  no simd      309      351        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group2()[0]),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      167      215        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      214        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      178      218        0
    //  no simd      190      230        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      231        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      199      242        0
    //  no simd      232      275        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                (self.group2()[3] * other.group1()[3]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      206      248        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      207      249        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      195      238        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      205      248        0
    //  no simd      235      278        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[3]) * -1.0),
                ((self.group0()[2] * other.group0()[3]) * -1.0),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[3] * other.group1()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      426      494        0
    //    simd2        1        1        0
    //    simd3       36       38        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      489      559        0
    //  no simd      640      714        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group2()[3])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])),
                ((other.group0()[0] * self.group2()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (other.group4()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group2()[0] * other[e45])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0]) - (other.group4()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3])
                    - (other.group4()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group2()[2] * other[e45])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group9(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            (-(other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                + (self.group2()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) - (other.group8()[0] * self.group2()[3]) + (other.group8()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group2()[1]) + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[1] * self.group2()[3])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group2()[2]) + (other.group8()[2] * self.group1()[3])
                    - (other.group8()[2] * self.group2()[3])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group2()[3] * other.group6()[3])),
            ]) + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group7())
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (other.group5()[2] * self.group1()[1]) - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group5()[0] * self.group1()[2]) - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group5()[1] * self.group1()[0]) - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group4())
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group2()[0] * other.group9()[2]) + (self.group2()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) + (self.group2()[0] * other.group9()[1])
                    - (self.group2()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group8()[0]) - (self.group1()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other[e1]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group8()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[2] * self.group1()[2])
                - (self.group1()[3] * other.group1()[3])
                - (self.group2()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      155      199        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      161      206        0
    //  no simd      178      225        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) * -1.0),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      196        0
    //    simd3        2        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      161      207        0
    //  no simd      189      237        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[0] * other.group0()[1]) * -1.0),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group2())
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      131        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd      105      134        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      158      193        0
    //    simd3        2        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      167      203        0
    //  no simd      192      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other[e4315]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other[e4315]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      254        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      239      281        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group3()[3]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[1] * other.group2()[3]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[2] * other.group2()[3]) + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group1()[2] * other.group3()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      216      258        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      242      284        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[0]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[3]]) * swizzle!(self.group2(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Dipole {}
impl Sandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      236        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      205      247        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1]) - (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[2] * other.group1()[1]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group2()[3]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      210      252        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      227      269        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group3()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group3(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group2()[1] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      174        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd      138      177        0
    //  no simd      140      184        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      205        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      163      207        0
    //  no simd      169      213        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group2()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      218        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      184      226        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * swizzle!(self.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[0])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      176      218        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      184      226        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[3]),
                (other.group0()[1] * self.group1()[3]),
                (other.group0()[2] * self.group1()[3]),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      177        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      142      184        0
    //  no simd      159      203        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      110        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       84      114        0
    //  no simd       84      124        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      242        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      207      249        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      202      244        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      211      253        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      200      242        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      207      249        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      222      264        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      236      278        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      178        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd      138      181        0
    //  no simd      140      188        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      205        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      163      207        0
    //  no simd      169      213        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      226        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      190      232        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      226        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      185      227        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                (-(self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      222        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      187      229        0
    //  no simd      208      250        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      382      445        0
    //    simd2        9        9        0
    //    simd3       36       40        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      444      511        0
    //  no simd      576      651        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group1()[3] * other.group3()[3]), ((self.group1()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[0] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[1] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            (-(self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group2()[1] * other.group9()[2]) + (self.group2()[2] * other.group5()[1]) + (self.group1()[0] * other.group9()[3])),
                ((self.group2()[0] * other.group5()[2]) + (self.group2()[2] * other.group9()[0]) + (self.group1()[1] * other.group9()[3])),
                ((self.group2()[0] * other.group9()[1]) + (self.group2()[1] * other.group5()[0]) + (self.group1()[2] * other.group9()[3])),
                ((self.group0()[2] * other.group3()[2]) - (self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group3()[3], other.group9()[2], other.group5()[1], other.group4()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group5()[2], other.group3()[3], other.group9()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group9()[1], other.group5()[0], other.group3()[3], other.group4()[2]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group2(), 0, 0, 1))
                - (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[1])
                    + (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0])
                    + (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group7()[0])
                    + (self.group1()[0] * other.group6()[2])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group2()[0] * other.group7()[1])
                    + (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group2()) + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group2(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[1], other.group6()[3], other.group6()[3]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group2(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) + (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group2()[0] * other.group4()[2]) + (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])
                    + (self.group2()[2] * other[e45])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[0] * other.group5()[0]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group5()[2])
                    + (self.group2()[2] * other.group9()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e1234
            (-(self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      151      190        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      139      178        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      147      187        0
    //  no simd      169      211        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      110        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       84      113        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      155      193        0
    //    simd3        2        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      159      198        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      250        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      228      270        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group3()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group2()[1] * other.group3()[3]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[2] * other.group3()[3]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      224      266        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      240      282        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DipoleInversion {}
impl Sandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      285      327        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      307      349        0
    //  no simd      373      415        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0]) + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1]) + (other.group2()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      293      335        0
    //    simd4       35       35        0
    // Totals...
    // yes simd      328      370        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[3])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      234      272        0
    //    simd4        1        2        0
    // Totals...
    // yes simd      235      274        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      248      295        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      253      300        0
    //  no simd      268      315        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      268      310        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      283      325        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group1()[2] * self.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group1()[0] * self.group3()[2])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[1] * self.group3()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[3] * self.group1()[0]) - (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      290      332        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      292      334        0
    //  no simd      298      340        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      264      306        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      280      322        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[3] * self.group1()[0]),
                (other.group0()[3] * self.group1()[1]),
                (other.group0()[3] * self.group1()[2]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group3()[0]]) * swizzle!(other.group1(), 1, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      282        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      244      290        0
    //  no simd      268      314        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group3()[0]),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      209      235        0
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd      209      241        0
    //  no simd      209      258        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      290      332        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      307      349        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group3()[0]) + (self.group0()[1] * other.group1()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      289      331        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      310      352        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1]) - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2]) - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0]) - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group3()[3]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      298      340        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      313      355        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1]) + (other.group1()[1] * self.group2()[2])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      297      339        0
    //    simd4       34       34        0
    // Totals...
    // yes simd      331      373        0
    //  no simd      433      475        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      234      275        0
    //    simd4        1        2        0
    // Totals...
    // yes simd      235      277        0
    //  no simd      238      283        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                (other.group0()[1] * self.group2()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      249      293        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      254      298        0
    //  no simd      269      313        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      272      315        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      286      329        0
    //  no simd      328      371        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1]) + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      286      328        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      289      331        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      265      306        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      281      322        0
    //  no simd      329      370        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[1])),
                0.0,
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      562      630        0
    //    simd2       11       11        0
    //    simd3       52       54        0
    //    simd4       39       39        0
    // Totals...
    // yes simd      664      734        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group1()[3] * other.group3()[3]) - (self.group3()[0] * other.group9()[0]) - (self.group3()[1] * other.group9()[1]) - (self.group3()[2] * other.group9()[2])),
                (-(self.group1()[3] * other.group6()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[0] * self.group3()[3])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[3])),
                (-(other.group0()[1] * self.group3()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[1] * self.group3()[3])
                    + (other.group8()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group3()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group6()[2]) - (other.group7()[1] * self.group1()[1])
                    + (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (self.group1()[3] * other[e1])
                - (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group3()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group2()[2]) + (self.group1()[0] * other.group9()[3]) + (self.group2()[1] * other.group9()[2]) + (self.group3()[0] * other.group9()[3])),
                ((other.group5()[2] * self.group2()[0]) + (self.group1()[1] * other.group9()[3]) + (self.group2()[2] * other.group9()[0]) + (self.group3()[1] * other.group9()[3])),
                ((other.group5()[0] * self.group2()[1]) + (self.group1()[2] * other.group9()[3]) + (self.group2()[0] * other.group9()[1]) + (self.group3()[2] * other.group9()[3])),
                (-(other.group5()[2] * self.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    - (self.group2()[3] * other.group9()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group3()[2], self.group1()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group3()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group9()[2]) + (self.group3()[2] * other.group9()[1])),
                ((self.group3()[0] * other.group9()[2]) - (self.group3()[2] * other.group9()[0])),
                (-(self.group3()[0] * other.group9()[1]) + (self.group3()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[2] * self.group2()[1])
                    - (self.group3()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[2])
                    - (self.group3()[1] * other.group6()[3])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (other.group7()[1] * self.group2()[0])
                    - (self.group3()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[2], self.group3()[2], self.group1()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group3()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group2()[1] * other.group1()[2]) - (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group6()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group6()[2]) - (self.group2()[2] * other.group1()[0]) - (self.group2()[2] * other.group6()[0])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3])
                    + (self.group0()[1] * other.group3()[2])
                    + (other.group4()[0] * self.group3()[3])
                    + (other.group5()[1] * self.group3()[2])
                    + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[1] * self.group3()[3])
                    + (other.group5()[2] * self.group3()[0])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3])
                    + (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group3()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group3()[1])
                    - (self.group3()[2] * other.group3()[2])
                    - (self.group3()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group5()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            ((other.group0()[0] * self.group2()[3])
                - (self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                + (other.group4()[0] * self.group3()[0])
                - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      244      287        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      250      293        0
    //  no simd      268      311        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      247      289        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      256      298        0
    //  no simd      283      325        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                ((self.group2()[3] * other[e2]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other[e2]) + (self.group3()[3] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group3()[1] * other[e2]) + (self.group3()[3] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other[e2]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      209      235        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      209      239        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      243      286        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      253      296        0
    //  no simd      283      326        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                ((self.group3()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      292      334        0
    //    simd4       39       39        0
    // Totals...
    // yes simd      331      373        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group3()[0] * other.group3()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group3()[1] * other.group3()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0]) - (self.group3()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[3] * other.group2()[0]) - (self.group3()[2] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group2()[3] * other.group2()[1]) - (self.group3()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group2()[3] * other.group2()[2]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group2()[3])
                    + (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group3()[0])),
                ((self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) - (self.group1()[3] * other.group3()[3])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group3()[1], self.group3()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[3], self.group3()[3], self.group1()[2]]) * swizzle!(other.group0(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      342        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      337      379        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[0] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group3()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[2] * other.group2()[1]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[2] * other.group3()[0])),
                ((self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group3()[3]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DualNum {}
impl Sandwich<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       23       59        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       30       67        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       33        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       14       49        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       20       52        0
    //  no simd       20       64        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       47        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       17       48        0
    //  no simd       17       50        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       20       50        0
    //  no simd       20       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       16       49        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(other[e12345]) * self.group0() * Simd32x2::from(-1.0)));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       44        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       18       47        0
    //  no simd       20       54        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       23       58        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       50        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       18       52        0
    //  no simd       20       56        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       58        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       24       61        0
    //  no simd       30       70        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       38        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       14       41        0
    //  no simd       14       50        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       20       50        0
    //  no simd       20       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       45        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       17       47        0
    //  no simd       17       51        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       51        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       20       54        0
    //  no simd       20       63        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41      105        0
    //    simd3        5        9        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       48      116        0
    //  no simd       64      140        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[0]) * -1.0),
                ((self.group0()[1] * other.group9()[1]) * -1.0),
                ((self.group0()[1] * other.group9()[2]) * -1.0),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))),
            // e5
            (self.group0()[1] * other.group9()[3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group8()[0] * -1.0),
                (self.group0()[1] * other.group8()[1] * -1.0),
                (self.group0()[1] * other.group8()[2] * -1.0),
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * other.group8()) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group5()[0]),
                (self.group0()[1] * other.group5()[1]),
                (self.group0()[1] * other.group5()[2]),
                ((self.group0()[1] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other[e1] * -1.0),
            ]),
            // e1234
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       44        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       45        0
    //  no simd       16       48        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       16       39        0
    //  no simd       16       51        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       38        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       16       41        0
    //  no simd       16       50        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       60        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       27       62        0
    //  no simd       33       68        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       52        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       21       57        0
    //  no simd       33       72        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for FlatPoint {}
impl Sandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      103        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       71      106        0
    //  no simd       80      115        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      112        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       77      117        0
    //  no simd       92      132        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       67        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       44       70        0
    //  no simd       44       79        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       36        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       40        0
    //  no simd       24       52        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       39        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       38        0
    //  no simd       21       44        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       14        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      106        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       67      108        0
    //  no simd       73      114        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      103        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       71      106        0
    //  no simd       80      115        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      103        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       67      105        0
    //  no simd       73      111        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      112        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       80      117        0
    //  no simd       95      132        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0]) + (other.group3()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1]) + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       70        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       44       74        0
    //  no simd       44       86        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       31        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3])]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       35        0
    //  no simd       24       44        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       46        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       52        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      189        0
    //    simd2        3        3        0
    //    simd3        6       11        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      148      214        0
    //  no simd      196      272        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group0()[3] * other.group3()[3]), ((self.group0()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group6()[1])),
                (-(other.group7()[0] * self.group0()[1]) + (other.group7()[1] * self.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group0()[2]) + (self.group0()[1] * other.group9()[2]) + (self.group0()[3] * other.group3()[0])),
                ((other.group5()[2] * self.group0()[0]) + (self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group3()[1])),
                ((other.group5()[0] * self.group0()[1]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group0(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group0(), 2, 1, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) * -1.0),
                ((self.group0()[3] * other.group1()[1]) * -1.0),
                ((self.group0()[3] * other.group1()[2]) * -1.0),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group6()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group6()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group8())
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) + (self.group0()[3] * other.group9()[3])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            (self.group0()[3] * other[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       37        0
    //  no simd       18       40        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       53       88        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       15        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       53       85        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      115        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       78      121        0
    //  no simd       96      139        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group3()[0]) * -1.0),
                ((self.group0()[3] * other.group3()[1]) * -1.0),
                ((self.group0()[3] * other.group3()[2]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      112        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       81      118        0
    //  no simd       99      136        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Flector {}
impl Sandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      188        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      160      196        0
    //  no simd      184      220        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      196        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      174      210        0
    //  no simd      216      252        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3]) - (other.group3()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3]) - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group3()[0] * self.group1()[1]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group1())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group0()[2])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 2, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      144        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      116      148        0
    //  no simd      116      160        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       52       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       76        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       82        0
    //  no simd       80      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 3, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       62       82        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       81        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       86        0
    //  no simd       80      101        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       71        0
    //  no simd       60       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      184        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      155      191        0
    //  no simd      176      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      187        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      157      196        0
    //  no simd      184      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group1()[0]) * -1.0),
                ((other.group1()[3] * self.group1()[1]) * -1.0),
                ((other.group1()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[2] * self.group1()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      188        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      158      194        0
    //  no simd      176      212        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      188        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      172      204        0
    //  no simd      220      252        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[1])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      145        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      116      148        0
    //  no simd      116      157        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       46       63        0
    //  no simd       52       72        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       56       76        0
    //  no simd       80      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       72        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       56       76        0
    //  no simd       68       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       60       76        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group0()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      296      359        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      341      406        0
    //  no simd      448      517        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[3] * other.group3()[3]) - (self.group1()[0] * other.group9()[0]) - (self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
                (-(self.group0()[3] * other.group6()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (other.group7()[0] * self.group1()[3]) + (other.group7()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group7()[0] * self.group0()[2])
                    - (other.group7()[1] * self.group1()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[2])),
                (-(other.group0()[1] * self.group1()[2]) + (other.group7()[1] * self.group0()[0])
                    - (other.group7()[2] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[0])),
                ((other.group7()[1] * self.group1()[1]) + (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group1()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group0()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[1])),
                ((other.group5()[2] * self.group0()[0])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])),
                ((other.group5()[0] * self.group0()[1])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])),
                ((other.group5()[2] * self.group1()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group0(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group0(), 2, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group9()[2]) + (self.group1()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group9()[1]) + (self.group1()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group6()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group6()[3])),
                (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group6()[3])),
                ((other.group7()[2] * self.group0()[2]) + (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group6()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group6()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group1()[3]) + (other.group5()[1] * self.group1()[2])),
                ((other.group4()[1] * self.group1()[3]) + (other.group5()[2] * self.group1()[0])),
                ((other.group4()[2] * self.group1()[3]) + (other.group5()[0] * self.group1()[1])),
                (-(other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) + (self.group0()[3] * other.group9()[3])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       71        0
    //  no simd       60       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      164        0
    //    simd4        2        4        0
    // Totals...
    // yes simd      130      168        0
    //  no simd      136      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other[e2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other[e2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other[e2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      136      176        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      191        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      170      209        0
    //  no simd      224      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) * -1.0),
                ((self.group1()[1] * other.group3()[3]) * -1.0),
                ((self.group1()[2] * other.group3()[3]) * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group1()[0] * other.group3()[2]) - (self.group1()[1] * other.group1()[3])),
                (-(self.group1()[1] * other.group3()[0]) - (self.group1()[2] * other.group1()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group3())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      188        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      174      206        0
    //  no simd      228      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group3()[0]) + (self.group1()[2] * other.group3()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group3()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group3()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Line {}
impl Sandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      156        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      184        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      148      186        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      111        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       77      112        0
    //  no simd       77      114        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       66        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       70        0
    //  no simd       56       82        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       47       69        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       55        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       41       67        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       33        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       19       45        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      164        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      127      165        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      118      156        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1]) + (self.group1()[2] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      168        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      136      174        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       77      116        0
    //  no simd       77      120        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       36       60        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       65        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       69        0
    //  no simd       56       81        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       47       69        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      257      315        0
    //    simd3       17       21        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      277      339        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group1()[0] * other.group4()[0])
                    - (self.group1()[1] * other.group4()[1])
                    - (self.group1()[2] * other.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) - (self.group1()[0] * other[e45])
                    + (self.group1()[1] * other.group4()[2])
                    - (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[0])
                    - (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    + (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group4()[1])
                    - (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) - (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group9()[0])
                - (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group9()[1])
                - (self.group1()[2] * other.group5()[2])
                + (self.group1()[2] * other.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])),
                (-(other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (self.group0()[1] * other.group5()[2]) + (self.group0()[2] * other.group5()[1]) + (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[2] * other.group5()[0])
                    + (self.group1()[0] * other.group4()[2])
                    + (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group5()[0]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    + (self.group1()[2] * other[e45])),
                ((self.group0()[0] * other.group9()[0])
                    + (self.group0()[1] * other.group9()[1])
                    + (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * self.group1())
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group9()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group5()[2], other.group3()[3], other.group9()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], other.group5()[0], other.group3()[3]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[0], other.group5()[0]]) * swizzle!(self.group1(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[2], other.group5()[2], other.group9()[1]]) * swizzle!(self.group1(), 1, 0, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group7()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1]) + (self.group0()[2] * other.group7()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       57        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       32       60        0
    //  no simd       41       69        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[0] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      122        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       87      125        0
    //  no simd       90      132        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       33        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      119        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       87      121        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[1] * other[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      145      183        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) - (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      165        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group2()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Motor {}
impl Sandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      154      192        0
    //  no simd      184      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group1()[0]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      194        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      171      209        0
    //  no simd      216      254        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group2()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      147        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      116      150        0
    //  no simd      116      159        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       52       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       70        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       60       78        0
    //  no simd       84      102        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 0, 2))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       58        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       64       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group1()[2])])
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       40       58        0
    //  no simd       40       70        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      189        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      155      196        0
    //  no simd      176      217        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                ((other.group0()[2] * self.group1()[0]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      189        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      160      198        0
    //  no simd      187      225        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[2] * self.group1()[2]) + (other.group2()[0] * self.group0()[0]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      152      190        0
    //  no simd      176      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      166        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      154      188        0
    //  no simd      220      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[2] * self.group0()[2])])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4        0        3        0
    // Totals...
    // yes simd      116      157        0
    //  no simd      116      166        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       52       78        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       70        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       60       78        0
    //  no simd       84      102        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       59       81        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       84        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      289      351        0
    //    simd3       20       22        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      334      399        0
    //  no simd      449      521        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[1] * self.group0()[3])
                    + (other.group7()[0] * self.group1()[0])
                    + (other.group7()[1] * self.group1()[1])
                    + (other.group7()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group1()[0])
                    - (other.group4()[1] * self.group1()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group5()[0] * self.group0()[0])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    + (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) - (other.group4()[1] * self.group1()[2]) + (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                ((other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) - (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                (-(other.group4()[0] * self.group1()[1]) + (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                0.0,
            ]) - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group4()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e5
            ((other.group0()[0] * self.group1()[3])
                - (other.group5()[0] * self.group1()[0])
                - (other.group5()[1] * self.group1()[1])
                - (other.group5()[2] * self.group1()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])
                - (self.group0()[2] * other.group3()[2])
                + (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group9()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[0] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group6()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group6()[1])),
                (-(self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group4()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[0], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[2], other.group9()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[0] * other.group9()[2]) + (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) * -1.0),
                ((self.group1()[1] * other.group1()[3]) * -1.0),
                ((self.group1()[2] * other.group1()[3]) * -1.0),
                ((self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group6()[2])),
            ]) - (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group6()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group8()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e1234
            ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       51       73        0
    //  no simd       60       82        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      165        0
    //    simd4        3        5        0
    // Totals...
    // yes simd      127      170        0
    //  no simd      136      185        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) * -1.0),
                ((self.group1()[1] * other.group0()[3]) * -1.0),
                ((self.group1()[2] * other.group0()[3]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      162        0
    //    simd4        2        3        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      136      174        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                (self.group0()[3] * other[e4315]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      197        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      173      214        0
    //  no simd      224      265        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      133      166        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      156      190        0
    //  no simd      225      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group1()[0], other.group3()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group1(), 3, 2, 2, 3))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 1, 2))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for MultiVector {}
impl Sandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1091     1167        0
    //    simd2       10       10        0
    //    simd3       39       42        0
    //    simd4       21       21        0
    // Totals...
    // yes simd     1161     1240        0
    //  no simd     1312     1397        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group1()[3] * self.group3()[3]), ((other.group1()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e5
            (-(self.group8()[0] * other.group1()[0]) - (self.group8()[1] * other.group1()[1]) - (self.group8()[2] * other.group1()[2]) - (other.group1()[3] * self[e1])
                + (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                + (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group2()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[3] * self.group3()[0])),
                (-(self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[3] * self.group3()[1])),
                (-(self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group1()[3], other.group1()[3]]) * self.group4())
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group1()[1] * self.group6()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2])
                    + (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group1()[2] * self.group6()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (other.group1()[0] * self.group6()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group1()[3], other.group1()[3]]) * self.group7())
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group6()[0])),
                ((other.group2()[0] * self.group6()[1]) + (other.group2()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (self.group4()[1] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group2()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    + (other.group2()[3] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (self.group4()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group9()[2])),
                (-(self.group5()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    - (other.group2()[0] * self.group9()[0])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            (-(other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1120     1198        0
    //    simd2        4        4        0
    //    simd3       48       50        0
    //    simd4       42       42        0
    // Totals...
    // yes simd     1214     1294        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])
                    - (other.group2()[3] * self[e1])
                    - (other.group3()[3] * self.group1()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    + (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[2] * self.group3()[1]) - (self.group4()[1] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (self.group4()[0] * other.group2()[2]) - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (self.group4()[0] * other.group2()[1]) + (self.group4()[1] * other.group2()[0])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    + (self.group4()[2] * other.group3()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            ((self.group0()[0] * other.group3()[3])
                - (self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                - (other.group3()[0] * self.group3()[0])
                - (other.group3()[1] * self.group3()[1])
                - (other.group3()[2] * self.group3()[2])
                + (other.group3()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group6()[1]) + (other.group3()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3]) + (other.group3()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2]) - (other.group3()[2] * self.group6()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group6()[0], self.group1()[0], self.group7()[2]]) * swizzle!(other.group2(), 2, 2, 1, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 1) * swizzle!(self.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                - (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1]) - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0]) + (other.group3()[0] * self.group1()[2]) - (other.group3()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0]) - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * self.group8())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (self.group4()[2] * other.group2()[1]) - (self.group5()[1] * other.group1()[2]) + (other.group2()[0] * self[e45])),
                (-(other.group0()[0] * self.group3()[2]) + (self.group4()[0] * other.group2()[2]) - (self.group5()[2] * other.group1()[0]) + (other.group2()[1] * self[e45])),
                (-(other.group0()[1] * self.group3()[0]) + (self.group4()[1] * other.group2()[0]) - (self.group5()[0] * other.group1()[1]) + (other.group2()[2] * self[e45])),
                ((other.group0()[2] * self.group3()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[2] * other.group2()[2]) - (self.group5()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group9())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group9(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group9()[1])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) - (other.group2()[0] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group9()[0])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0])),
                ((other.group2()[2] * self.group6()[2]) + (other.group3()[3] * self.group6()[3])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group8()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[1] * other.group2()[3])
                + (other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                - (self.group7()[0] * other.group3()[0])
                + (self.group7()[1] * other.group1()[1])
                - (self.group7()[1] * other.group3()[1])
                + (self.group7()[2] * other.group1()[2])
                - (self.group7()[2] * other.group3()[2])
                + (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group6()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      999     1073        0
    //    simd2        1        2        0
    //    simd3        5        9        0
    //    simd4        2        2        0
    // Totals...
    // yes simd     1007     1086        0
    //  no simd     1024     1112        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) * -1.0),
                ((other.group0()[0] * self.group8()[1]) * -1.0),
                ((other.group0()[0] * self.group8()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[0] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (other.group0()[1] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group8()[0]),
                (other.group0()[0] * self.group8()[1]),
                (other.group0()[0] * self.group8()[2]),
                ((other.group0()[0] * self[e1]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self.group9()[3]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1022     1095        0
    //    simd2        1        1        0
    //    simd3        8       12        0
    //    simd4       11       11        0
    // Totals...
    // yes simd     1042     1119        0
    //  no simd     1092     1177        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
                (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                ((self.group4()[0] * other.group0()[2]) - (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (other.group0()[3] * self[e45] * -1.0),
            ]),
            // e5
            (-(self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                + (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group6()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group0(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 0, 0, 0, 3))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self[e45]),
                (other.group0()[1] * self[e45]),
                (other.group0()[2] * self[e45]),
                ((self.group4()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self[e1])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e1234
            (other.group0()[3] * self.group1()[3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1049     1122        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       26       26        0
    // Totals...
    // yes simd     1099     1174        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2]) - (other.group1()[3] * self.group1()[3])),
                (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group1()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) - (self.group5()[1] * other.group1()[2]) + (other.group0()[0] * self[e45])),
                ((self.group4()[0] * other.group0()[2]) + (self.group5()[1] * other.group0()[3]) - (self.group5()[2] * other.group1()[0]) + (other.group0()[1] * self[e45])),
                ((self.group4()[1] * other.group0()[0]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e5
            ((self.group0()[0] * other.group1()[3])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                + (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1]) - (other.group1()[3] * self.group6()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group1()[3], other.group1()[2]]) * swizzle!(self.group6(), 0, 0, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group0(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e45]) + (other.group1()[2] * self.group9()[1])),
                ((other.group0()[1] * self[e45]) + (other.group1()[0] * self.group9()[2])),
                ((other.group0()[2] * self[e45]) + (other.group1()[1] * self.group9()[0])),
                (-(self.group4()[2] * other.group0()[2]) - (self.group5()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1]) + (other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0]) + (other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self[e1]) + (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e1234
            (-(self.group7()[0] * other.group1()[0]) - (self.group7()[1] * other.group1()[1]) - (self.group7()[2] * other.group1()[2]) + (other.group0()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1083     1153        0
    //    simd2        5        6        0
    //    simd3       17       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd     1107     1182        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group6()[3]) + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2]) + (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                + (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                + (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group5()[2])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group5()[1])),
                ((self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group5()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group5()[0])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group1()[0] * self.group5()[1])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group5()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group9()[1]) - (other.group0()[2] * self.group9()[2])
                    + (other.group1()[0] * self.group4()[0])
                    + (other.group1()[1] * self.group4()[1])
                    + (other.group1()[2] * self.group4()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group1(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[1] * self.group6()[2]) - (other.group0()[2] * self.group6()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group6()[2]) + (other.group0()[2] * self.group6()[0]) - (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group6()[0]) + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group1())
                - (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[1], self.group6()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 2, 1))
                + (Simd32x3::from([self.group6()[2], self.group1()[2], self.group6()[1]]) * swizzle!(other.group1(), 1, 0, 0))
                + (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group9()[2]) - (other.group1()[0] * self[e45]) - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group9()[0]) + (other.group1()[0] * self.group4()[2])
                    - (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                ((other.group0()[0] * self.group9()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group4()[1]) + (other.group1()[1] * self.group4()[0])
                    - (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group5()[0])
                    - (other.group1()[1] * self.group5()[1])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group5()[2])
                    - (other.group1()[2] * self.group9()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1057     1131        0
    //    simd2        7        8        0
    //    simd3       23       26        0
    //    simd4       19       19        0
    // Totals...
    // yes simd     1106     1184        0
    //  no simd     1216     1301        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group1()[2])
                    + (self.group7()[2] * other.group1()[1])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) + (self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group1()[0])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1])
                    + (self.group7()[1] * other.group1()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e5
            ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self[e1])
                + (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                + (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                + (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])
                - (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group1()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    + (other.group1()[3] * self.group9()[1])),
                ((other.group0()[2] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group9()[2])),
                ((other.group0()[2] * self.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group4()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self[e45]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group4()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group1()[1]) + (other.group0()[1] * self.group6()[2]) + (other.group0()[3] * self.group6()[0]) + (other.group1()[0] * self.group1()[3])),
                ((self.group7()[1] * other.group1()[3]) + (other.group0()[2] * self.group6()[0]) + (other.group0()[3] * self.group6()[1]) + (other.group1()[1] * self.group1()[3])),
                ((self.group7()[2] * other.group1()[3]) + (other.group0()[0] * self.group6()[1]) + (other.group0()[3] * self.group6()[2]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[3]]) * other.group0())
                + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group6()[0])),
                ((other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group9()[2]) + (other.group0()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group9()[0]) + (other.group0()[3] * self.group9()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group9()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group4()[2], self.group4()[1], self.group4()[2], self.group5()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group9()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1004     1082        0
    //    simd2        3        3        0
    //    simd3        9       11        0
    //    simd4       14       14        0
    // Totals...
    // yes simd     1030     1110        0
    //  no simd     1093     1177        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([((other.group0()[3] * self.group1()[3]) * -1.0), (other.group0()[3] * self[e45])])
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group5()[1] * other.group0()[2]) * -1.0),
                ((self.group5()[2] * other.group0()[0]) * -1.0),
                ((self.group5()[0] * other.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e5
            ((self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                + (other.group0()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group0()[3] * self.group1()[0]),
                (other.group0()[3] * self.group1()[1]),
                (other.group0()[3] * self.group1()[2]),
                0.0,
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * self.group7())
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group9()[1]),
                (other.group0()[0] * self.group9()[2]),
                (other.group0()[1] * self.group9()[0]),
                ((self.group5()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group6()[3])])
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1234
            (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      992     1047        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd      992     1063        0
    //  no simd      992     1101        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e12345]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group9()[3] * other[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group4()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1100     1178        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       19       19        0
    // Totals...
    // yes simd     1154     1234        0
    //  no simd     1280     1364        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (other.group2()[0] * self.group7()[0])
                    + (other.group2()[1] * self.group7()[1])
                    + (other.group2()[2] * self.group7()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group2()[0] * self[e45])
                    + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    + (self.group5()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0]) - (other.group2()[0] * self.group4()[2])
                    + (other.group2()[1] * self[e45])
                    + (other.group2()[2] * self.group4()[0])
                    + (self.group5()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3])
                    + (other.group2()[0] * self.group4()[1])
                    - (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (self.group5()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            (-(other.group2()[0] * self.group5()[0])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group5()[1])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group5()[2])
                - (other.group2()[2] * self.group9()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 2))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                + (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (other.group2()[0] * self[e45]) + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    - (self.group5()[1] * other.group1()[2])
                    - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group2()[0] * self.group4()[2]) + (other.group2()[1] * self[e45]) + (other.group2()[2] * self.group4()[0])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) + (other.group2()[0] * self.group4()[1]) - (other.group2()[1] * self.group4()[0]) + (other.group2()[2] * self[e45])
                    - (self.group5()[0] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0]) - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group6()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group6()[2])
                    + (self.group8()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                + (self.group7()[1] * other.group1()[1])
                + (self.group7()[2] * other.group1()[2])
                + (other.group1()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1094     1172        0
    //    simd2        1        1        0
    //    simd3       36       38        0
    //    simd4       27       27        0
    // Totals...
    // yes simd     1158     1238        0
    //  no simd     1312     1396        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[1] * other.group2()[3])
                    + (other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])),
                ((self.group0()[0] * other.group2()[3])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1])
                    - (self.group4()[1] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0]) - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (self.group4()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group9()[2])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            (-(self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                + (other.group2()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group2(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group6()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) + (self.group5()[0] * other.group2()[3]) - (self.group5()[1] * other.group1()[2]) - (other.group1()[3] * self.group9()[0])
                    + (other.group2()[0] * self[e45])),
                ((self.group4()[0] * other.group2()[2]) + (self.group5()[1] * other.group2()[3]) - (self.group5()[2] * other.group1()[0]) - (other.group1()[3] * self.group9()[1])
                    + (other.group2()[1] * self[e45])),
                ((self.group4()[1] * other.group2()[0]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group2()[3]) - (other.group1()[3] * self.group9()[2])
                    + (other.group2()[2] * self[e45])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[2] * other.group2()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) - (other.group2()[0] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0])),
                (-(other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self[e1])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group8()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                + (self.group7()[1] * other.group1()[1])
                + (self.group7()[2] * other.group1()[2])
                + (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1110     1183        0
    //    simd2        9        9        0
    //    simd3       36       40        0
    //    simd4       11       11        0
    // Totals...
    // yes simd     1166     1243        0
    //  no simd     1280     1365        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group1()[3] * self.group3()[3]), ((other.group1()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))),
            // e5
            ((other.group2()[0] * self.group1()[0]) - (other.group2()[0] * self.group6()[0]) + (other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group3()[3]) + (other.group2()[1] * self.group5()[2]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group5()[1])
                    + (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])),
                (-(other.group2()[0] * self.group5()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group5()[0])
                    + (other.group2()[2] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group2()[0] * self.group5()[1]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group5()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group9()[3])),
                (-(other.group0()[2] * self.group3()[2])
                    + (other.group2()[0] * self.group4()[0])
                    + (other.group2()[1] * self.group4()[1])
                    + (other.group2()[2] * self.group4()[2])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group2(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[1] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) + (other.group0()[2] * self.group8()[0])
                    - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group2())
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group6()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 2, 1))
                + (Simd32x3::from([self.group6()[2], self.group1()[2], self.group6()[1]]) * swizzle!(other.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group2()[0] * self[e45]) - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])),
                ((other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group2()[0] * self.group4()[2])
                    - (other.group2()[1] * self[e45])
                    - (other.group2()[2] * self.group4()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1]) + (other.group2()[1] * self.group4()[0])
                    - (other.group2()[2] * self[e45])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[0] * self.group5()[0])
                    - (other.group2()[1] * self.group5()[1])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group5()[2])
                    - (other.group2()[2] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1120     1198        0
    //    simd2       11       11        0
    //    simd3       54       56        0
    //    simd4       34       34        0
    // Totals...
    // yes simd     1219     1299        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group1()[3] * self.group3()[3]) - (other.group3()[0] * self.group9()[0]) - (other.group3()[1] * self.group9()[1]) - (other.group3()[2] * self.group9()[2])),
                (-(other.group1()[3] * self.group6()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (self.group7()[0] * other.group3()[3])
                    - (self.group7()[1] * other.group2()[2])
                    - (self.group8()[0] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) + (self.group7()[1] * other.group3()[3])
                    - (self.group7()[2] * other.group2()[0])
                    - (self.group8()[1] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group6()[2])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (self.group7()[2] * other.group3()[3])
                    - (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group3()[1] * self.group6()[0])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[3]]) * other.group2())
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (other.group1()[3] * self[e1])
                + (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                + (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (other.group3()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group3()[3]) - (self.group5()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[3] * self.group9()[1])),
                (-(self.group5()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[3] * self.group9()[2])),
                (-(other.group0()[2] * self.group3()[2])
                    - (self.group5()[2] * other.group3()[2])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    - (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group9()[2]) - (other.group3()[2] * self.group9()[1])),
                (-(other.group3()[0] * self.group9()[2]) + (other.group3()[2] * self.group9()[0])),
                ((other.group3()[0] * self.group9()[1]) - (other.group3()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    - (other.group3()[0] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2])
                    + (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (self.group7()[0] * other.group2()[2])
                    + (self.group8()[1] * other.group2()[3])
                    - (other.group3()[1] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[1] * other.group2()[0])
                    + (self.group8()[2] * other.group2()[3])
                    - (other.group3()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group6()[0])),
                ((other.group2()[0] * self.group6()[1]) + (other.group2()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group8(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group8(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[3]) - (self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (other.group1()[1] * self.group9()[2])),
                ((other.group0()[1] * self.group9()[3]) - (self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1]) - (self.group4()[2] * other.group3()[3]) - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])),
                (-(self.group5()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    - (other.group2()[0] * self.group9()[0])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[3]]) * self.group3())
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other.group2()[3]) - (other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1])
                + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                + (other.group1()[3] * self[e45])
                - (other.group2()[3] * self.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1005     1084        0
    //    simd3        5        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd     1011     1094        0
    //  no simd     1024     1115        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group9()[0]) * -1.0),
                ((other.group0()[1] * self.group9()[1]) * -1.0),
                ((other.group0()[1] * self.group9()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * self.group3())),
            // e5
            (other.group0()[1] * self.group9()[3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group8()[0] * -1.0),
                (other.group0()[1] * self.group8()[1] * -1.0),
                (other.group0()[1] * self.group8()[2] * -1.0),
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group6()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * self.group8()) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group5()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group5()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group5()[2])),
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self[e1] * -1.0),
            ]),
            // e1234
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1027     1102        0
    //    simd2        3        3        0
    //    simd3        8       11        0
    //    simd4        8        8        0
    // Totals...
    // yes simd     1046     1124        0
    //  no simd     1089     1173        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group0()[3] * self.group3()[3]), ((other.group0()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group6()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e5
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group5()[1] * other.group0()[2]) - (other.group0()[2] * self.group9()[1]) - (other.group0()[3] * self.group3()[0])),
                (-(self.group5()[2] * other.group0()[0]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[3] * self.group3()[1])),
                (-(self.group5()[0] * other.group0()[1]) - (other.group0()[1] * self.group9()[0]) - (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                ((self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])),
                ((self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3])),
                ((self.group4()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])),
            ]) - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (other.group0()[3] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1070     1149        0
    //    simd2        4        4        0
    //    simd3       22       24        0
    //    simd4       18       18        0
    // Totals...
    // yes simd     1114     1195        0
    //  no simd     1216     1301        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[3] * self.group3()[3]) - (other.group1()[0] * self.group9()[0]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
                (-(other.group0()[3] * self.group6()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[3] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[2] * other.group1()[3]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group1()[3])
                + (self.group8()[0] * other.group1()[0])
                + (self.group8()[1] * other.group1()[1])
                + (self.group8()[2] * other.group1()[2])
                + (other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])
                - (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group1()[3]) - (self.group5()[1] * other.group0()[2]) - (other.group0()[2] * self.group9()[1]) - (other.group0()[3] * self.group3()[0])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group1()[3]) - (self.group5()[2] * other.group0()[0]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[3] * self.group9()[1])),
                (-(self.group5()[0] * other.group0()[1]) + (self.group5()[2] * other.group1()[3])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[3] * self.group9()[2])),
                (-(self.group5()[2] * other.group1()[2]) - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group0()[1]) - (other.group1()[0] * self.group6()[3]) - (other.group1()[1] * self.group1()[2])),
                ((self.group7()[0] * other.group0()[2]) - (other.group1()[1] * self.group6()[3]) - (other.group1()[2] * self.group1()[0])),
                ((self.group7()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group6()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) + (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])
                    - (self.group5()[1] * other.group1()[2])),
                (-(self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3])
                    - (self.group5()[2] * other.group1()[0])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[2] * other.group1()[3]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1081     1153        0
    //    simd3       17       21        0
    //    simd4        5        5        0
    // Totals...
    // yes simd     1103     1179        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group6()[0])
                    + (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group6()[2])
                    + (other.group1()[0] * self.group7()[0])
                    + (other.group1()[1] * self.group7()[1])
                    + (other.group1()[2] * self.group7()[2])),
                (-(other.group0()[0] * self.group5()[0])
                    - (other.group0()[1] * self.group5()[1])
                    - (other.group0()[2] * self.group5()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) - (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group3()[0])
                - (other.group0()[1] * self.group3()[1])
                - (other.group0()[2] * self.group3()[2])
                - (other.group1()[0] * self.group5()[0])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group5()[1])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group5()[2])
                - (other.group1()[2] * self.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))),
            // e41, e42, e43
            (-(Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group0()[1] * self.group5()[2]) - (other.group0()[2] * self.group5()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                ((self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group5()[2]) + (other.group0()[2] * self.group5()[0]) - (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) - (other.group0()[1] * self.group5()[0]) + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group9()[1]) + (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group1(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group1(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group7()[2]) - (other.group1()[2] * self.group7()[1])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group7()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group1()[0] * self.group7()[1]) - (other.group1()[1] * self.group7()[0]) + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2]) - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group7()[0]) + (other.group0()[1] * self.group7()[1]) + (other.group0()[2] * self.group7()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1057     1130        0
    //    simd3       20       22        0
    //    simd4       26       26        0
    // Totals...
    // yes simd     1103     1178        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[1] * other.group0()[3])
                    + (self.group7()[0] * other.group1()[0])
                    + (self.group7()[1] * other.group1()[1])
                    + (self.group7()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group6()[0])
                    + (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[2] * other.group0()[2])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) - (self.group4()[1] * other.group1()[2]) + (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                ((self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group1()[3]) - (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                (-(self.group4()[0] * other.group1()[1]) + (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                0.0,
            ]) - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e5
            ((self.group0()[0] * other.group1()[3])
                - (self.group5()[0] * other.group1()[0])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[2] * other.group1()[2])
                - (other.group0()[0] * self.group3()[0])
                - (other.group0()[1] * self.group3()[1])
                - (other.group0()[2] * self.group3()[2])
                + (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group9()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group6()[1]) + (other.group1()[3] * self.group1()[0]) - (other.group1()[3] * self.group6()[0])),
                ((other.group1()[1] * self.group6()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1]) - (other.group1()[3] * self.group6()[1])),
                ((other.group1()[1] * self.group6()[0]) + (other.group1()[2] * self.group6()[3]) + (other.group1()[3] * self.group1()[2]) - (other.group1()[3] * self.group6()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group6()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group6()[0], self.group1()[0], self.group7()[2]]) * swizzle!(other.group1(), 2, 2, 1, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 0, 0, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                ((self.group4()[1] * other.group1()[3]) + (other.group1()[1] * self[e45])),
                ((self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                (-(self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group9()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) + (other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0]) - (other.group1()[0] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) + (other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group8()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1314     1392        0
    //    simd2       16       16        0
    //    simd3      114      116        0
    //    simd4       74       74        0
    // Totals...
    // yes simd     1518     1598        0
    //  no simd     1984     2068        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group0()[1])
                    + (other.group7()[0] * self.group8()[0])
                    + (other.group7()[1] * self.group8()[1])
                    + (other.group7()[2] * self.group8()[2])
                    + (other.group8()[0] * self.group7()[0])
                    + (other.group8()[1] * self.group7()[1])
                    + (other.group8()[2] * self.group7()[2])
                    - (other.group1()[3] * self[e1])
                    + (other.group3()[3] * self.group3()[3])
                    + (other.group6()[0] * self.group6()[0])
                    + (other.group6()[1] * self.group6()[1])
                    + (other.group6()[2] * self.group6()[2])
                    - (other.group9()[0] * self.group9()[0])
                    - (other.group9()[1] * self.group9()[1])
                    - (other.group9()[2] * self.group9()[2])
                    - (self.group1()[3] * other[e1])),
                ((other.group0()[1] * self.group0()[0])
                    - (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group3()[2])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[3] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[0])
                    + (other.group9()[1] * self.group1()[1])
                    + (other.group9()[2] * self.group1()[2])
                    + (other[e1] * self[e45])
                    + (other[e45] * self[e1])),
            ]) + (Simd32x2::from(other.group0()[0]) * self.group0())
                - (Simd32x2::from(other.group4()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group4()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group4()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group5()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group5()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group5()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))
                + (Simd32x2::from(other.group9()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                - (Simd32x2::from(self.group6()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group9()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group9()[0]) - (other.group4()[0] * self[e1]) - (other.group4()[1] * self.group8()[2]) + (other.group4()[2] * self.group8()[1])
                    - (other.group7()[0] * self.group9()[3])
                    + (other.group7()[2] * self.group3()[1])
                    + (other.group8()[1] * self.group4()[2])
                    - (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    + (self.group5()[0] * other.group6()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group7()[0] * other.group9()[3])
                    - (self.group7()[1] * other.group3()[2])
                    + (self.group7()[2] * other.group3()[1])
                    - (self.group8()[0] * other[e45])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group9()[2] * self.group6()[1])),
                (-(other.group0()[1] * self.group9()[1]) + (other.group4()[0] * self.group8()[2]) - (other.group4()[1] * self[e1]) - (other.group4()[2] * self.group8()[0])
                    + (other.group7()[0] * self.group3()[2])
                    - (other.group7()[1] * self.group9()[3])
                    - (other.group8()[0] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    + (self.group5()[1] * other.group6()[3])
                    - (self.group5()[2] * other.group1()[0])
                    + (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group9()[3])
                    - (self.group7()[2] * other.group3()[0])
                    - (self.group8()[1] * other[e45])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group9()[0] * self.group6()[2])),
                (-(other.group0()[1] * self.group9()[2]) - (other.group4()[0] * self.group8()[1]) + (other.group4()[1] * self.group8()[0]) - (other.group4()[2] * self[e1])
                    + (other.group7()[1] * self.group3()[0])
                    - (other.group7()[2] * self.group9()[3])
                    + (other.group8()[0] * self.group4()[1])
                    - (other.group8()[1] * self.group4()[0])
                    + (self.group4()[2] * other[e1])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group6()[3])
                    - (self.group7()[0] * other.group3()[1])
                    + (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group9()[3])
                    - (self.group8()[2] * other[e45])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group9()[1] * self.group6()[0])),
                ((self.group0()[1] * other[e45])
                    - (other.group4()[1] * self.group1()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group6()[2])
                    - (other.group5()[0] * self.group7()[0])
                    - (other.group5()[1] * self.group7()[1])
                    - (other.group5()[2] * self.group7()[2])
                    - (other.group7()[0] * self.group5()[0])
                    - (other.group7()[1] * self.group5()[1])
                    + (other.group7()[1] * self.group9()[1])
                    - (other.group7()[2] * self.group5()[2])
                    + (other.group7()[2] * self.group9()[2])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    - (self.group4()[2] * other.group6()[2])
                    - (self.group7()[1] * other.group9()[1])
                    - (self.group7()[2] * other.group9()[2])
                    - (other.group6()[3] * self[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from(self.group6()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group9(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))),
            // e5
            ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group9()[3]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group9()[3])
                - (other.group5()[0] * self.group8()[0])
                - (other.group5()[1] * self.group8()[1])
                - (other.group5()[2] * self.group8()[2])
                - (other.group8()[0] * self.group5()[0])
                - (other.group8()[0] * self.group9()[0])
                - (other.group8()[1] * self.group5()[1])
                - (other.group8()[1] * self.group9()[1])
                - (other.group8()[2] * self.group5()[2])
                - (other.group8()[2] * self.group9()[2])
                + (self.group8()[0] * other.group9()[0])
                + (self.group8()[1] * other.group9()[1])
                + (self.group8()[2] * other.group9()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group3()[0] * self.group1()[0])
                - (other.group3()[0] * self.group6()[0])
                + (other.group3()[1] * self.group1()[1])
                - (other.group3()[1] * self.group6()[1])
                + (other.group3()[2] * self.group1()[2])
                - (other.group3()[2] * self.group6()[2])
                - (other.group3()[3] * self[e1])
                - (other.group6()[0] * self.group3()[0])
                - (other.group6()[1] * self.group3()[1])
                - (other.group6()[2] * self.group3()[2])
                + (other.group6()[3] * self.group9()[3])
                - (other.group9()[3] * self.group6()[3])
                + (self.group3()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[0])
                    + (other.group5()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group6()[1])
                    + (self.group5()[0] * other.group9()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group8()[1] * other.group1()[2])
                    + (other.group9()[2] * self.group3()[1])
                    + (other.group9()[3] * self.group9()[0])
                    + (self.group1()[0] * other[e1])),
                (-(other.group0()[1] * self.group8()[1])
                    + (other.group5()[2] * self.group3()[0])
                    + (other.group8()[1] * self.group6()[3])
                    + (self.group5()[1] * other.group9()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group9()[0] * self.group3()[2])
                    + (other.group9()[3] * self.group9()[1])
                    + (self.group1()[1] * other[e1])),
                (-(other.group0()[1] * self.group8()[2]) + (other.group5()[0] * self.group3()[1]) + (other.group8()[2] * self.group6()[3])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group9()[3])
                    + (self.group8()[0] * other.group1()[1])
                    + (other.group9()[1] * self.group3()[0])
                    + (other.group9()[3] * self.group9()[2])
                    + (self.group1()[2] * other[e1])),
                (-(other.group4()[2] * self.group3()[2]) - (other.group5()[1] * self.group9()[1]) - (other.group5()[2] * self.group9()[2])
                    + (other.group7()[0] * self.group8()[0])
                    + (other.group7()[1] * self.group8()[1])
                    + (other.group7()[2] * self.group8()[2])
                    - (self.group5()[2] * other.group9()[2])
                    - (other.group6()[2] * self.group1()[2])
                    - (other.group9()[3] * self[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group0()[0]) * other.group3())
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))
                + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group6(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group6(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group6(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group6(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group9(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group9(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group6(), 0, 1, 2, 2))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group4()) - (Simd32x3::from(other.group0()[1]) * self.group7()) + (Simd32x3::from(self.group0()[0]) * other.group4())
                - (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e45]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group6()[1] * self.group6()[2])
                    + (other.group6()[2] * self.group6()[1])
                    + (other.group9()[1] * self.group9()[2])
                    - (other.group9()[2] * self.group9()[1])),
                ((other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0]) + (other.group6()[0] * self.group6()[2])
                    - (other.group6()[2] * self.group6()[0])
                    - (other.group9()[0] * self.group9()[2])
                    + (other.group9()[2] * self.group9()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) - (other.group6()[0] * self.group6()[1])
                    + (other.group6()[1] * self.group6()[0])
                    + (other.group9()[0] * self.group9()[1])
                    - (other.group9()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * self.group8())
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other[e1]) * self.group7())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                + (swizzle!(other.group7(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                + (swizzle!(other.group8(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group5()[0]) + (self.group0()[1] * other.group5()[0]) + (other.group4()[0] * self[e1]) + (other.group4()[1] * self.group8()[2])
                    - (other.group4()[2] * self.group8()[1])
                    - (other.group5()[2] * self.group6()[1])
                    + (other.group8()[1] * self.group4()[2])
                    - (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    - (self.group5()[1] * other.group6()[2])
                    + (self.group7()[2] * other.group3()[1])
                    + (self.group8()[0] * other[e45])
                    - (other.group9()[0] * self.group6()[3])),
                ((other.group0()[1] * self.group5()[1]) + (self.group0()[1] * other.group5()[1]) - (other.group4()[0] * self.group8()[2])
                    + (other.group4()[1] * self[e1])
                    + (other.group4()[2] * self.group8()[0])
                    - (other.group5()[0] * self.group6()[2])
                    - (other.group8()[0] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    - (self.group5()[2] * other.group6()[0])
                    + (self.group7()[0] * other.group3()[2])
                    + (self.group8()[1] * other[e45])
                    - (other.group9()[1] * self.group6()[3])),
                ((other.group0()[1] * self.group5()[2]) + (self.group0()[1] * other.group5()[2]) + (other.group4()[0] * self.group8()[1]) - (other.group4()[1] * self.group8()[0])
                    + (other.group4()[2] * self[e1])
                    - (other.group5()[1] * self.group6()[0])
                    + (other.group8()[0] * self.group4()[1])
                    - (other.group8()[1] * self.group4()[0])
                    + (self.group4()[2] * other[e1])
                    - (self.group5()[0] * other.group6()[1])
                    + (self.group7()[1] * other.group3()[0])
                    + (self.group8()[2] * other[e45])
                    - (other.group9()[2] * self.group6()[3])),
                ((other.group4()[0] * self.group8()[0]) + (other.group4()[1] * self.group8()[1]) + (other.group4()[2] * self.group8()[2]) - (other.group5()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group8()[0] * self.group4()[0])
                    - (other.group8()[1] * self.group4()[1])
                    - (other.group8()[2] * self.group4()[2])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other[e45] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group6())
                + (Simd32x4::from(self.group0()[0]) * other.group6())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]) * swizzle!(self.group9(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group1()[3]]) * self.group9())
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]) * swizzle!(other.group9(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group7())
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group1()[3]) * self.group5())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])
                    + (other.group3()[1] * self.group6()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group6()[1] * self.group3()[2])
                    - (other.group6()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[2] * self.group6()[0])
                    - (other.group6()[0] * self.group3()[2])
                    + (other.group6()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])
                    + (other.group3()[0] * self.group6()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group6()[0] * self.group3()[1])
                    - (other.group6()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group8())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group8())
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e1]) * self.group5())
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                - (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                - (swizzle!(other.group8(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group4()[0] * self.group9()[3]) + (other.group5()[1] * self.group9()[2]) - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    + (other.group8()[0] * self.group1()[3])
                    + (other.group8()[1] * self.group7()[2])
                    - (other.group8()[2] * self.group7()[1])
                    - (self.group4()[0] * other.group9()[3])
                    + (self.group4()[1] * other.group3()[2])
                    + (self.group5()[0] * other.group3()[3])
                    - (self.group5()[1] * other.group9()[2])
                    - (self.group8()[0] * other.group1()[3])
                    - (other.group1()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) + (other.group4()[1] * self.group9()[3]) + (other.group5()[2] * self.group9()[0]) + (other.group7()[0] * self.group8()[2])
                    - (other.group7()[2] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[2])
                    + (other.group8()[1] * self.group1()[3])
                    + (other.group8()[2] * self.group7()[0])
                    - (self.group4()[1] * other.group9()[3])
                    + (self.group4()[2] * other.group3()[0])
                    + (self.group5()[1] * other.group3()[3])
                    - (self.group5()[2] * other.group9()[0])
                    - (self.group8()[1] * other.group1()[3])
                    - (other.group1()[0] * self.group6()[2])),
                ((other.group0()[1] * self.group1()[2]) + (other.group4()[2] * self.group9()[3]) + (other.group5()[0] * self.group9()[1]) - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group8()[0] * self.group7()[1])
                    - (other.group8()[1] * self.group7()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group4()[0] * other.group3()[1])
                    - (self.group4()[2] * other.group9()[3])
                    - (self.group5()[0] * other.group9()[1])
                    + (self.group5()[2] * other.group3()[3])
                    - (self.group8()[2] * other.group1()[3])
                    - (other.group1()[1] * self.group6()[0])),
                (-(self.group0()[1] * other[e1])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (other.group8()[1] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[2])
                    + (other.group8()[2] * self.group6()[2])
                    - (self.group5()[2] * other.group3()[2])
                    + (self.group8()[1] * other.group1()[1])
                    + (self.group8()[2] * other.group1()[2])
                    + (self.group8()[2] * other.group6()[2])
                    - (other.group3()[1] * self.group9()[1])
                    - (other.group3()[2] * self.group9()[2])
                    - (other.group3()[3] * self.group9()[3])
                    - (other.group6()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group9())
                + (Simd32x4::from(self.group0()[0]) * other.group9())
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[2]]) * swizzle!(other.group9(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group6(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[3]]) * self.group3())
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self[e45]) - (other.group0()[1] * self.group1()[3]) + (self.group0()[0] * other[e45])
                - (self.group0()[1] * other.group1()[3])
                - (other.group4()[0] * self.group5()[0])
                + (other.group4()[0] * self.group9()[0])
                - (other.group4()[1] * self.group5()[1])
                + (other.group4()[1] * self.group9()[1])
                - (other.group4()[2] * self.group5()[2])
                + (other.group4()[2] * self.group9()[2])
                - (other.group5()[0] * self.group4()[0])
                - (other.group5()[1] * self.group4()[1])
                - (other.group5()[2] * self.group4()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group6()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group6()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group6()[2])
                - (self.group4()[0] * other.group9()[0])
                - (self.group4()[1] * other.group9()[1])
                - (self.group4()[2] * other.group9()[2])
                - (self.group7()[0] * other.group1()[0])
                + (self.group7()[0] * other.group6()[0])
                - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group6()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group6()[2])
                - (other.group1()[3] * self.group6()[3])
                + (other.group3()[3] * self[e45])
                + (other.group6()[3] * self.group1()[3])
                - (self.group3()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1024     1100        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4        8        8        0
    // Totals...
    // yes simd     1043     1122        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1]) - (self.group9()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                ((self.group7()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                ((self.group7()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group0()[3]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2]) + (self.group9()[0] * other.group0()[3])),
                ((self.group5()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0]) + (self.group9()[1] * other.group0()[3])),
                ((self.group5()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1]) + (self.group9()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group6()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group6()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group6()[3] * other.group0()[2])),
                ((self.group6()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1020     1099        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       13       13        0
    // Totals...
    // yes simd     1050     1131        0
    //  no simd     1120     1205        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group1()[3] * other[e2]) - (other.group0()[3] * self[e1])),
                ((self.group9()[3] * other.group0()[3]) + (self[e45] * other[e2])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other[e2]) - (self.group3()[0] * other.group0()[3])),
                ((self.group4()[1] * other[e2]) - (self.group3()[1] * other.group0()[3])),
                ((self.group4()[2] * other[e2]) - (self.group3()[2] * other.group0()[3])),
                ((self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[0] * other[e2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group8()[1] * other.group0()[2]),
                (self.group8()[2] * other.group0()[0]),
                (self.group8()[0] * other.group0()[1]),
                ((other.group0()[3] * self[e1]) * -1.0),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())
                - (Simd32x3::from(other[e2]) * self.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group9()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[3]) + (self.group9()[2] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[3]) + (self.group9()[0] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[2]) - (self.group9()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) + (Simd32x3::from(other.group0()[3]) * self.group5())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e2]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[3]) - (self.group6()[1] * other.group0()[2])),
                (-(self.group8()[1] * other.group0()[3]) - (self.group6()[2] * other.group0()[0])),
                (-(self.group8()[2] * other.group0()[3]) - (self.group6()[0] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) + (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1234
            (-(self.group0()[1] * other.group0()[3])
                - (self.group7()[0] * other.group0()[0])
                - (self.group7()[1] * other.group0()[1])
                - (self.group7()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      992     1046        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      992     1055        0
    //  no simd      992     1076        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e5
            (self[e1] * other[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group3()),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group4()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group6()),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group9()),
            // e1234
            (self[e45] * other[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1027     1102        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       11       11        0
    // Totals...
    // yes simd     1055     1133        0
    //  no simd     1120     1204        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1]) - (self.group9()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) - (self.group8()[0] * other[e4315])),
                ((self.group7()[1] * other.group0()[3]) - (self.group8()[1] * other[e4315])),
                ((self.group7()[2] * other.group0()[3]) - (self.group8()[2] * other[e4315])),
                ((self.group0()[1] * other[e4315]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group6(), 1, 2, 0, 3))),
            // e5
            ((self.group0()[1] * other.group0()[3]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group5()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e4315]) * self.group5())
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group4())
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group8()[0] * other[e4315]) - (self.group1()[2] * other.group0()[1]) - (self.group6()[3] * other.group0()[0])),
                ((self.group8()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2]) - (self.group6()[3] * other.group0()[1])),
                ((self.group8()[2] * other[e4315]) - (self.group1()[1] * other.group0()[0]) - (self.group6()[3] * other.group0()[2])),
                ((self.group6()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[2]) - (self[e1] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other[e4315])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])
                - (self.group4()[2] * other.group0()[2])
                - (self.group3()[3] * other[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1136     1220        0
    //    simd2        4        4        0
    //    simd3       48       48        0
    //    simd4       46       46        0
    // Totals...
    // yes simd     1234     1318        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[1] * other.group0()[3])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (self.group8()[0] * other.group0()[0])
                    + (self.group8()[1] * other.group0()[1])
                    + (self.group8()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[2] * other.group1()[2])
                    - (other.group3()[3] * self[e1])),
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    + (self.group9()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group2()[3]) - (self.group4()[1] * other.group2()[2]) + (self.group4()[2] * other.group2()[1]) + (self.group5()[0] * other.group1()[3])
                    - (self.group3()[0] * other.group3()[3])),
                ((self.group4()[0] * other.group2()[2]) + (self.group4()[1] * other.group2()[3]) - (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[3])),
                (-(self.group4()[0] * other.group2()[1])
                    + (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group2()[3])
                    + (self.group5()[2] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[3])),
                ((self.group4()[1] * other.group3()[1]) - (self.group4()[2] * other.group1()[2]) + (self.group4()[2] * other.group3()[2]) + (self.group9()[2] * other.group0()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[0] * other.group2()[3])
                - (self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[0] * other.group3()[0])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[2] * other.group3()[2])
                + (self.group3()[3] * other.group2()[3])
                - (self.group9()[0] * other.group2()[0])
                - (self.group9()[1] * other.group2()[1])
                - (self.group9()[2] * other.group2()[2])
                + (self.group9()[3] * other.group0()[3])
                + (self.group9()[3] * other.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[3])
                    + (self.group8()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group6()[3] * other.group2()[0])),
                (-(self.group8()[1] * other.group0()[3])
                    + (self.group8()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group6()[3] * other.group2()[1])),
                ((self.group8()[0] * other.group3()[1]) - (self.group8()[2] * other.group0()[3]) + (self.group1()[2] * other.group2()[3]) + (self.group6()[3] * other.group2()[2])),
                ((self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2]) - (other.group3()[3] * self[e1])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group7()[2]]) * swizzle!(other.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group6(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]) * swizzle!(self.group6(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2]) - (self.group6()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1]) - (self.group6()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1]) + (self.group6()[1] * other.group1()[2]) - (self.group6()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0]) - (self.group6()[0] * other.group1()[2])
                    + (self.group6()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0]) + (self.group6()[0] * other.group1()[1]) - (self.group6()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) - (self.group5()[1] * other.group1()[2]) - (self.group9()[2] * other.group3()[1]) + (other.group2()[0] * self[e45])),
                ((self.group4()[1] * other.group2()[3]) - (self.group5()[2] * other.group1()[0]) - (self.group9()[1] * other.group1()[3]) + (other.group2()[1] * self[e45])),
                ((self.group4()[2] * other.group2()[3]) - (self.group5()[0] * other.group1()[1]) - (self.group9()[2] * other.group1()[3]) + (other.group2()[2] * self[e45])),
                (-(self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group9(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group1()[2]) - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    - (self.group9()[1] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[1])),
                ((self.group3()[0] * other.group1()[2]) + (self.group3()[0] * other.group3()[2]) - (self.group3()[2] * other.group1()[0]) - (self.group3()[2] * other.group3()[0])
                    + (self.group9()[0] * other.group2()[2])
                    - (self.group9()[2] * other.group2()[0])),
                (-(self.group3()[0] * other.group1()[1]) - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group9()[0] * other.group2()[1])
                    + (self.group9()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group3()[3]) + (self.group8()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])
                    - (self.group6()[1] * other.group3()[2])
                    + (self.group6()[2] * other.group3()[1])),
                (-(self.group8()[1] * other.group3()[3]) + (self.group8()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])
                    - (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                ((self.group8()[0] * other.group0()[1]) - (self.group8()[2] * other.group3()[3]) + (self.group1()[2] * other.group0()[3]) - (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                ((self.group8()[1] * other.group3()[1]) + (self.group8()[2] * other.group1()[2]) + (self.group8()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[1], self.group6()[2], self.group8()[1]]) * swizzle!(other.group1(), 0, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group6(), 0, 0, 1, 3))),
            // e1234
            (-(self.group0()[1] * other.group3()[3]) + (self.group7()[0] * other.group1()[0]) - (self.group7()[0] * other.group3()[0]) + (self.group7()[1] * other.group1()[1])
                - (self.group7()[1] * other.group3()[1])
                + (self.group7()[2] * other.group1()[2])
                - (self.group7()[2] * other.group3()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])
                + (self.group1()[2] * other.group0()[2])
                - (self.group1()[3] * other.group0()[3])
                + (self.group1()[3] * other.group1()[3])
                + (self.group6()[0] * other.group0()[0])
                + (self.group6()[1] * other.group0()[1])
                + (self.group6()[2] * other.group0()[2])
                - (self.group6()[3] * other.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32     1132     1216        0
    //    simd2       12       12        0
    //    simd3       52       52        0
    //    simd4       40       40        0
    // Totals...
    // yes simd     1236     1320        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group3()[3] * other.group1()[3]) - (self.group9()[0] * other.group3()[0]) - (self.group9()[1] * other.group3()[1]) - (self.group9()[2] * other.group3()[2])),
                ((self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[2] * other.group3()[2]) - (self.group6()[3] * other.group1()[3])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group3()[3]) - (self.group7()[1] * other.group2()[2]) - (self.group8()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group6()[1] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[0])),
                ((self.group7()[1] * other.group3()[3]) - (self.group7()[2] * other.group2()[0]) - (self.group8()[1] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                (-(self.group7()[0] * other.group2()[1]) + (self.group7()[2] * other.group3()[3]) - (self.group8()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[3]]) * other.group2())
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group6(), 2, 1, 2, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                + (self.group1()[0] * other.group2()[0])
                + (self.group1()[1] * other.group2()[1])
                + (self.group1()[2] * other.group2()[2])
                - (self.group6()[0] * other.group2()[0])
                - (self.group6()[1] * other.group2()[1])
                - (self.group6()[2] * other.group2()[2])
                - (self.group6()[3] * other.group3()[3])
                + (other.group0()[3] * self[e1])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group9()[2] * other.group2()[1])
                    + (self.group9()[3] * other.group1()[0])),
                ((self.group5()[1] * other.group3()[3]) - (self.group5()[2] * other.group2()[0])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[3])
                    + (self.group9()[3] * other.group1()[1])),
                (-(self.group5()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group3()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group9()[2] * other.group3()[3])
                    + (self.group9()[3] * other.group1()[2])),
                ((self.group4()[2] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])
                    - (self.group9()[1] * other.group1()[1])
                    - (self.group9()[2] * other.group1()[2])
                    - (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1]) - (self.group9()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group3()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0]) + (self.group9()[0] * other.group3()[2]) - (self.group9()[2] * other.group3()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0]) - (self.group9()[0] * other.group3()[1])
                    + (self.group9()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group7()[2] * other.group2()[1]) + (self.group8()[0] * other.group2()[3]) - (self.group8()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[0])
                    - (self.group6()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group7()[0] * other.group2()[2]) + (self.group8()[1] * other.group2()[3]) - (self.group8()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group6()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group7()[1] * other.group2()[0]) - (self.group8()[0] * other.group0()[1])
                    + (self.group8()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    - (self.group6()[3] * other.group3()[2])),
                (-(self.group7()[1] * other.group2()[1]) - (self.group7()[2] * other.group2()[2]) + (self.group8()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group6()[3] * other.group0()[3])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group6(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group6(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group6()[1] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group6()[0] * other.group0()[2]) - (self.group6()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group6()[0] * other.group0()[1])
                    + (self.group6()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group6()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[0]) + (self.group6()[0] * other.group2()[2])),
                ((self.group1()[0] * other.group2()[1]) + (self.group6()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group1()[1])
                    + (self.group9()[3] * other.group0()[0])),
                (-(self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group9()[1] * other.group0()[3])
                    + (self.group9()[3] * other.group0()[1])),
                ((self.group4()[0] * other.group2()[1]) - (self.group4()[2] * other.group3()[3]) - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (self.group9()[2] * other.group0()[3])
                    + (self.group9()[3] * other.group0()[2])),
                (-(self.group5()[2] * other.group2()[2])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group9()[0] * other.group2()[0])
                    - (self.group9()[1] * other.group2()[1])
                    - (self.group9()[2] * other.group2()[2])
                    - (self.group9()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other.group2()[3])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (self.group3()[3] * other.group2()[3])
                + (self.group9()[0] * other.group0()[0])
                + (self.group9()[1] * other.group0()[1])
                + (self.group9()[2] * other.group0()[2])
                + (other.group0()[3] * self[e45])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Plane {}
impl Sandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       85        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       59       91        0
    //  no simd       73      107        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       99        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       71      106        0
    //  no simd       92      127        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                ((other.group3()[0] * self.group0()[1]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[0] * self.group0()[3]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group3()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       65        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       48       68        0
    //  no simd       48       77        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       29       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       33       49        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       43        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       17        0
    //  no simd        8       23        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       77        0
    //    simd3        1        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       52       85        0
    //  no simd       72      107        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group2()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       76        0
    //    simd3        1        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       53       85        0
    //  no simd       76      110        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group2()[3] * self.group0()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       85        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       58       90        0
    //  no simd       69      103        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       89        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       69       98        0
    //  no simd       96      125        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group3()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       73        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       48       75        0
    //  no simd       48       81        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       26       41        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       40       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       40        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       24       43        0
    //  no simd       33       52        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       26       42        0
    //  no simd       44       60        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      183        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      144      206        0
    //  no simd      192      260        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group9()[0] * self.group0()[0]) - (other.group9()[1] * self.group0()[1]) - (other.group9()[2] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group0()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) + (other.group9()[3] * self.group0()[0])),
                ((other.group3()[2] * self.group0()[0]) + (other.group9()[3] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[1]) + (other.group9()[3] * self.group0()[2])),
                ((other.group5()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group6()[3] * self.group0()[0]) * -1.0),
                ((other.group6()[3] * self.group0()[1]) * -1.0),
                ((other.group6()[3] * self.group0()[2]) * -1.0),
                (other.group6()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (other.group5()[1] * self.group0()[2])),
                ((other.group4()[1] * self.group0()[3]) + (other.group5()[2] * self.group0()[0])),
                ((other.group4()[2] * self.group0()[3]) + (other.group5()[0] * self.group0()[1])),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       39        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       25       40        0
    //  no simd       28       43        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       54        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       35       58        0
    //  no simd       41       68        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3]))])
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       53        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       35       57        0
    //  no simd       41       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group0())
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       99        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       72      107        0
    //  no simd       96      131        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       89        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       70       99        0
    //  no simd      100      129        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group3()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for RoundPoint {}
impl Sandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       92        0
    //    simd3        2        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       74      103        0
    //  no simd      102      133        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())
                + (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group2()[3] * self[e2]),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       87      119        0
    //  no simd      123      158        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                (other.group3()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self[e2])),
                (-(other.group1()[1] * self[e2]) - (other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self[e2])),
                (-(other.group1()[2] * self[e2]) - (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self[e2])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       83        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       64       85        0
    //  no simd       64       91        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       68       95        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       88      120        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       97        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       69      100        0
    //  no simd       75      108        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      108        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       82      111        0
    //  no simd       88      120        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * other.group0())
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       64        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       46       67        0
    //  no simd       52       75        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       27        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       14       35        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      100        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       75      108        0
    //  no simd       94      129        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) * -1.0),
                ((other.group0()[1] * self[e2]) * -1.0),
                ((other.group0()[2] * self[e2]) * -1.0),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group1()[0] * self[e2])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group1()[1] * self[e2])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group1()[2] * self[e2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      104        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       77      113        0
    //  no simd       99      137        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) * -1.0),
                ((other.group0()[1] * self[e2]) * -1.0),
                ((other.group0()[2] * self[e2]) * -1.0),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) * -1.0),
                ((other.group1()[1] * self[e2]) * -1.0),
                ((other.group1()[2] * self[e2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       95        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       72      104        0
    //  no simd       94      128        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      114        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       90      125        0
    //  no simd      123      158        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group3()[3] * self.group0()[3]),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group3()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2]) - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) - (other.group2()[2] * self.group0()[0]) - (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1]) - (other.group3()[3] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       84        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       64       88        0
    //  no simd       64      100        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       68       95        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      108        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       82      111        0
    //  no simd       88      120        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      101        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       72      104        0
    //  no simd       75      111        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      116        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       85      119        0
    //  no simd       88      128        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      219        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      189      250        0
    //  no simd      256      321        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group1()[3] * self[e2]) - (self.group0()[3] * other[e1])),
                ((other.group9()[3] * self.group0()[3]) + (other[e45] * self[e2])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self[e2]) + (other.group3()[0] * self.group0()[3])),
                (-(other.group4()[1] * self[e2]) + (other.group3()[1] * self.group0()[3])),
                (-(other.group4()[2] * self[e2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[0] * self[e2]) + (other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
                ((other.group6()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self[e2]) * other.group1())
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group8())
                - (Simd32x3::from(self[e2]) * other.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self[e2]) + (other.group9()[2] * self.group0()[1])),
                ((other.group4()[1] * self[e2]) + (other.group9()[0] * self.group0()[2])),
                ((other.group4()[2] * self[e2]) + (other.group9()[1] * self.group0()[0])),
                (-(other.group5()[2] * self.group0()[2]) - (other[e45] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self[e2]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group8()[0] * self.group0()[3]) + (other.group6()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group8()[1] * self.group0()[3]) + (other.group6()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group8()[2] * self.group0()[3]) + (other.group6()[0] * self.group0()[1])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (other.group6()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[1] * self.group0()[3])
                + (other.group7()[0] * self.group0()[0])
                + (other.group7()[1] * self.group0()[1])
                + (other.group7()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       72        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       49       73        0
    //  no simd       49       75        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       58        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       57       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other[e2])),
            ]) - (Simd32x4::from(self[e2]) * other.group0())
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       14       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(other[scalar]) * self.group0()), /* e5 */ (self[e2] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       74        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       49       77        0
    //  no simd       54       84        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self[e2] * other[e4315]) * -1.0),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self[e2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[1] * self[e2])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[2] * self[e2])),
                ((self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])
                    + (self[e2] * other[e4315])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      108        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       92      121        0
    //  no simd      128      160        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[2] * other.group3()[2]) - (other.group3()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group3()[0] * self[e2])),
                (-(other.group1()[1] * self[e2]) - (other.group3()[1] * self[e2])),
                (-(other.group1()[2] * self[e2]) - (other.group3()[2] * self[e2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * other.group0())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      108        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       86      122        0
    //  no simd      128      164        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group2()[3] * self[e2]),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (other.group0()[0] * self[e2])),
                ((self.group0()[3] * other.group2()[1]) + (other.group0()[1] * self[e2])),
                ((self.group0()[3] * other.group2()[2]) + (other.group0()[2] * self[e2])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group2()[3] * self[e2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Scalar {}
impl Sandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       11        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       22        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       15        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       30        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        4        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        8        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       12        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        8        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (other[e12345] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0       13        0
    //  no simd        0       20        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       11        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       22        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0       13        0
    //  no simd        0       20        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       15        0
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       30        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        4        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        8        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       12        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       34        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       43        0
    //  no simd        0       64        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (other[e1] * self[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group9()),
            // e1234
            (other[e45] * self[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        8        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()), /* e5 */ (other[e2] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (other[scalar] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       20        0
    //  no simd        0       32        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       20        0
    //  no simd        0       32        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Sphere {}
impl Sandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      104        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       80      112        0
    //  no simd       99      133        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315]) + (other.group2()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      118        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       93      128        0
    //  no simd      123      158        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self[e4315])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self[e4315])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                ((other.group3()[0] * self.group0()[1]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[0] * self.group0()[3]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group3()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       82        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       64       85        0
    //  no simd       64       94        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       68       96        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      111        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       82      115        0
    //  no simd       88      127        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       98        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       72      100        0
    //  no simd       75      105        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[0] * self[e4315])),
                ((other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      105        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       79      109        0
    //  no simd       88      121        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       64        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       46       68        0
    //  no simd       52       78        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e4315]))])
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       14       34        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group0()[3] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       96        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       72      105        0
    //  no simd       94      129        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self[e4315]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self[e4315]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       92        0
    //    simd3        2        3        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       74      103        0
    //  no simd       99      133        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315]) + (other.group2()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (-(Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       81      113        0
    //  no simd       94      128        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group2()[0] * self[e4315]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group2()[1] * self[e4315]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group2()[2] * self[e4315]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      112        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       90      123        0
    //  no simd      123      156        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                ((other.group3()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self[e4315])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group1()[3] * self[e4315]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       83        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       64       87        0
    //  no simd       64       99        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       68       98        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       88      124        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       98        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       72      100        0
    //  no simd       75      105        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self[e4315])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      108        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       82      111        0
    //  no simd       88      120        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                (other.group0()[3] * self[e4315]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      155      213        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      185      246        0
    //  no simd      256      323        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group9()[0] * self.group0()[0]) - (other.group9()[1] * self.group0()[1]) - (other.group9()[2] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group6(), 1, 2, 0, 3))),
            // e5
            ((other.group0()[1] * self.group0()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) + (other.group9()[3] * self.group0()[0])),
                ((other.group3()[2] * self.group0()[0]) + (other.group9()[3] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[1]) + (other.group9()[3] * self.group0()[2])),
                (-(other.group5()[2] * self.group0()[2]) - (other.group9()[3] * self[e4315])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self[e4315]) * other.group5())
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group6()[3] * self.group0()[0]) * -1.0),
                ((other.group6()[3] * self.group0()[1]) * -1.0),
                ((other.group6()[3] * self.group0()[2]) * -1.0),
                (other.group6()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (other.group5()[1] * self.group0()[2])),
                ((other.group4()[1] * self.group0()[3]) + (other.group5()[2] * self.group0()[0])),
                ((other.group4()[2] * self.group0()[3]) + (other.group5()[0] * self.group0()[1])),
                (-(other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self[e4315])
                + (other.group4()[0] * self.group0()[0])
                + (other.group4()[1] * self.group0()[1])
                + (other.group4()[2] * self.group0()[2])
                + (other.group3()[3] * self[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       65        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       46       68        0
    //  no simd       52       76        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       62        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       46       67        0
    //  no simd       57       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (other[e2] * self[e4315]),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3]) + (other[e2] * self[e4315])),
            ]) + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       14       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e1234
            (other[scalar] * self[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       58        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       46       64        0
    //  no simd       57       80        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      115        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      128      163        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1]) - (other.group3()[0] * self[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (other.group3()[1] * self[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (other.group3()[2] * self[e4315])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from(self[e4315]) * other.group2())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      113        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       92      125        0
    //  no simd      128      161        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                ((self.group0()[2] * other.group3()[2]) * -1.0),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0]) + (other.group2()[0] * self[e4315])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1]) + (other.group2()[1] * self[e4315])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2]) + (other.group2()[2] * self[e4315])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (other.group3()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group3()[2])),
                ((other.group0()[3] * self[e4315]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorEven {}
impl Sandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      308      350        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      331      373        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0]) + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[3]) + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group2()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[2], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 3, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      325        0
    //    simd4       46       46        0
    // Totals...
    // yes simd      326      371        0
    //  no simd      464      509        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])),
                (-(other.group0()[2] * self.group2()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) * -1.0),
                ((other.group0()[2] * self.group2()[0]) * -1.0),
                ((other.group0()[2] * self.group2()[3]) * -1.0),
                (other.group3()[3] * self.group1()[3]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      241      282        0
    //    simd4        4        5        0
    // Totals...
    // yes simd      245      287        0
    //  no simd      257      302        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                ((other.group0()[0] * self.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      263      298        0
    //    simd4        7        8        0
    // Totals...
    // yes simd      270      306        0
    //  no simd      291      330        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      267      298        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      290      322        0
    //  no simd      359      394        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3]) + (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      322        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      290      332        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      276      319        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      295      338        0
    //  no simd      352      395        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group3()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      243      274        0
    //    simd4       13       14        0
    // Totals...
    // yes simd      256      288        0
    //  no simd      295      330        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group3()[2])])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group1()[3])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      240      266        0
    //    simd4        0        8        0
    // Totals...
    // yes simd      240      274        0
    //  no simd      240      298        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      304      346        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      324      366        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group2()[3]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group3()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group2()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])),
                ((other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group3()[1]) + (other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      284      327        0
    //    simd4       29       29        0
    // Totals...
    // yes simd      313      356        0
    //  no simd      400      443        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group2()[3] * self.group3()[0]),
                (other.group2()[3] * self.group3()[1]),
                (other.group2()[3] * self.group3()[2]),
                ((other.group2()[2] * self.group3()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      308      350        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      327      369        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      296      334        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      338      377        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group3(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (other.group3()[0] * self.group1()[3])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) - (other.group3()[1] * self.group1()[3])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * swizzle!(self.group2(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group3()[0])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      245      296        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      248      299        0
    //  no simd      257      308        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * self.group2())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      294        0
    //    simd4        8        9        0
    // Totals...
    // yes simd      264      303        0
    //  no simd      288      330        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from(other.group0()[3]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      265      306        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      287      328        0
    //  no simd      353      394        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group3()[2])),
                ((other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group3()[1]) - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group1()[2] * self.group2()[3]) - (other.group1()[3] * self.group3()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      296      338        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      302      344        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[0]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      279      314        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      298      334        0
    //  no simd      355      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group2()[0]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group3()[1]) - (other.group1()[2] * self.group3()[2]) - (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      606      680        0
    //    simd2        4        4        0
    //    simd3       54       54        0
    //    simd4       46       46        0
    // Totals...
    // yes simd      710      784        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group0()[3])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (other.group8()[0] * self.group0()[0])
                    + (other.group8()[1] * self.group0()[1])
                    + (other.group8()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group2()[3])
                    + (other.group6()[0] * self.group1()[0])
                    + (other.group6()[1] * self.group1()[1])
                    + (other.group6()[2] * self.group1()[2])
                    - (self.group3()[3] * other[e1])),
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group9()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group2()[3]) - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group9()[2] * self.group1()[1])
                    + (other.group9()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e45])),
                ((other.group4()[0] * self.group2()[2]) - (other.group4()[1] * self.group2()[3]) - (other.group4()[2] * self.group2()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[2])
                    + (other.group9()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e45])),
                (-(other.group4()[0] * self.group2()[1]) + (other.group4()[1] * self.group2()[0]) - (other.group4()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group9()[1] * self.group1()[0])
                    + (other.group9()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e45])),
                (-(other.group4()[1] * self.group1()[1])
                    - (other.group4()[1] * self.group3()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group3()[2])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 2, 1))),
            // e5
            ((other.group0()[0] * self.group2()[3])
                - (other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (other.group3()[0] * self.group1()[0])
                + (other.group3()[0] * self.group3()[0])
                - (other.group3()[1] * self.group1()[1])
                + (other.group3()[1] * self.group3()[1])
                - (other.group3()[2] * self.group1()[2])
                + (other.group3()[2] * self.group3()[2])
                - (other.group3()[3] * self.group2()[3])
                + (other.group9()[0] * self.group2()[0])
                + (other.group9()[1] * self.group2()[1])
                + (other.group9()[2] * self.group2()[2])
                + (other.group9()[3] * self.group0()[3])
                - (other.group9()[3] * self.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[2] * self.group1()[1]) + (self.group3()[0] * other[e1])),
                ((other.group8()[1] * self.group1()[3]) + (self.group3()[1] * other[e1])),
                ((other.group8()[2] * self.group1()[3]) + (self.group3()[2] * other[e1])),
                ((other.group7()[2] * self.group2()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group0()[2]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group1()[3]]) * self.group2())
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group6(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group3()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group3()[2]) + (other.group1()[2] * self.group3()[1]) - (other.group6()[1] * self.group1()[2])
                    + (other.group6()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group3()[2]) - (other.group1()[2] * self.group3()[0]) + (other.group6()[0] * self.group1()[2]) - (other.group6()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group3()[1]) + (other.group1()[1] * self.group3()[0]) - (other.group6()[0] * self.group1()[1])
                    + (other.group6()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group8(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group5()[0] * self.group0()[3]) - (other.group5()[2] * self.group1()[1]) + (other.group3()[1] * self.group0()[2]) - (other.group9()[0] * self.group1()[3])),
                (-(other.group5()[0] * self.group1()[2]) + (other.group5()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])
                    - (other.group9()[1] * self.group1()[3])),
                (-(other.group5()[1] * self.group1()[0]) + (other.group5()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])
                    - (other.group9()[2] * self.group1()[3])),
                (-(other.group5()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group4()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group9(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group9(), 2, 0, 1, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group9()[1] * self.group2()[2]) + (other.group9()[2] * self.group2()[1])),
                ((other.group9()[0] * self.group2()[2]) - (other.group9()[2] * self.group2()[0])),
                (-(other.group9()[0] * self.group2()[1]) + (other.group9()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) + (other.group8()[0] * self.group3()[3]) + (other.group8()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group8()[1] * self.group3()[3]) + (other.group8()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group2()[1])),
                ((other.group0()[1] * self.group3()[2]) + (other.group8()[0] * self.group0()[1]) + (other.group8()[2] * self.group3()[3])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group8()[1] * self.group1()[1]) - (other.group8()[1] * self.group3()[1]) + (other.group8()[2] * self.group1()[2]) - (other.group8()[2] * self.group3()[2])
                    + (other.group6()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))),
            // e1234
            (-(other.group0()[1] * self.group3()[3])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group3()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group3()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group3()[2])
                - (other.group1()[0] * self.group0()[0])
                - (other.group1()[1] * self.group0()[1])
                - (other.group1()[2] * self.group0()[2])
                - (other.group1()[3] * self.group0()[3])
                - (other.group1()[3] * self.group1()[3])
                + (other.group6()[0] * self.group0()[0])
                + (other.group6()[1] * self.group0()[1])
                + (other.group6()[2] * self.group0()[2])
                + (other.group6()[3] * self.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      252      298        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      261      307        0
    //  no simd      288      334        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      248      297        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      262      311        0
    //  no simd      304      353        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0]) * -1.0),
                ((other.group0()[3] * self.group1()[1]) * -1.0),
                ((other.group0()[3] * self.group1()[2]) * -1.0),
                (other.group0()[2] * self.group3()[2]),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group3())
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((other.group0()[3] * self.group2()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (self.group3()[0] * other[e2])),
                ((other.group0()[0] * self.group2()[2]) + (self.group3()[1] * other[e2])),
                ((other.group0()[1] * self.group2()[0]) + (self.group3()[2] * other[e2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[3] * other[e2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      240      266        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      240      270        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      252      301        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      265      314        0
    //  no simd      304      353        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group0()[3] * self.group3()[3]),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (self.group2()[0] * other[e4315])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (self.group2()[1] * other[e4315])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group1()[3]) + (self.group2()[2] * other[e4315])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3]) - (self.group2()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) * -1.0),
                ((self.group2()[1] * other[e4315]) * -1.0),
                ((self.group2()[2] * other[e4315]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group0())
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      292      334        0
    //    simd4       47       47        0
    // Totals...
    // yes simd      339      381        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[0])
                    - (other.group3()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group1()[1])
                    - (other.group3()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group3()[3] * self.group2()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group3()[3] * self.group2()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group3()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group3()[2])
                    - (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[3] * self.group3()[0]) - (other.group3()[2] * self.group1()[1]) - (other.group3()[3] * self.group2()[0])),
                ((other.group0()[3] * self.group3()[1]) - (other.group3()[0] * self.group1()[2]) - (other.group3()[3] * self.group2()[1])),
                ((other.group0()[3] * self.group3()[2]) - (other.group3()[1] * self.group1()[0]) - (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[2] * self.group3()[2]) - (other.group2()[3] * self.group0()[3]) + (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group2(), 3, 3, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      292      334        0
    //    simd4       47       47        0
    // Totals...
    // yes simd      339      381        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group3()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[3] * other.group3()[0]) + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[3] * other.group3()[1]) + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[3] * other.group3()[2]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group3()[0] * other.group3()[3])),
                ((self.group2()[3] * other.group1()[1]) - (self.group3()[1] * other.group3()[3])),
                ((self.group2()[3] * other.group1()[2]) - (self.group3()[2] * other.group3()[3])),
                (-(self.group2()[3] * other.group1()[3]) + (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group3())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group2(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1]) - (self.group2()[2] * other.group2()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group3()[3], self.group3()[3], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 2, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group1())
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group3(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorOdd {}
impl Sandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      304      346        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      328      370        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[0] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      342        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      341      383        0
    //  no simd      464      506        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group1()[0])
                    - (other.group3()[0] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group1()[1])
                    - (other.group3()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group1()[2])
                    - (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group1()[3]) - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group1()[3] * self.group1()[1]) + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[2], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      245      285        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      248      289        0
    //  no simd      257      301        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      264      311        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      270      317        0
    //  no simd      288      335        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      277      321        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      296      340        0
    //  no simd      353      397        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) * -1.0),
                ((other.group1()[1] * self.group2()[3]) * -1.0),
                ((other.group1()[2] * self.group2()[3]) * -1.0),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[3] * self.group1()[0]) - (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      342        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      305      347        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      288      330        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      304      346        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 2, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      249      294        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      259      304        0
    //  no simd      289      334        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      240      266        0
    //    simd4        0        6        0
    // Totals...
    // yes simd      240      272        0
    //  no simd      240      290        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      342        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      321      363        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      300      342        0
    //    simd4       25       25        0
    // Totals...
    // yes simd      325      367        0
    //  no simd      400      442        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[3] * self.group3()[0]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[3] * self.group3()[1]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[3] * self.group3()[2]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      358        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      333      375        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group2()[2])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      358        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      353      395        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group1()[2]) + (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 0, 1, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      245      288        0
    //    simd4        3        4        0
    // Totals...
    // yes simd      248      292        0
    //  no simd      257      304        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      268      313        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      273      318        0
    //  no simd      288      333        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group0()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      326        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      298      344        0
    //  no simd      352      398        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group2()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]) * self.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      296      338        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      302      344        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      281      322        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      299      340        0
    //  no simd      353      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      588      662        0
    //    simd2       12       12        0
    //    simd3       52       52        0
    //    simd4       48       48        0
    // Totals...
    // yes simd      700      774        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group3()[3] * self.group1()[3]) - (other.group9()[0] * self.group3()[0]) - (other.group9()[1] * self.group3()[1]) - (other.group9()[2] * self.group3()[2])),
                ((other.group1()[0] * self.group3()[0]) + (other.group1()[1] * self.group3()[1]) + (other.group1()[2] * self.group3()[2]) - (other.group6()[3] * self.group1()[3])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) - (other.group7()[0] * self.group3()[3])
                    + (other.group8()[0] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group7()[1] * self.group3()[3])
                    + (other.group8()[1] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group3()[2]) - (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[2])),
                (-(other.group7()[1] * self.group1()[1]) + (other.group7()[1] * self.group3()[1]) - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group6(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[2]]) * swizzle!(other.group6(), 1, 2, 2, 2))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[3]]) * self.group0())),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                - (other.group1()[0] * self.group2()[0])
                - (other.group1()[1] * self.group2()[1])
                - (other.group1()[2] * self.group2()[2])
                - (other.group6()[0] * self.group2()[0])
                - (other.group6()[1] * self.group2()[1])
                - (other.group6()[2] * self.group2()[2])
                + (other.group6()[3] * self.group3()[3])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group2()[2]) + (other.group9()[2] * self.group2()[1]) + (other.group9()[3] * self.group1()[0]) + (other.group9()[3] * self.group3()[0])),
                ((other.group5()[2] * self.group2()[0]) + (other.group9()[0] * self.group2()[2]) + (other.group9()[3] * self.group1()[1]) + (other.group9()[3] * self.group3()[1])),
                ((other.group5()[0] * self.group2()[1]) + (other.group9()[1] * self.group2()[0]) + (other.group9()[3] * self.group1()[2]) + (other.group9()[3] * self.group3()[2])),
                (-(other.group4()[2] * self.group2()[2])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (other.group9()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group9(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[3]]) * swizzle!(other.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[1]]) * swizzle!(other.group9(), 0, 1, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group0()[2]) - (other.group3()[2] * self.group0()[1]) + (other.group9()[1] * self.group3()[2]) - (other.group9()[2] * self.group3()[1])),
                (-(other.group3()[0] * self.group0()[2]) + (other.group3()[2] * self.group0()[0]) - (other.group9()[0] * self.group3()[2])
                    + (other.group9()[2] * self.group3()[0])),
                ((other.group3()[0] * self.group0()[1]) - (other.group3()[1] * self.group0()[0]) + (other.group9()[0] * self.group3()[1]) - (other.group9()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (other.group7()[2] * self.group2()[1]) + (other.group6()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) - (other.group7()[0] * self.group2()[2]) + (other.group6()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[1] * self.group2()[0]) + (other.group6()[2] * self.group0()[3])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group6()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group1()[3]]) * self.group3())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[2]]) * swizzle!(other.group6(), 0, 1, 0, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group6()[1] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[2]) + (other.group6()[2] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) + (other.group6()[0] * self.group0()[1])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group2()[2]) - (other.group1()[2] * self.group2()[1]) + (other.group6()[1] * self.group2()[2]) - (other.group6()[2] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[2]) + (other.group1()[2] * self.group2()[0]) - (other.group6()[0] * self.group2()[2])
                    + (other.group6()[2] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) + (other.group6()[0] * self.group2()[1]) - (other.group6()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group3()[3]) + (other.group5()[1] * self.group3()[2]) + (other.group3()[3] * self.group1()[0]) - (other.group9()[3] * self.group0()[0])
                    + (self.group2()[0] * other[e45])),
                ((other.group4()[1] * self.group3()[3]) + (other.group5()[2] * self.group3()[0]) + (other.group3()[3] * self.group1()[1]) - (other.group9()[3] * self.group0()[1])
                    + (self.group2()[1] * other[e45])),
                ((other.group4()[2] * self.group3()[3]) + (other.group5()[0] * self.group3()[1]) + (other.group3()[3] * self.group1()[2]) - (other.group9()[3] * self.group0()[2])
                    + (self.group2()[2] * other[e45])),
                (-(other.group5()[1] * self.group2()[1])
                    - (other.group5()[2] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group9(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group2()[3]) - (other.group4()[0] * self.group1()[0]) + (other.group4()[0] * self.group3()[0]) - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (other.group5()[0] * self.group0()[0])
                - (other.group5()[1] * self.group0()[1])
                - (other.group5()[2] * self.group0()[2])
                + (other.group3()[3] * self.group2()[3])
                - (other.group9()[0] * self.group0()[0])
                - (other.group9()[1] * self.group0()[1])
                - (other.group9()[2] * self.group0()[2])
                + (self.group0()[3] * other[e45])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      303        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      267      310        0
    //  no simd      288      331        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      256      301        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      268      313        0
    //  no simd      304      349        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3]) + (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (self.group0()[0] * other[e2])),
                ((other.group0()[0] * self.group3()[2]) + (self.group0()[1] * other[e2])),
                ((other.group0()[1] * self.group3()[0]) + (self.group0()[2] * other[e2])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group2())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) * -1.0),
                ((other.group0()[3] * self.group2()[1]) * -1.0),
                ((other.group0()[3] * self.group2()[2]) * -1.0),
                (other.group0()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      240      266        0
    //    simd4        0        4        0
    // Totals...
    // yes simd      240      270        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      260      303        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      271      314        0
    //  no simd      304      347        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                ((other.group0()[2] * self.group3()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e4315]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      292      334        0
    //    simd4       47       47        0
    // Totals...
    // yes simd      339      381        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])
                    - (other.group3()[0] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])
                    - (other.group3()[2] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) + (other.group3()[3] * self.group2()[0])),
                ((other.group2()[3] * self.group0()[1]) + (other.group3()[3] * self.group2()[1])),
                ((other.group2()[2] * self.group2()[3]) + (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group1()[3] * self.group1()[0]),
                (other.group1()[3] * self.group1()[1]),
                (other.group1()[3] * self.group1()[2]),
                (other.group0()[2] * self.group3()[2]),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group1()[3]]) * self.group2())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[3]]) * swizzle!(other.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      316      358        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      357      399        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 2, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group1()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group1()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[2], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 3, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group3()[2] * self.group2()[1]) + (other.group3()[3] * self.group1()[0])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group3()[0] * self.group2()[2]) + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group1()[2]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group2(), 2, 0, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[1]]) * swizzle!(self.group3(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 1, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[3] * self.group3()[0]) + (other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[3] * self.group3()[1]) + (other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group2()[3] * self.group2()[1])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group3()[2]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 2, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
