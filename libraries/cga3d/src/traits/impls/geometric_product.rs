// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        25      37       0
//  Average:        46      59       0
//  Maximum:       729     761       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        28      44       0
//  Average:        56      72       0
//  Maximum:       992    1024       0
impl std::ops::Div<geometric_product> for AntiCircleRotor {
    type Output = geometric_product_partial<AntiCircleRotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      105        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       93      109        0
    //  no simd      105      121        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      113      129        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      122      138        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431])
                    - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412])
                    - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e45] * other[e1])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e45] * other[e2])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e45] * other[e3])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       14        0
    //  no simd        8       29        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[scalar]])
                * ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(self[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e15] * other[scalar], self[e25] * other[scalar], self[e35] * other[scalar], 0.0])
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e41] * other[e3215],
                self[e42] * other[e3215],
                self[e43] * other[e3215],
                (self[e45] * other[e3215]) + (self[scalar] * other[e3215]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       30       48        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e41] * other[e321],
                self[e42] * other[e321],
                self[e43] * other[e321],
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]),
                (self[scalar] * other[e321]) - (self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[scalar] * other[e235]) - (self[e31] * other[e125]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]) - (self[e12] * other[e235]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]) - (self[e23] * other[e315]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]),
                0.0,
            ]) + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e1]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e2]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e3]),
                (self[scalar] * other[e321])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e2]) - (self[e31] * other[e125]) - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) - (self[e12] * other[e235]) - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) - (self[e23] * other[e315]) - (self[e15] * other[e2]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[scalar] * other[e1])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[scalar] * other[e2])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[scalar] * other[e3])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) - (self[e42] * other[e12]),
                (self[e41] * other[e12]) - (self[e43] * other[e23]),
                (self[e42] * other[e23]) - (self[e41] * other[e31]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[scalar] * other[e23]) - (self[e42] * other[e35]) - (self[e31] * other[e12]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[scalar] * other[e31]) - (self[e43] * other[e15]) - (self[e12] * other[e23]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[scalar] * other[e12]) - (self[e41] * other[e25]) - (self[e23] * other[e31]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]) - (self[e31] * other[e35]) - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]) - (self[e12] * other[e15]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]) - (self[e23] * other[e25]) - (self[e15] * other[e31]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e45] * other[e23]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e45] * other[e31]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e45] * other[e12]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) - (self[e42] * other[e12]),
                (self[e41] * other[e12]) - (self[e43] * other[e23]),
                (self[e42] * other[e23]) - (self[e41] * other[e31]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[scalar] * other[e23])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e23] * other[e12]) + (self[scalar] * other[e31])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e31] * other[e23]) + (self[scalar] * other[e12])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) - (self[e41] * other[e3215]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) - (self[e41] * other[e35]) - (self[e42] * other[e3215]),
                (self[e41] * other[e25]) - (self[e42] * other[e15]) - (self[e43] * other[e3215]),
                (self[scalar] * other[e3215])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       29       44        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiCircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * self.group2(),
        );
    }
}
impl GeometricProduct<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      102        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       88      104        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e42] * other[e435])
                    - (self[e31] * other[e412])
                    - (self[e45] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431])
                    - (self[e43] * other[e415])
                    - (self[e12] * other[e423])
                    - (self[e45] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412])
                    - (self[e41] * other[e425])
                    - (self[e23] * other[e431])
                    - (self[e45] * other[e412]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e15] * other[e412])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e25] * other[e423])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e15] * other[e412]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e25] * other[e423]),
                -(self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      109        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       96      112        0
    //  no simd      105      121        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e42] * other[e435])
                    - (self[e31] * other[e412])
                    - (self[e45] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431])
                    - (self[e43] * other[e415])
                    - (self[e12] * other[e423])
                    - (self[e45] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412])
                    - (self[e41] * other[e425])
                    - (self[e23] * other[e431])
                    - (self[e45] * other[e412]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e321])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e321])
                    + (self[e25] * other[e12345])
                    + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e321])
                    + (self[e35] * other[e12345])
                    + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e15] * other[e412]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e25] * other[e423]),
                -(self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      102        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       88      104        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e42] * other[e12]) - (self[e31] * other[e43]) - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e43] * other[e23]) - (self[e12] * other[e41]) - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e41] * other[e31]) - (self[e23] * other[e42]) - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23]) - (self[e42] * other[e31]) - (self[e43] * other[e12]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e45] * other[e23]) + (self[e35] * other[e42]) - (self[e43] * other[e25]) - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e45] * other[e31]) + (self[e15] * other[e43]) - (self[e41] * other[e35]) - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e25] * other[e41]) - (self[e42] * other[e15]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      145        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      134      150        0
    //  no simd      149      165        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        7       33        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], self[scalar] * other[e5]])
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e41] * other[e5], self[e42] * other[e5], self[e43] * other[e5], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       27       42        0
    //  no simd       30       44        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e45] * other[e4235]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e45] * other[e4315]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e45] * other[e4125]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[scalar] * other[e15])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[scalar] * other[e35])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[scalar] * other[e235])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[scalar] * other[e315])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[scalar] * other[e125])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[scalar] * other[e415])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[scalar] * other[e425])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[scalar] * other[e435])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      217        0
    //    simd2       10       10        0
    //    simd3       24       24        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      229      262        0
    //  no simd      320      353        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0]) + (Simd32x2::from(self[scalar]) * other.group0())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5]) + (self[scalar] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                + (Simd32x4::from(self[scalar]) * other.group3())
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) - (self[e42] * other[e12]) - (self[e42] * other[e4125]) - (self[e31] * other[e43]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) - (self[e43] * other[e23]) - (self[e43] * other[e4235]) - (self[e12] * other[e41]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) - (self[e41] * other[e31]) - (self[e41] * other[e4315]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * other.group4())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e45]) * other.group4()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group6())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[scalar]) * other.group7())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e45]) * other.group7()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group9()),
            // e1234
            (self[scalar] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       29       44        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       44        0
    //    simd3        1        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       32       47        0
    //  no simd       40       55        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]) + (self[scalar] * other[e4]) - (self[e45] * other[e4]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
    }
}
impl GeometricProduct<Scalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       40       55        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                (self[scalar] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      132        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      143        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423])
                    - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431])
                    - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412])
                    - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2())
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      148        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      139      155        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e41], self[e42], self[e43], self[scalar]]))
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiDipoleInversion {
    type Output = geometric_product_partial<AntiDipoleInversion>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      133        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      125      141        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e45] * self[e1])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e45] * self[e2])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e45] * self[e3])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e35] * self[e2]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[e15] * self[e3]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e25] * self[e1]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      173      189        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      182      198        0
    //  no simd      209      225        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e1])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e2])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e3])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       15       33        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423] * other[scalar], self[e431] * other[scalar], self[e412] * other[scalar], self[e4] * other[e3215]]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([self[e415] * other[e3215], self[e425] * other[e3215], self[e435] * other[e3215], 0.0])
                + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[scalar]])
                * ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group3().truncate_to_3())).extend_to_4(self[e4]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        4        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       44       63        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e423] * other[e321],
                self[e431] * other[e321],
                self[e412] * other[e321],
                (self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) - (self[e321] * other[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) - (self[e412] * other[e315]) - (self[e4] * other[e235]) - (self[e1] * other[e321]),
                (self[e412] * other[e235]) - (self[e423] * other[e125]) - (self[e4] * other[e315]) - (self[e2] * other[e321]),
                (self[e423] * other[e315]) - (self[e431] * other[e235]) - (self[e4] * other[e125]) - (self[e3] * other[e321]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e321]])
                * (Simd32x3::from([
                    -(self[e435] * other[e315]) - (self[e2] * other[e125]),
                    -(self[e415] * other[e125]) - (self[e3] * other[e235]),
                    -(self[e425] * other[e235]) - (self[e1] * other[e315]),
                ]) + (Simd32x3::from(other[e235]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                    + (Simd32x3::from(other[e315]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                    + (Simd32x3::from(other[e125]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                    - (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()))
                .extend_to_4(self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e4] * other[e235]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e4] * other[e315]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e4] * other[e125]) - (self[e423] * other[e315]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      116        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      101      117        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) + (self[e431] * other[e321]) + (self[e4] * other[e2]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) + (self[e412] * other[e321]) + (self[e4] * other[e3]) - (self[e423] * other[e2]),
                (self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3])
                    - (self[e321] * other[e321])
                    - (self[e4] * other[e5]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e2] * other[e3])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e321] * other[e1])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2]),
                (self[e412] * other[e235]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e321] * other[e2])
                    - (self[e4] * other[e315])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321]),
                (self[e423] * other[e315]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e321] * other[e3])
                    - (self[e4] * other[e125])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321]),
                (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e3]),
                (self[e4] * other[e321]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e4] * other[e235])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e4] * other[e315])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e4] * other[e125])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]) - (self[e431] * other[e12]),
                (self[e423] * other[e12]) + (self[e4] * other[e31]) - (self[e412] * other[e23]),
                (self[e431] * other[e23]) + (self[e4] * other[e12]) - (self[e423] * other[e31]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e425] * other[e12]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e435] * other[e23]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e415] * other[e31]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e3] * other[e31]) - (self[e431] * other[e35]) - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) - (self[e412] * other[e15]) - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) - (self[e423] * other[e25]) - (self[e1] * other[e31]),
                -(self[e423] * other[e23]) - (self[e431] * other[e31]) - (self[e412] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       77       93        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar]) + (self[e412] * other[e31]) - (self[e431] * other[e12]),
                (self[e423] * other[e12]) + (self[e431] * other[scalar]) - (self[e412] * other[e23]),
                (self[e431] * other[e23]) + (self[e412] * other[scalar]) - (self[e423] * other[e31]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e425] * other[e12]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e435] * other[e23]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e415] * other[e31]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e1] * other[e31]),
                -(self[e423] * other[e23]) - (self[e431] * other[e31]) - (self[e412] * other[e12]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) + (self[e4] * other[e2]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) + (self[e4] * other[e3]) - (self[e423] * other[e2]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e4] * other[e5]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]) - (self[e415] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]) - (self[e425] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]) - (self[e435] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiDipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      142        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      128      144        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e2] * other[e412])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e4] * other[e415])
                    - (self[e3] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e415] * other[e412])
                    - (self[e4] * other[e425])
                    - (self[e1] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e1] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e425] * other[e423])
                    - (self[e4] * other[e435])
                    - (self[e2] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      153        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      140      156        0
    //  no simd      149      165        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e2] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e4] * other[e415])
                    - (self[e3] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e415] * other[e412])
                    - (self[e4] * other[e425])
                    - (self[e1] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e1] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e4] * other[e435])
                    - (self[e2] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412]),
            ]) - (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      130        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      119      135        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e1] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e2] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42]) + (self[e4] * other[e15]) + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e4] * other[e25]) + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e4] * other[e35]) + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      157      173        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      170      186        0
    //  no simd      209      225        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e4] * other[e4235])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e4] * other[e4315])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e4] * other[e4125])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215])
                    + (self[e435] * other[e25])
                    + (self[e315] * other[e4125])
                    + (self[e125] * other[e31])
                    + (self[e2] * other[e35])
                    + (self[e5] * other[e23]),
                (self[e415] * other[e35])
                    + (self[e425] * other[e3215])
                    + (self[e235] * other[e12])
                    + (self[e125] * other[e4235])
                    + (self[e3] * other[e15])
                    + (self[e5] * other[e31]),
                (self[e425] * other[e15])
                    + (self[e435] * other[e3215])
                    + (self[e235] * other[e4315])
                    + (self[e315] * other[e23])
                    + (self[e1] * other[e25])
                    + (self[e5] * other[e12]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<DualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd3        2        3        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        7       24        0
    //  no simd       14       42        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423] * other[e12345], self[e431] * other[e12345], self[e412] * other[e12345], self[e4] * other[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e415] * other[e12345]),
                -(self[e431] * other[e5]) - (self[e425] * other[e12345]),
                -(self[e412] * other[e5]) - (self[e435] * other[e12345]),
                (self[e321] * other[e12345]) + (self[e4] * other[e5]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * ((Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                    - (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                    - (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3()))
                .extend_to_4(self[e4])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1] * other[e12345], self[e2] * other[e12345], self[e3] * other[e12345], (self[e5] * other[e12345]) * -1.0])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        2        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       44       63        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]) - (self[e431] * other[e35]) - (self[e1] * other[e45]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]) - (self[e412] * other[e15]) - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]) - (self[e423] * other[e25]) - (self[e3] * other[e45]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * (Simd32x3::from([
                    (self[e412] * other[e25]) - (self[e431] * other[e35]),
                    (self[e423] * other[e35]) - (self[e412] * other[e15]),
                    (self[e431] * other[e15]) - (self[e423] * other[e25]),
                ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()))
                .extend_to_4(self[e4]),
        );
    }
}
impl GeometricProduct<Flector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       80       96        0
    //  no simd      104      120        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(self[e4]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]) + (self[e2] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]) + (self[e3] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]) + (self[e1] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e2] * other[e35])
                    - (self[e125] * other[e4315])
                    - (self[e5] * other[e4235]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e125] * other[e4235]) + (self[e3] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e5] * other[e4315]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315]) + (self[e1] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e5] * other[e4125]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * other.group0()),
        );
    }
}
impl GeometricProduct<Line> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]) - (self[e4] * other[e415]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e4] * other[e425]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e4] * other[e435]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]) - (self[e4] * other[e235]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]) - (self[e4] * other[e315]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]) - (self[e4] * other[e125]),
                -(self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) + (self[e4] * other[e235]) + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) + (self[e4] * other[e315]) + (self[e1] * other[e435])
                    - (self[e412] * other[e235])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) + (self[e4] * other[e125]) + (self[e2] * other[e415])
                    - (self[e423] * other[e315])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      108        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       95      111        0
    //  no simd      104      120        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e423] * other[e12345]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e431] * other[e12345]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]) - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e4] * other[e235]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e4] * other[e315]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e4] * other[e125]),
                (self[e321] * other[e12345]) + (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]) - (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) + (self[e4] * other[e235]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) + (self[e4] * other[e315]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) + (self[e4] * other[e125]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      290      322        0
    //    simd2        4        4        0
    //    simd3       38       38        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      341      373        0
    //  no simd      448      480        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e4] * other[e5])
                    - (self[e5] * other[e4]),
                (self[e4] * other[e3215]) + (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e425] * other[e4125])
                    + (self[e315] * other[e43])
                    + (self[e1] * other[scalar])
                    + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e435] * other[e4235])
                    + (self[e125] * other[e41])
                    + (self[e1] * other[e12])
                    + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e415] * other[e4315])
                    + (self[e235] * other[e42])
                    + (self[e2] * other[e23])
                    + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                (self[e4] * other[e45])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415]) + (self[e1] * other[e125])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425]) + (self[e2] * other[e235])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e4]]))
                - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) + (self[e2] * other[e412]) - (self[e435] * other[e431]) - (self[e3] * other[e431]),
                (self[e435] * other[e423]) + (self[e3] * other[e423]) - (self[e415] * other[e412]) - (self[e1] * other[e412]),
                (self[e415] * other[e431]) + (self[e1] * other[e431]) - (self[e425] * other[e423]) - (self[e2] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e3] * other[e2]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412])
                    - (self[e1] * other[e3]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423])
                    - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group0())
                - (Simd32x3::from(other[e321]) * self.group3().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42]) + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43]) + (self[e1] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41]) + (self[e2] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e1] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * other.group5())
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e4] * other[e321])
                + (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e4] * other[e12345]),
        );
    }
}
impl GeometricProduct<Plane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       35       51        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       50       66        0
    //  no simd       59       75        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e412] * other[e2]) + (self[e4] * other[e1]) - (self[e431] * other[e3]) - (self[e1] * other[e4]),
                (self[e423] * other[e3]) + (self[e4] * other[e2]) - (self[e412] * other[e1]) - (self[e2] * other[e4]),
                (self[e431] * other[e1]) + (self[e4] * other[e3]) - (self[e423] * other[e2]) - (self[e3] * other[e4]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e4] * other[e5]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]) - (self[e415] * other[e5]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]) - (self[e425] * other[e5]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]) - (self[e435] * other[e5]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<Scalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       59        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       59       75        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e4315]) + (self[e1] * other[e1234]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e2] * other[e1234]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e3] * other[e1234]) - (self[e423] * other[e4315]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * other.group0())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e315] * other[e1234]) + (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e125] * other[e1234]) + (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      200        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      194      210        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) + (self[e4] * other[e1]) + (self[e2] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431])
                    - (self[e1] * other[e4])
                    - (self[e3] * other[e431]),
                (self[e435] * other[e423]) + (self[e4] * other[e2]) + (self[e3] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e1] * other[e412])
                    - (self[e2] * other[e4]),
                (self[e415] * other[e431]) + (self[e4] * other[e3]) + (self[e1] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e2] * other[e423])
                    - (self[e3] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    + (self[e1] * other[e1])
                    + (self[e2] * other[e2])
                    + (self[e3] * other[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e125] * other[e431])
                    - (self[e4] * other[e235])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2])
                    - (self[e5] * other[e423]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e4] * other[e315])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e4] * other[e125])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e4] * other[e5])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    + (self[e4] * other[e321])
                    + (self[e1] * other[e423])
                    + (self[e2] * other[e431])
                    + (self[e3] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]) - (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e4] * other[e235])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e4] * other[e315])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e4] * other[e125])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      168        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      170      186        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e4] * other[e4235])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e4] * other[e4315])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e4] * other[e4125])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e4] * other[e15])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e4] * other[e25])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e431] * other[e15])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e4] * other[e35])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e425] * other[e4125])
                    + (self[e315] * other[e43])
                    + (self[e1] * other[scalar])
                    + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e435] * other[e4235])
                    + (self[e125] * other[e41])
                    + (self[e1] * other[e12])
                    + (self[e2] * other[scalar])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e415] * other[e4315])
                    + (self[e235] * other[e42])
                    + (self[e2] * other[e23])
                    + (self[e3] * other[scalar])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                (self[e4] * other[e45])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]])),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiDualNum {
    type Output = geometric_product_partial<AntiDualNum>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        3        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        8       25        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[scalar]])
                * ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(other[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e15] * self[scalar], other[e25] * self[scalar], other[e35] * self[scalar], 0.0])
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e41] * self[e3215],
                other[e42] * self[e3215],
                other[e43] * self[e3215],
                (other[scalar] * self[e3215]) - (other[e45] * self[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        4       18        0
    //  no simd       15       34        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423] * self[scalar], other[e431] * self[scalar], other[e412] * self[scalar], other[e4] * self[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e423] * self[e3215], other[e431] * self[e3215], other[e412] * self[e3215], (other[e4] * self[e3215]) * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([other[e1] * self[e3215], other[e2] * self[e3215], other[e3] * self[e3215], 0.0])
                + (Simd32x4::from(self[e3215]) * other.group1())
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[scalar]])
                * ((Simd32x3::from(self[scalar]) * other.group3().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group0())).extend_to_4(other[e4]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([(other[e3215] * self[scalar]) + (other[scalar] * self[e3215]), other[scalar] * self[scalar]]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e321]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e321]])
                * ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())).extend_to_4(self[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * other[e1],
                self[scalar] * other[e2],
                self[scalar] * other[e3],
                (self[e3215] * other[e321]) + (self[scalar] * other[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([self[e3215] * other[e1], self[e3215] * other[e2], self[e3215] * other[e3], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[e12345]) * self.group0());
    }
}
impl GeometricProduct<Circle> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e321]])
                * ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar]),
            // e235, e315, e125, e4
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], 0.0])
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        1        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        7       29        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e321]])
                * ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar]),
            // e235, e315, e125, e5
            Simd32x4::from([self[scalar] * other[e235], self[scalar] * other[e315], self[scalar] * other[e125], self[e3215] * other[e12345]])
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e3215] * other[e423], self[e3215] * other[e431], self[e3215] * other[e412], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[scalar] * other[e15], self[scalar] * other[e25], self[scalar] * other[e35], 0.0])
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd3        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       16        0
    //  no simd       14       34        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[scalar] * other[e41], self[scalar] * other[e42], self[scalar] * other[e43], self[e3215] * other[e1234]]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3()))
                .extend_to_4(self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e3215] * other[e41], self[e3215] * other[e42], self[e3215] * other[e43], (self[e3215] * other[e45]) * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(self[e3215] * other[e12345]) + (self[scalar] * other[e5]), self[scalar] * other[e12345]]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
        );
    }
}
impl GeometricProduct<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * ((Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())).extend_to_4(self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[scalar] * other[e4235],
                self[scalar] * other[e4315],
                self[scalar] * other[e4125],
                (self[scalar] * other[e3215]) - (self[e3215] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       17        0
    //    simd2        1        2        0
    //    simd3        4        9        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       36       72        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]])) + (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * ((Simd32x3::from(self[scalar]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group7())).extend_to_4(self[scalar]),
            // e5
            (self[e3215] * other[e12345]) + (self[e3215] * other[e321]) + (self[scalar] * other[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([(self[e3215] * other[e4235]) * -1.0, (self[e3215] * other[e4315]) * -1.0, (self[e3215] * other[e4125]) * -1.0, 0.0])
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group4()) + (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3215] * other[e423], self[e3215] * other[e431], self[e3215] * other[e412], (self[e3215] * other[e4]) * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e3215] * other[e45]) * -1.0])
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                + (Simd32x4::from(self[scalar]) * other.group9()),
            // e1234
            self[scalar] * other[e1234],
        );
    }
}
impl GeometricProduct<Plane> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([self[e3215] * other[e4235], self[e3215] * other[e4315], self[e3215] * other[e4125], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       18        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([self[e3215] * other[e1], self[e3215] * other[e2], self[e3215] * other[e3], self[scalar] * other[e5]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e3215] * other[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e3215] * other[e4235], self[e3215] * other[e4315], self[e3215] * other[e4125], self[scalar] * other[e1234]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       17        0
    //  no simd       16       36        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[scalar] * other[e423],
                self[scalar] * other[e431],
                self[scalar] * other[e412],
                (self[e3215] * other[e4]) + (self[scalar] * other[e12345]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3215] * other[e423], self[e3215] * other[e431], self[e3215] * other[e412], (self[e3215] * other[e4]) * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]]))
                + (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * ((Simd32x3::from(self[scalar]) * other.group3().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())).extend_to_4(self[scalar]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        7        0
    //    simd3        2        3        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       19       36        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[scalar] * other[e41],
                self[scalar] * other[e42],
                self[scalar] * other[e43],
                (self[e3215] * other[e1234]) + (self[scalar] * other[scalar]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3()))
                .extend_to_4(self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e3215] * other[e45]) * -1.0]) + (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiFlatPoint {
    type Output = geometric_product_partial<AntiFlatPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       27       42        0
    //  no simd       30       44        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e41] * self[e321],
                other[e42] * self[e321],
                other[e43] * self[e321],
                -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) - (other[e43] * self[e315]),
                (other[e43] * self[e235]) - (other[e41] * self[e125]),
                (other[e41] * self[e315]) - (other[e42] * self[e235]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]) - (other[e45] * self[e235]) - (other[e15] * self[e321]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]) - (other[e45] * self[e315]) - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]) - (other[e45] * self[e125]) - (other[e35] * self[e321]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e42] * self[e125]),
                (other[e41] * self[e125]) - (other[e43] * self[e235]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       49        0
    //    simd3        2        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       37       55        0
    //  no simd       44       71        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e423] * self[e321],
                other[e431] * self[e321],
                other[e412] * self[e321],
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) - (other[e321] * self[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) - (other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e1] * self[e321]),
                (other[e423] * self[e125]) - (other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e2] * self[e321]),
                (other[e431] * self[e235]) - (other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e3] * self[e321]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e321]])
                * (Simd32x3::from([
                    (other[e435] * self[e315]) + (other[e3] * self[e315]) - (other[e425] * self[e125]) - (other[e2] * self[e125]),
                    (other[e415] * self[e125]) + (other[e1] * self[e125]) - (other[e435] * self[e235]) - (other[e3] * self[e235]),
                    (other[e425] * self[e235]) + (other[e2] * self[e235]) - (other[e415] * self[e315]) - (other[e1] * self[e315]),
                ]) + (Simd32x3::from(self[e321]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()))
                .extend_to_4(other[e4])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) - (other[e431] * self[e125]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) - (other[e412] * self[e235]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) - (other[e423] * self[e315]) - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e321]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        4       14        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([1.0, 1.0, 1.0, other[e321] * self[e321]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([(other[e321] * self[e235]) * -1.0, (other[e321] * self[e315]) * -1.0, (other[e321] * self[e125]) * -1.0, 0.0])
                + (Simd32x3::from(self[e321]) * other.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e235] * other[e321]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]) - (self[e315] * other[e321]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]) - (self[e125] * other[e321]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) - (self[e315] * other[e12]) - (self[e321] * other[e15]),
                (self[e235] * other[e12]) - (self[e125] * other[e23]) - (self[e321] * other[e25]),
                (self[e315] * other[e23]) - (self[e235] * other[e31]) - (self[e321] * other[e35]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e321] * other[e23],
                self[e321] * other[e31],
                self[e321] * other[e12],
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[scalar]])
                * (Simd32x3::from([
                    (self[e125] * other[e31]) - (self[e315] * other[e12]),
                    (self[e235] * other[e12]) - (self[e125] * other[e23]),
                    (self[e315] * other[e23]) - (self[e235] * other[e31]),
                ]) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()))
                .extend_to_4(self[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e321] * other[e23],
                self[e321] * other[e31],
                self[e321] * other[e12],
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e321] * other[e1], self[e321] * other[e2], self[e321] * other[e3], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiFlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<Circle> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       26       44        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423],
                self[e321] * other[e431],
                self[e321] * other[e412],
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) - (self[e235] * other[e321]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) - (self[e235] * other[e435]) - (self[e315] * other[e321]),
                (self[e235] * other[e425]) - (self[e315] * other[e415]) - (self[e125] * other[e321]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group2()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) - (self[e315] * other[e423]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       30       48        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423],
                self[e321] * other[e431],
                self[e321] * other[e412],
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) - (self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]),
                (self[e235] * other[e425]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group2().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) - (self[e315] * other[e423]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       26       40        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e125] * other[e42]) - (self[e315] * other[e43]),
                (self[e235] * other[e43]) - (self[e125] * other[e41]),
                (self[e315] * other[e41]) - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) - (self[e235] * other[e45]) - (self[e315] * other[e12]) - (self[e321] * other[e15]),
                (self[e235] * other[e12]) - (self[e315] * other[e45]) - (self[e125] * other[e23]) - (self[e321] * other[e25]),
                (self[e315] * other[e23]) - (self[e235] * other[e31]) - (self[e125] * other[e45]) - (self[e321] * other[e35]),
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) - (self[e125] * other[e42]),
                (self[e125] * other[e41]) - (self[e235] * other[e43]),
                (self[e235] * other[e42]) - (self[e315] * other[e41]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        2        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       44       63        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]),
                (self[e235] * other[e12]) + (self[e125] * other[e4235]),
                (self[e235] * other[e4315]) + (self[e315] * other[e23]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e315] * other[e43]) - (self[e125] * other[e42]),
                    (self[e125] * other[e41]) - (self[e235] * other[e43]),
                    (self[e235] * other[e42]) - (self[e315] * other[e41]),
                ]) + (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e321]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([1.0, 1.0, 1.0, self[e321] * other[e5]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([1.0, 1.0, 1.0, self[e321] * other[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e235] * other[e45]) - (self[e321] * other[e15]),
                -(self[e315] * other[e45]) - (self[e321] * other[e25]),
                -(self[e125] * other[e45]) - (self[e321] * other[e35]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e235] * other[e45]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e315] * other[e45]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
        );
    }
}
impl GeometricProduct<Line> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       15        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) - (self[e125] * other[e425]),
                (self[e125] * other[e415]) - (self[e235] * other[e435]),
                (self[e235] * other[e425]) - (self[e315] * other[e415]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group1()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e321] * other[e415],
                self[e321] * other[e425],
                self[e321] * other[e435],
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * (Simd32x3::from([
                    (self[e315] * other[e435]) - (self[e125] * other[e425]),
                    (self[e125] * other[e415]) - (self[e235] * other[e435]),
                    (self[e235] * other[e425]) - (self[e315] * other[e415]),
                ]) + (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e321] * other[e415],
                self[e321] * other[e425],
                self[e321] * other[e435],
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]) + (self[e321] * other[e5]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       79        0
    //    simd2        1        1        0
    //    simd3       10       14        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       69       97        0
    //  no simd       96      135        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e315] * other[e43]) - (self[e125] * other[e42]),
                    (self[e125] * other[e41]) - (self[e235] * other[e43]),
                    (self[e235] * other[e42]) - (self[e315] * other[e41]),
                ]) + (Simd32x3::from(self[e321]) * other.group5())
                    - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e321]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e1234
            self[e321] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([self[e321] * other[e4235], self[e321] * other[e4315], self[e321] * other[e4125], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd        9       28        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e321] * other[e1]),
                -(self[e315] * other[e4]) - (self[e321] * other[e2]),
                -(self[e125] * other[e4]) - (self[e321] * other[e3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]),
                self[e321] * other[e4],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4],
                self[e315] * other[e4],
                self[e125] * other[e4],
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       10       27        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e321] * other[e4235]) * -1.0, (self[e321] * other[e4315]) * -1.0, (self[e321] * other[e4125]) * -1.0, 0.0])
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()).extend_to_4(0.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                self[e321] * other[e1234],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       50        0
    //    simd3        3        3        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       39       57        0
    //  no simd       48       75        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e321] * other[e423],
                self[e321] * other[e431],
                self[e321] * other[e412],
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]) - (self[e321] * other[e1]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]) - (self[e321] * other[e2]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]) - (self[e321] * other[e3]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e315] * other[e435]) + (self[e315] * other[e3]) - (self[e125] * other[e425]) - (self[e125] * other[e2]),
                    (self[e125] * other[e415]) + (self[e125] * other[e1]) - (self[e235] * other[e435]) - (self[e235] * other[e3]),
                    (self[e235] * other[e425]) + (self[e235] * other[e2]) - (self[e315] * other[e415]) - (self[e315] * other[e1]),
                ]) + (Simd32x3::from(self[e321]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e321])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        2        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       48       67        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e321] * other[e41],
                self[e321] * other[e42],
                self[e321] * other[e43],
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) - (self[e315] * other[e43]) - (self[e321] * other[e4235]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) - (self[e125] * other[e41]) - (self[e321] * other[e4315]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) - (self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e315] * other[e43]) - (self[e125] * other[e42]),
                    (self[e125] * other[e41]) - (self[e235] * other[e43]),
                    (self[e235] * other[e42]) - (self[e315] * other[e41]),
                ]) + (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e321]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiFlector {
    type Output = geometric_product_partial<AntiFlector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e42] * self[e321]) + (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) + (other[e43] * self[e321]) - (other[e42] * self[e1]),
                -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) - (other[e43] * self[e315]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) - (other[e41] * self[e125]) - (other[e45] * self[e2]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) - (other[e42] * self[e235]) - (other[e45] * self[e3]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e35] * self[e2]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e15] * self[e321])
                    - (other[e25] * self[e3]),
                (other[e12] * self[e235]) + (other[e15] * self[e3]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e25] * self[e321])
                    - (other[e35] * self[e1]),
                (other[e23] * self[e315]) + (other[e25] * self[e1]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e15] * self[e2])
                    - (other[e35] * self[e321]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * self.group1())
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e321] * self[e1])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3]),
                (other[e423] * self[e125]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e321] * self[e2])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1]),
                (other[e431] * self[e235]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e321] * self[e3])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e415] * self[e125]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e4] * self[e321]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e425] * self[e3]) - (other[e431] * self[e125]) - (other[e435] * self[e2]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e435] * self[e1]) - (other[e412] * self[e235]) - (other[e415] * self[e3]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e415] * self[e2]) - (other[e423] * self[e315]) - (other[e425] * self[e1]) - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e321]])
                * ((Simd32x3::from(other[scalar]) * self.group0().truncate_to_3()) - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())).extend_to_4(other[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[scalar] * self[e1],
                other[scalar] * self[e2],
                other[scalar] * self[e3],
                (other[scalar] * self[e5]) - (other[e3215] * self[e321]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) + (other[e125] * self[e321]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]),
                (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e235] * self[e3]) - (other[e2] * self[e5]) - (other[e3] * self[e235]),
                (other[e235] * self[e2]) + (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e315] * self[e1]) - (other[e1] * self[e315]) - (other[e3] * self[e5]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       40        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       42        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23])
                    - (self[e315] * other[e12])
                    - (self[e321] * other[e15])
                    - (self[e1] * other[e3215])
                    - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31])
                    - (self[e125] * other[e23])
                    - (self[e321] * other[e25])
                    - (self[e1] * other[e35])
                    - (self[e2] * other[e3215]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12])
                    - (self[e235] * other[e31])
                    - (self[e321] * other[e35])
                    - (self[e2] * other[e15])
                    - (self[e3] * other[e3215]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12])
                    - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e321] * other[e1]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e321] * other[e2]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e125] * other[e2]) - (self[e5] * other[e1]),
                (self[e125] * other[e1]) - (self[e235] * other[e3]) - (self[e5] * other[e2]),
                (self[e235] * other[e2]) - (self[e315] * other[e1]) - (self[e5] * other[e3]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]) - (self[e1] * other[e321]) - (self[e5] * other[e423]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e2] * other[e321]) - (self[e5] * other[e431]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) + (self[e3] * other[e425]) - (self[e125] * other[e431]) - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) + (self[e1] * other[e435]) - (self[e235] * other[e412]) - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) + (self[e2] * other[e415]) - (self[e315] * other[e423]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) - (self[e125] * other[e431]) - (self[e1] * other[e321]) - (self[e5] * other[e423]),
                (self[e125] * other[e423]) - (self[e235] * other[e412]) - (self[e2] * other[e321]) - (self[e5] * other[e431]),
                (self[e235] * other[e431]) - (self[e315] * other[e423]) - (self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e125] * other[e42]) + (self[e5] * other[e41]) - (self[e315] * other[e43]) - (self[e1] * other[e45]),
                (self[e235] * other[e43]) + (self[e5] * other[e42]) - (self[e125] * other[e41]) - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e5] * other[e43]) - (self[e235] * other[e42]) - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e315] * other[e12]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e125] * other[e23]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e235] * other[e31]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e125] * other[e42]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e235] * other[e43]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e315] * other[e41]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       92        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      104      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(other[e1234]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e235] * other[e12]) + (self[e125] * other[e4235]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e235] * other[e4315]) + (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e3] * other[e31]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl GeometricProduct<DualNum> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())).extend_to_4(self[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e1] * other[e12345],
                self[e2] * other[e12345],
                self[e3] * other[e12345],
                (self[e321] * other[e5]) - (self[e5] * other[e12345]),
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e321] * other[e15]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e321] * other[e25]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
    }
}
impl GeometricProduct<Flector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e2] * other[e35])
                    - (self[e125] * other[e4315])
                    - (self[e1] * other[e3215])
                    - (self[e3] * other[e25])
                    - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) + (self[e3] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e1] * other[e35])
                    - (self[e2] * other[e3215])
                    - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) + (self[e1] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e2] * other[e15])
                    - (self[e3] * other[e3215])
                    - (self[e5] * other[e4125]),
                (self[e235] * other[e4235])
                    + (self[e315] * other[e4315])
                    + (self[e125] * other[e4125])
                    + (self[e1] * other[e15])
                    + (self[e2] * other[e25])
                    + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
        );
    }
}
impl GeometricProduct<Line> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e321] * other[e425]) + (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e321] * other[e435]) + (self[e2] * other[e415]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       40        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       42        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      174        0
    //    simd2        4        4        0
    //    simd3       18       18        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      169      201        0
    //  no simd      224      256        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e5] * other[e4]),
                (self[e5] * other[e1234]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e315] * other[e435]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e125] * other[e1]) + (self[e125] * other[e415]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e235] * other[e2]) + (self[e235] * other[e425]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e315] * other[e412]) + (self[e2] * other[e3]) - (self[e125] * other[e431]) - (self[e3] * other[e2]),
                (self[e125] * other[e423]) + (self[e3] * other[e1]) - (self[e235] * other[e412]) - (self[e1] * other[e3]),
                (self[e235] * other[e431]) + (self[e1] * other[e2]) - (self[e315] * other[e423]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * other.group5())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        4        4        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       16       36        0
    //  no simd       24       62        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1] * other[e4],
                self[e2] * other[e4],
                self[e3] * other[e4],
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e5] * other[e4]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e2] * other[e3]) - (self[e3] * other[e2]),
                    (self[e3] * other[e1]) - (self[e1] * other[e3]),
                    (self[e1] * other[e2]) - (self[e2] * other[e1]),
                ]) - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e5])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e315] * other[e3]) - (self[e125] * other[e2]),
                    (self[e125] * other[e1]) - (self[e235] * other[e3]),
                    (self[e235] * other[e2]) - (self[e315] * other[e1]),
                ]) + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                    - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3()))
                .extend_to_4(self[e321])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4],
                self[e315] * other[e4],
                self[e125] * other[e4],
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd       17       32        0
    //  no simd       24       51        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e1] * other[e1234],
                self[e2] * other[e1234],
                self[e3] * other[e1234],
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                    (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                    (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                ]) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3()))
                .extend_to_4(self[e5])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      108        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       97      113        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(other[e4]) * self.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e2] * other[e3])
                    - (self[e125] * other[e431])
                    - (self[e321] * other[e1])
                    - (self[e1] * other[e321])
                    - (self[e3] * other[e2])
                    - (self[e5] * other[e423]),
                (self[e125] * other[e423]) + (self[e3] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e321] * other[e2])
                    - (self[e1] * other[e3])
                    - (self[e2] * other[e321])
                    - (self[e5] * other[e431]),
                (self[e235] * other[e431]) + (self[e1] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e321] * other[e3])
                    - (self[e2] * other[e1])
                    - (self[e3] * other[e321])
                    - (self[e5] * other[e412]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e5]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e315] * other[e3]) + (self[e321] * other[e235]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e125] * other[e415]) + (self[e125] * other[e1]) + (self[e321] * other[e315]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e235] * other[e425]) + (self[e235] * other[e2]) + (self[e321] * other[e125]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e12345]) + (self[e3] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e2] * other[e435]),
                (self[e125] * other[e423]) + (self[e1] * other[e435]) + (self[e2] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e3] * other[e415]),
                (self[e235] * other[e431]) + (self[e2] * other[e415]) + (self[e3] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e1] * other[e425]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       79       95        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(other[e1234]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e125] * other[e42]) + (self[e2] * other[e4125]) + (self[e5] * other[e41])
                    - (self[e315] * other[e43])
                    - (self[e321] * other[e4235])
                    - (self[e1] * other[e45])
                    - (self[e3] * other[e4315]),
                (self[e235] * other[e43]) + (self[e315] * other[e1234]) + (self[e3] * other[e4235]) + (self[e5] * other[e42])
                    - (self[e125] * other[e41])
                    - (self[e321] * other[e4315])
                    - (self[e1] * other[e4125])
                    - (self[e2] * other[e45]),
                (self[e315] * other[e41]) + (self[e125] * other[e1234]) + (self[e1] * other[e4315]) + (self[e5] * other[e43])
                    - (self[e235] * other[e42])
                    - (self[e321] * other[e4125])
                    - (self[e2] * other[e4235])
                    - (self[e3] * other[e45]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43]) + (self[e321] * other[scalar])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiLine {
    type Output = geometric_product_partial<AntiLine>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) - (other[e43] * self[e31]),
                (other[e43] * self[e23]) - (other[e41] * self[e12]),
                (other[e41] * self[e31]) - (other[e42] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]) - (other[e43] * self[e25]) - (other[e12] * self[e31]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]) - (other[e41] * self[e35]) - (other[e23] * self[e12]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[scalar] * self[e12]) - (other[e42] * self[e15]) - (other[e31] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]) - (other[e412] * self[e31]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e4] * self[e12]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e4] * self[e15]) - (other[e412] * self[e25]) - (other[e435] * self[e31]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e4] * self[e25]) - (other[e423] * self[e35]) - (other[e415] * self[e12]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e4] * self[e35]) - (other[e431] * self[e15]) - (other[e425] * self[e23]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e431] * self[e35]) - (other[e4] * self[e15]) - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e412] * self[e15]) - (other[e4] * self[e25]) - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e423] * self[e25]) - (other[e4] * self[e35]) - (other[e2] * self[e23]),
                -(other[e423] * self[e23]) - (other[e431] * self[e31]) - (other[e412] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       15        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) - (other[e125] * self[e31]),
                (other[e125] * self[e23]) - (other[e235] * self[e12]),
                (other[e235] * self[e31]) - (other[e315] * self[e23]),
                0.0,
            ]) + (Simd32x3::from(other[e321]) * self.group1()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e321] * self[e23],
                other[e321] * self[e31],
                other[e321] * self[e12],
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e125] * self[e31]) - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e235] * self[e12]) - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e315] * self[e23]) - (other[e2] * self[e15]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) - (other[e12] * self[e31]),
                (other[e12] * self[e23]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) - (other[e31] * self[e15]) - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) - (self[e31] * other[e12]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) - (self[e12] * other[e23]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) - (self[e23] * other[e31]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar])
                    - (self[e12] * other[e15])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        );
    }
}
impl GeometricProduct<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e35] * other[e431]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e35] * other[e31]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[e15] * other[e12]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e25] * other[e23]) - (self[e23] * other[e25]) - (self[e15] * other[e31]) - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) - (self[e35] * other[e41]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e23] * other[e45],
                self[e31] * other[e45],
                self[e12] * other[e45],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      147        0
    //    simd2        5        6        0
    //    simd3        7        7        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      132      163        0
    //  no simd      160      192        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) - (self[e31] * other[e3]) - (self[e15] * other[e4]) - (self[e35] * other[e431]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e12] * other[e1]) - (self[e15] * other[e412]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e23] * other[e2]) - (self[e25] * other[e423]) - (self[e35] * other[e4]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
            // e5
            -(self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * self.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(other[e4]) * self.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(other[e12345]) * self.group1())
                + (Simd32x3::from(other[e5]) * self.group0())
                + (Simd32x3::from(other[e321]) * self.group1()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
            // e1234
            -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
    }
}
impl GeometricProduct<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e15] * other[e4],
                self[e25] * other[e4],
                self[e35] * other[e4],
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) - (self[e15] * other[e2]),
                0.0,
            ]) + (Simd32x3::from(other[e5]) * self.group0()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                0.0,
            ]) + (Simd32x3::from(other[e3215]) * self.group0()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e23] * other[e4]) + (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) + (self[e31] * other[e4]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) + (self[e12] * other[e4]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) - (self[e31] * other[e3]) - (self[e15] * other[e4]) - (self[e35] * other[e431]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e12] * other[e1]) - (self[e15] * other[e412]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e23] * other[e2]) - (self[e25] * other[e423]) - (self[e35] * other[e4]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiMotor {
    type Output = geometric_product_partial<AntiMotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) - (other[e43] * self[e31]),
                (other[e43] * self[e23]) - (other[e41] * self[e12]),
                (other[e41] * self[e31]) - (other[e42] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e31]) + (other[scalar] * self[e12])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e25] * self[e31])
                    - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) - (other[e412] * self[e31]),
                (other[e431] * self[scalar]) + (other[e412] * self[e23]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e412] * self[scalar]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e4] * self[e15])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e4] * self[e25])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e4] * self[e35])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                -(other[e423] * self[e23]) - (other[e431] * self[e31]) - (other[e412] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[scalar]])
                * (Simd32x3::from([
                    (other[e315] * self[e12]) - (other[e125] * self[e31]),
                    (other[e125] * self[e23]) - (other[e235] * self[e12]),
                    (other[e235] * self[e31]) - (other[e315] * self[e23]),
                ]) + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                    + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e321] * self[e23],
                other[e321] * self[e31],
                other[e321] * self[e12],
                (other[e321] * self[e3215]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) - (other[e12] * self[e31]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[scalar] * self[e23]) - (other[e12] * self[e31]),
                (other[e12] * self[e23]) + (other[scalar] * self[e31]) - (other[e23] * self[e12]),
                (other[e23] * self[e31]) + (other[scalar] * self[e12]) - (other[e31] * self[e23]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e25] * self[e12]) + (other[e3215] * self[e23])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e35] * self[e23]) + (other[e3215] * self[e31])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e3215] * self[e12])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e3215]) * other.group0()),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
    }
}
impl GeometricProduct<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) + (self[scalar] * other[e423]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) + (self[scalar] * other[e431]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) + (self[scalar] * other[e412]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e35] * other[e431]) + (self[e3215] * other[e423]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e3215] * other[e431]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e3215] * other[e412]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e321]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       60       76        0
    //  no simd       72       88        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e321]) * self.group1())
                + (Simd32x4::from(other[e12345]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]) - (self[e35] * other[e431]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]) - (self[e15] * other[e412]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]) - (self[e25] * other[e423]) - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e35] * other[e45]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e25] * other[e43]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e35] * other[e41]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e15] * other[e42]),
                -(self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      104      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(other[e1234]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e3215] * other[e41])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e3215] * other[e42])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e3215] * other[e43])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * (Simd32x3::from([
                    (self[e12] * other[e25]) - (self[e31] * other[e35]),
                    (self[e23] * other[e35]) - (self[e12] * other[e15]),
                    (self[e31] * other[e15]) - (self[e23] * other[e25]),
                ]) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()))
                .extend_to_4(self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e23] * other[e45],
                self[e31] * other[e45],
                self[e12] * other[e45],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       40        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       42        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]) - (self[e31] * other[e435]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]) - (self[e12] * other[e415]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]) - (self[e23] * other[e425]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from(other[e5]) * self.group0()),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      162        0
    //    simd2        7        8        0
    //    simd3       14       14        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      162      193        0
    //  no simd      224      256        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e3215] * other[e423]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e3215] * other[e431]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (self[scalar] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * other.group4())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[scalar]) * other.group7())
                + (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group9())
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e1234
            (self[scalar] * other[e1234]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
    }
}
impl GeometricProduct<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e15] * other[e4],
                self[e25] * other[e4],
                self[e35] * other[e4],
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e12] * other[e2]) - (self[e31] * other[e3]),
                    (self[e23] * other[e3]) - (self[e12] * other[e1]),
                    (self[e31] * other[e1]) - (self[e23] * other[e2]),
                ]) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()))
                .extend_to_4(self[scalar]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                    (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                    (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                ]) + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()))
                .extend_to_4(self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       91      107        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e3215] * other[e423])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e3215] * other[e431])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e3215] * other[e412])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[scalar] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[scalar] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[scalar] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from(other[e321]) * self.group1())
                + (Simd32x4::from(other[e5]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e3215] * other[e423]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e3215] * other[e431]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e3215] * other[e412]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       91      107        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) - (self[e31] * other[e43]),
                (self[e23] * other[e43]) - (self[e12] * other[e41]),
                (self[e31] * other[e41]) - (self[e23] * other[e42]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e3215] * other[e41])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e3215] * other[e42])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e3215] * other[e43])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                -(self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(other[e1234]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e3215]) * other.group0()),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiPlane {
    type Output = geometric_product_partial<AntiPlane>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       29       44        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       35       51        0
    //  no simd       44       60        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e1] * self[e2]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([other[e3215] * self[e1], other[e3215] * self[e2], other[e3215] * self[e3], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e321] * self[e1], other[e321] * self[e2], other[e321] * self[e3], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e1] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e315] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       18        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([(other[e1] * self[e5]) * -1.0, (other[e2] * self[e5]) * -1.0, (other[e3] * self[e5]) * -1.0, 0.0])
                + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       25       40        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e1] * other[e321]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       29       44        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e1] * other[e321]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       25       40        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) - (self[e1] * other[e45]),
                (self[e5] * other[e42]) - (self[e2] * other[e45]),
                (self[e5] * other[e43]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       44       60        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([self[e1] * other[e5], self[e2] * other[e5], self[e3] * other[e5], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([self[e1] * other[e45], self[e2] * other[e45], self[e3] * other[e45], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) - (self[e5] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
        );
    }
}
impl GeometricProduct<Line> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       94        0
    //    simd2        3        3        0
    //    simd3        7        7        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       73      106        0
    //  no simd       96      129        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e5] * other[e4]) * -1.0, self[e5] * other[e1234]])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
            // e5
            (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) + (self[e5] * other[scalar]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
            ]) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]),
            ]) + (Simd32x3::from(self[e5]) * other.group5())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
        );
    }
}
impl GeometricProduct<Plane> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiPlane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        9       27        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
                self[e5] * other[e4],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                self[e1] * other[e5],
                self[e2] * other[e5],
                self[e3] * other[e5],
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiPlane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd        9       24        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().truncate_to_3(),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                self[e5] * other[e1234],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       39       55        0
    //  no simd       48       64        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) - (self[e2] * other[e423]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e1] * other[e321]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]) - (self[e2] * other[e321]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]) - (self[e3] * other[e321]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       39       55        0
    //  no simd       48       64        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiScalar {
    type Output = geometric_product_partial<AntiScalar>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * other.group2(),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[e12345]) * other.group0());
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<AntiFlector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ other[e12345] * self[e12345] * -1.0);
    }
}
impl GeometricProduct<Circle> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Dipole> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[e12345]) * other.group0() * Simd32x2::from(-1.0));
    }
}
impl GeometricProduct<FlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
    }
}
impl GeometricProduct<Flector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Motor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * crate::swizzle!(other.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group6().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group3().truncate_to_3(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<RoundPoint> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Scalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * other[scalar]);
    }
}
impl GeometricProduct<Sphere> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
        );
    }
}
impl GeometricProduct<VersorEven> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl std::ops::Div<geometric_product> for Circle {
    type Output = geometric_product_partial<Circle>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      106        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       91      107        0
    //  no simd       94      110        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e15] * self[e431])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      130        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      119      135        0
    //  no simd      134      150        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431])
                    - (other[e4] * self[e125])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e2] * self[e435]) + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e3] * self[e415]) + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e1] * self[e425]) + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e321]])
                * ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar]),
            // e235, e315, e125, e4
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], 0.0])
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       26       40        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
                -(other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) - (other[e235] * self[e425]) - (other[e321] * self[e125]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]) - (other[e1] * self[e321]) - (other[e5] * self[e423]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]) - (other[e2] * self[e321]) - (other[e5] * self[e431]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e2] * self[e435]) - (other[e125] * self[e431]) - (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e3] * self[e415]) - (other[e235] * self[e412]) - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) - (other[e315] * self[e423]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e15] * self[e321]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e15] * self[e435]) - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e25] * self[e415]) - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) + (other[scalar] * self[e423]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) + (other[scalar] * self[e431]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) + (other[scalar] * self[e412]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(self[e321]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       25       40        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e5] * self[e423]),
                -(other[e2] * self[e321]) - (other[e5] * self[e431]),
                -(other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       81       97        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) - (other[e431] * self[e435]) - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431]) - (other[e412] * self[e415]) - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412]) - (other[e423] * self[e425]) - (other[e415] * self[e431]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      106        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       91      107        0
    //  no simd       94      110        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e425] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e412] * other[e425])
                    - (self[e435] * other[e431]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e415] * other[e412]),
                (self[e423] * other[e425]) + (self[e412] * other[e321]) + (self[e415] * other[e431])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e321])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e321])
                    - (self[e125] * other[e12345]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31])
                    - (self[e425] * other[e35])
                    - (self[e321] * other[e15])
                    - (self[e235] * other[e45])
                    - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12])
                    - (self[e435] * other[e15])
                    - (self[e321] * other[e25])
                    - (self[e315] * other[e45])
                    - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23])
                    - (self[e415] * other[e25])
                    - (self[e321] * other[e35])
                    - (self[e235] * other[e31])
                    - (self[e125] * other[e45]),
                -(self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      130        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      119      135        0
    //  no simd      134      150        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e125] * other[e31]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e235] * other[e12]) + (self[e125] * other[e4235]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315]) + (self[e315] * other[e23]) - (self[e415] * other[e25]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl GeometricProduct<DualNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       26        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e235] * other[e12345]),
                -(self[e425] * other[e5]) - (self[e315] * other[e12345]),
                -(self[e435] * other[e5]) - (self[e125] * other[e12345]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]) - (self[e321] * other[e15]) - (self[e235] * other[e45]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]) - (self[e321] * other[e25]) - (self[e315] * other[e45]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]) - (self[e321] * other[e35]) - (self[e125] * other[e45]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e415] * other[e45]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]) - (self[e425] * other[e45]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]) - (self[e435] * other[e45]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e321] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) - (self[e412] * other[e15]) - (self[e321] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) - (self[e423] * other[e25]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e315] * other[e4125])
                    - (self[e425] * other[e35])
                    - (self[e235] * other[e45])
                    - (self[e125] * other[e4315]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e125] * other[e4235])
                    - (self[e435] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e235] * other[e4315])
                    - (self[e415] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) - (self[e435] * other[e315]) - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) - (self[e415] * other[e125]) - (self[e235] * other[e435]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) - (self[e425] * other[e235]) - (self[e315] * other[e415]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e423] * other[e12345]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]) - (self[e431] * other[e12345]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345]),
                (self[e321] * other[e12345]) - (self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      198      230        0
    //    simd2        1        1        0
    //    simd3       24       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      227      259        0
    //  no simd      288      320        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2())
                - (Simd32x3::from(other[e5]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       35       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e235] * other[e4]),
                -(self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e315] * other[e4]),
                -(self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<Scalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        1        1        0
    // Totals...
    // yes simd       33       48        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      140        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      129      145        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412])
                    - (self[e423] * other[e12345])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e415] * other[e4])
                    - (self[e435] * other[e431]),
                (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e431] * other[e12345])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e425] * other[e4]),
                (self[e415] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e412] * other[e12345])
                    - (self[e425] * other[e423])
                    - (self[e435] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e321] * other[e415]) + (self[e315] * other[e412])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125]) + (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235]) + (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      124        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      117      133        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl std::ops::Div<geometric_product> for CircleRotor {
    type Output = geometric_product_partial<CircleRotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      113        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       99      115        0
    //  no simd      105      121        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e45] * self[e12345])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      141        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      131      147        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e415])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e425])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415])
                    - (other[e423] * self[e425])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e435])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e4] * self[e125])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e321] * self[e415])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e321] * self[e425])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd3        1        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        7       30        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e321]])
                * ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar]),
            // e235, e315, e125, e5
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], (other[e3215] * self[e321]) * -1.0])
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3215] * self[e423], other[e3215] * self[e431], other[e3215] * self[e412], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       27       42        0
    //  no simd       30       44        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
                (other[e321] * self[e12345]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e321] * self[e125]),
                0.0,
            ]) + (Simd32x3::from(self[e321]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       69       85        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]) - (other[e1] * self[e321]) - (other[e5] * self[e423]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]) - (other[e2] * self[e321]) - (other[e5] * self[e431]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) - (other[e12] * self[e425]) - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) - (other[e23] * self[e435]) - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) - (other[e31] * self[e415]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e15] * self[e321])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435])
                    - (other[e25] * self[e321]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415])
                    - (other[e35] * self[e321]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       60       76        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                - (Simd32x4::from(self[e321]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]) - (other[e15] * self[e412]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       29       44        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e5] * self[e423]),
                -(other[e2] * self[e321]) - (other[e5] * self[e431]),
                -(other[e3] * self[e321]) - (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for CircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      106        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       91      107        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      113        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       99      115        0
    //  no simd      105      121        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e12345] * self[e423]),
                (other[e423] * self[e435]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e12345] * self[e431]),
                (other[e431] * self[e415]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431])
                    - (other[e12345] * self[e412]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e12345] * self[e321])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415])
                    + (other[e431] * self[e425])
                    + (other[e412] * self[e435])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e125] * other[e42]) + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e235] * other[e43]) + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e315] * other[e41]) + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e235] * other[e41]) + (self[e315] * other[e42]) + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e12345] * other[e15])
                    - (self[e425] * other[e35])
                    - (self[e321] * other[e15])
                    - (self[e235] * other[e45])
                    - (self[e315] * other[e12]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e12345] * other[e25])
                    - (self[e435] * other[e15])
                    - (self[e321] * other[e25])
                    - (self[e315] * other[e45])
                    - (self[e125] * other[e23]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e12345] * other[e35])
                    - (self[e415] * other[e25])
                    - (self[e321] * other[e35])
                    - (self[e235] * other[e31])
                    - (self[e125] * other[e45]),
                -(self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35])
                    - (self[e235] * other[e23])
                    - (self[e315] * other[e31])
                    - (self[e125] * other[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e125] * other[e42]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41]),
                -(self[e423] * other[e23])
                    - (self[e431] * other[e31])
                    - (self[e412] * other[e12])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      141        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      131      147        0
    //  no simd      149      165        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e125] * other[e31]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e235] * other[e4315]) + (self[e315] * other[e23]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl GeometricProduct<DualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        7       29        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e235] * other[e12345]),
                -(self[e425] * other[e5]) - (self[e315] * other[e12345]),
                -(self[e435] * other[e5]) - (self[e125] * other[e12345]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e423] * other[e5],
                self[e431] * other[e5],
                self[e412] * other[e5],
                (self[e321] * other[e5]) - (self[e12345] * other[e5]),
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e423] * other[e45],
                self[e431] * other[e45],
                self[e412] * other[e45],
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]) - (self[e321] * other[e15]) - (self[e235] * other[e45]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]) - (self[e321] * other[e25]) - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]) - (self[e321] * other[e35]) - (self[e125] * other[e45]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e415] * other[e45]),
                (self[e423] * other[e35]) - (self[e412] * other[e15]) - (self[e425] * other[e45]),
                (self[e431] * other[e15]) - (self[e423] * other[e25]) - (self[e435] * other[e45]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]) - (self[e423] * other[e4315]),
                -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) - (self[e431] * other[e35]) - (self[e321] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) - (self[e412] * other[e15]) - (self[e321] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) - (self[e423] * other[e25]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15])
                    - (self[e425] * other[e35])
                    - (self[e235] * other[e45])
                    - (self[e125] * other[e4315]),
                (self[e415] * other[e35]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25])
                    - (self[e435] * other[e15])
                    - (self[e235] * other[e4125])
                    - (self[e315] * other[e45]),
                (self[e425] * other[e15]) + (self[e235] * other[e4315]) + (self[e12345] * other[e35])
                    - (self[e415] * other[e25])
                    - (self[e315] * other[e4235])
                    - (self[e125] * other[e45]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                    - (self[e415] * other[e15])
                    - (self[e425] * other[e25])
                    - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) - (self[e412] * other[e315]) - (self[e435] * other[e425]) - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) - (self[e423] * other[e125]) - (self[e415] * other[e435]) - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) - (self[e431] * other[e235]) - (self[e425] * other[e415]) - (self[e12345] * other[e435]),
                -(self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e435] * other[e315])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e235] * other[e435])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e315] * other[e415])
                    - (self[e12345] * other[e125]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e435]) - (self[e412] * other[e425]),
                (self[e412] * other[e415]) - (self[e423] * other[e435]),
                (self[e423] * other[e425]) - (self[e431] * other[e415]),
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e12345] * other[e435]),
                (self[e321] * other[e12345]) - (self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e12345] * other[e125]),
                (self[e423] * other[e415]) + (self[e431] * other[e425]) + (self[e412] * other[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) - (self[e431] * other[e125]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) - (self[e412] * other[e235]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) - (self[e423] * other[e315]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      218      250        0
    //    simd2        1        1        0
    //    simd3       28       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      251      283        0
    //  no simd      320      352        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345]),
                (self[e12345] * other[scalar])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e12345] * other[e3215])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e12345] * other[e125]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e12345] * other[e321])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(self[e321]) * other.group7())
                - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e412] * other[e315])
                    - (self[e435] * other[e425])
                    - (self[e125] * other[e431]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e415] * other[e435])
                    - (self[e235] * other[e412]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e425] * other[e415])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e31]) + (self[e412] * other[e4315]) + (self[e435] * other[e42])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12]) + (self[e423] * other[e4125]) + (self[e415] * other[e43])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23]) + (self[e431] * other[e4235]) + (self[e425] * other[e41])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e12345] * other[e3])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e12345] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       29       44        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
        );
    }
}
impl GeometricProduct<RoundPoint> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       40       55        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e321] * other[e1]) - (self[e235] * other[e4]),
                -(self[e431] * other[e5]) - (self[e321] * other[e2]) - (self[e315] * other[e4]),
                -(self[e412] * other[e5]) - (self[e321] * other[e3]) - (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]) - (self[e12345] * other[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) + (self[e12345] * other[e1]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) + (self[e12345] * other[e2]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e12345] * other[e3]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<Scalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       40       55        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]) - (self[e321] * other[e4235]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]) - (self[e321] * other[e4315]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e321] * other[e1234]) + (self[e12345] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
        );
    }
}
impl GeometricProduct<VersorEven> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      148        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      139      155        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412])
                    - (self[e431] * other[e3])
                    - (self[e412] * other[e425])
                    - (self[e415] * other[e4])
                    - (self[e435] * other[e431])
                    - (self[e12345] * other[e423]),
                (self[e435] * other[e423])
                    - (self[e423] * other[e435])
                    - (self[e412] * other[e1])
                    - (self[e415] * other[e412])
                    - (self[e425] * other[e4])
                    - (self[e12345] * other[e431]),
                (self[e415] * other[e431])
                    - (self[e423] * other[e2])
                    - (self[e431] * other[e415])
                    - (self[e425] * other[e423])
                    - (self[e435] * other[e4])
                    - (self[e12345] * other[e412]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e423] * other[e5])
                    - (self[e412] * other[e315])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e321] * other[e1])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431])
                    - (self[e12345] * other[e415]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e423] * other[e125])
                    - (self[e431] * other[e5])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e321] * other[e2])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4])
                    - (self[e12345] * other[e425]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e431] * other[e235])
                    - (self[e412] * other[e5])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e321] * other[e3])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4])
                    - (self[e12345] * other[e435]),
                (self[e321] * other[e12345]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e12345] * other[e321])
                    - (self[e423] * other[e235])
                    - (self[e431] * other[e315])
                    - (self[e412] * other[e125])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e423] * other[e415])
                    + (self[e431] * other[e425])
                    + (self[e412] * other[e435])
                    + (self[e415] * other[e423])
                    + (self[e425] * other[e431])
                    + (self[e435] * other[e412])
                    - (self[e423] * other[e1])
                    - (self[e431] * other[e2])
                    - (self[e412] * other[e3])
                    - (self[e321] * other[e4]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e321] * other[e415])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1])
                    - (self[e431] * other[e125])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e423] * other[e125])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e321] * other[e425])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2])
                    - (self[e412] * other[e235])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e431] * other[e235])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e12345] * other[e3])
                    - (self[e423] * other[e315])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      132        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      143        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e12345]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e12345] * other[e23])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43]),
                (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e12345] * other[e31])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41]),
                (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e12345] * other[e12])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e12345] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e431] * other[e35])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e412] * other[e15])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e423] * other[e25])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e12345] * other[e4125]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
        );
    }
}
impl std::ops::Div<geometric_product> for Dipole {
    type Output = geometric_product_partial<Dipole>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      102        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       88      104        0
    //  no simd       94      110        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      126        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      116      132        0
    //  no simd      134      150        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e4] * self[e23]) + (other[e3] * self[e42]) - (other[e412] * self[e31]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e4] * self[e31]) + (other[e1] * self[e43]) - (other[e423] * self[e12]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e4] * self[e12]) + (other[e2] * self[e41]) - (other[e431] * self[e23]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43]) + (other[e4] * self[e15]) + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41]) + (other[e4] * self[e25]) + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e4] * self[e35]) + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]) + (other[e2] * self[e12]) + (other[e5] * self[e41])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]) + (other[e3] * self[e23]) + (other[e5] * self[e42])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e1] * self[e31]) + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[scalar] * self[e15], other[scalar] * self[e25], other[scalar] * self[e35], 0.0])
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e3215]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       26       44        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41],
                other[e321] * self[e42],
                other[e321] * self[e43],
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) - (other[e125] * self[e42]),
                (other[e125] * self[e41]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) - (other[e315] * self[e41]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e321] * self[e15]) - (other[e125] * self[e31]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]) - (other[e235] * self[e12]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]) - (other[e315] * self[e23]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e43]) - (other[e125] * self[e42]),
                (other[e125] * self[e41]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) - (other[e315] * self[e41]),
                0.0,
            ]) + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]) - (other[e125] * self[e42]) - (other[e1] * self[e45]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]) - (other[e235] * self[e43]) - (other[e2] * self[e45]),
                (other[e235] * self[e42]) + (other[e5] * self[e43]) - (other[e315] * self[e41]) - (other[e3] * self[e45]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e125] * self[e31]) - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e235] * self[e12]) - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e315] * self[e23]) - (other[e2] * self[e15]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e125] * self[e42]) - (other[e3] * self[e31]),
                (other[e125] * self[e41]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e235] * self[e43]) - (other[e1] * self[e12]),
                (other[e235] * self[e42]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e315] * self[e41]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) - (other[e31] * self[e15]) - (other[e25] * self[e23]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e35] * self[e42]) - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e15] * self[e43]) - (other[e35] * self[e41]),
                (other[e12] * self[e45]) + (other[e25] * self[e41]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) + (other[e3215] * self[e41]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) + (other[e3215] * self[e42]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e3215] * self[e43]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e3215] * self[e23])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e3215] * self[e31])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e3215] * self[e12])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) - (other[e25] * self[e43]) - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) - (other[e35] * self[e41]) - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) - (other[e15] * self[e42]) - (other[e3215] * self[e43]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       25       40        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e5] * self[e41]) - (other[e1] * self[e45]),
                (other[e5] * self[e42]) - (other[e2] * self[e45]),
                (other[e5] * self[e43]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e2] * self[e15]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e2] * self[e23]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        );
    }
}
impl GeometricProduct<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       81       97        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) - (other[e412] * self[e31]) - (other[e435] * self[e42]) - (other[e321] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) - (other[e423] * self[e12]) - (other[e415] * self[e43]) - (other[e321] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) - (other[e431] * self[e23]) - (other[e425] * self[e41]) - (other[e321] * self[e43]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      106        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       91      107        0
    //  no simd       94      110        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e412] * self[e31])
                    - (other[e435] * self[e42])
                    - (other[e321] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e423] * self[e12])
                    - (other[e415] * self[e43])
                    - (other[e321] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e12345] * self[e43])
                    - (other[e431] * self[e23])
                    - (other[e425] * self[e41])
                    - (other[e321] * self[e43]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e315] * self[e43]) + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e125] * self[e41]) + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e12345] * self[e15])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e12345] * self[e25])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e12345] * self[e35])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e315] * self[e31])
                    - (other[e125] * self[e12]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       81       97        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e31] * self[e43]) - (other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e12] * self[e42]),
                (other[e43] * self[e23]) + (other[e12] * self[e41]) - (other[e41] * self[e12]) - (other[e42] * self[e45]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e23] * self[e42]) - (other[e42] * self[e23]) - (other[e43] * self[e45]) - (other[e31] * self[e41]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]),
                -(other[e41] * self[e23]) - (other[e42] * self[e31]) - (other[e43] * self[e12]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]) - (other[e43] * self[e25]) - (other[e25] * self[e43]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]) - (other[e41] * self[e35]) - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]) - (other[e42] * self[e15]) - (other[e15] * self[e42]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      142        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      128      144        0
    //  no simd      134      150        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e31] * other[e1234])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e12] * other[e1234])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<DualNum> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], 0.0])
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       26       40        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) - (self[e31] * other[e35]) - (self[e15] * other[e45]),
                (self[e23] * other[e35]) - (self[e12] * other[e15]) - (self[e25] * other[e45]),
                (self[e31] * other[e15]) - (self[e23] * other[e25]) - (self[e35] * other[e45]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e43] * other[e25]) + (self[e45] * other[e4235]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e42] * other[e3215]) + (self[e45] * other[e4315]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e43] * other[e3215]) + (self[e45] * other[e4125]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) - (self[e42] * other[e125]) - (self[e45] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) - (self[e43] * other[e235]) - (self[e45] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) - (self[e41] * other[e315]) - (self[e45] * other[e435]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      182      215        0
    //    simd2        9        9        0
    //    simd3       20       20        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      218      251        0
    //  no simd      288      321        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0])
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e31] * other[e35]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e12] * other[e15]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e23] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) - (self[e42] * other[e12]) - (self[e42] * other[e4125]) - (self[e31] * other[e43]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) - (self[e43] * other[e23]) - (self[e43] * other[e4235]) - (self[e12] * other[e41]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) - (self[e41] * other[e31]) - (self[e41] * other[e4315]) - (self[e23] * other[e42]),
            ]) + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e45]) * other.group4()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) - (self[e42] * other[e35]) - (self[e31] * other[e12]) - (self[e25] * other[e43]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) - (self[e43] * other[e15]) - (self[e12] * other[e23]) - (self[e35] * other[e41]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) - (self[e41] * other[e25]) - (self[e23] * other[e31]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group2()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e23] * other[e412]) - (self[e12] * other[e423]),
                (self[e31] * other[e423]) - (self[e23] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e45]) * other.group7()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e31] * other[e125]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e12] * other[e235]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e23] * other[e315]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group2())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            -(self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       35       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]) - (self[e45] * other[e1]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]) - (self[e45] * other[e2]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]) - (self[e45] * other[e3]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) - (self[e15] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]) - (self[e45] * other[e4]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e12] * other[e2]) - (self[e31] * other[e3]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) - (self[e12] * other[e1]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) - (self[e23] * other[e2]) - (self[e35] * other[e4]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
        );
    }
}
impl GeometricProduct<Scalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        1        1        0
    // Totals...
    // yes simd       33       48        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      132        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      123      139        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) - (self[e31] * other[e412]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) - (self[e12] * other[e423]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) - (self[e23] * other[e431]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e15] * other[e412]) + (self[e25] * other[e4])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e25] * other[e423]) + (self[e35] * other[e4])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      148        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      135      151        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[scalar]) + (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e42] * other[scalar]) + (self[e23] * other[e43]) + (self[e31] * other[e1234])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e43] * other[scalar]) + (self[e31] * other[e41]) + (self[e12] * other[e1234])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e45] * other[e43]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45]),
                -(self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e35] * other[e42])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e25] * other[e1234])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e35] * other[e1234])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl std::ops::Div<geometric_product> for DipoleInversion {
    type Output = geometric_product_partial<DipoleInversion>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      137        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      128      144        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[scalar] * self[e41])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[scalar] * self[e42])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[scalar] * self[e43])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      177        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      173      189        0
    //  no simd      209      225        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e4] * self[e4235])
                    - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e4] * self[e4315])
                    - (other[e2] * self[e1234]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e4] * self[e4125])
                    - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        4       22        0
    //  no simd       14       37        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[scalar] * self[e41], other[scalar] * self[e42], other[scalar] * self[e43], other[e3215] * self[e1234]]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3215] * self[e41], other[e3215] * self[e42], other[e3215] * self[e43], (other[e3215] * self[e1234]) * -1.0])
                + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                    + (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                    + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3()))
                .extend_to_4(other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e3215] * self[e41]) * -1.0,
                (other[e3215] * self[e42]) * -1.0,
                (other[e3215] * self[e43]) * -1.0,
                other[e3215] * self[e45],
            ]) + (Simd32x4::from(other[scalar]) * self.group3()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       49        0
    //    simd3        2        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       37       55        0
    //  no simd       44       71        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41],
                other[e321] * self[e42],
                other[e321] * self[e43],
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) - (other[e125] * self[e31]) - (other[e125] * self[e4315]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) - (other[e235] * self[e12]) - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) - (other[e315] * self[e23]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e315] * self[e43]) - (other[e125] * self[e42]),
                    (other[e125] * self[e41]) - (other[e235] * self[e43]),
                    (other[e235] * self[e42]) - (other[e315] * self[e41]),
                ]) + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                    + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       92      108        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e3215] * self[e41]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e3215] * self[e42]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e3215] * self[e43]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       44       60        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for DipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      130        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      119      135        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      137        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      128      144        0
    //  no simd      149      165        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * other.group2()),
        );
    }
}
impl GeometricProduct<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      134        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      122      138        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      177      193        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      185      201        0
    //  no simd      209      225        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e31] * self[e43]) + (other[e4235] * self[e1234]) + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e12] * self[e41]) + (other[e4315] * self[e1234]) + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e4235] * self[e42]) + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        4       18        0
    //  no simd       15       34        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41] * other[e12345], self[e42] * other[e12345], self[e43] * other[e12345], self[e1234] * other[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e23] * other[e12345], self[e31] * other[e12345], self[e12] * other[e12345], (self[e45] * other[e12345]) * -1.0])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e4235] * other[e5], self[e4315] * other[e5], self[e4125] * other[e5], 0.0])
                + (Simd32x4::from(other[e5]) * self.group1())
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * ((Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())).extend_to_4(self[e1234]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       53        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       44       63        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e41] * other[e45],
                self[e42] * other[e45],
                self[e43] * other[e45],
                (self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e1234] * other[e15]) + (self[e4235] * other[e45]) - (self[e42] * other[e35]),
                (self[e41] * other[e35]) + (self[e1234] * other[e25]) + (self[e4315] * other[e45]) - (self[e43] * other[e15]),
                (self[e42] * other[e15]) + (self[e1234] * other[e35]) + (self[e4125] * other[e45]) - (self[e41] * other[e25]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * (Simd32x3::from([
                    (self[e12] * other[e25]) + (self[e4125] * other[e25]) - (self[e31] * other[e35]) - (self[e4315] * other[e35]),
                    (self[e23] * other[e35]) + (self[e4235] * other[e35]) - (self[e12] * other[e15]) - (self[e4125] * other[e15]),
                    (self[e31] * other[e15]) + (self[e4315] * other[e15]) - (self[e23] * other[e25]) - (self[e4235] * other[e25]),
                ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3()))
                .extend_to_4(self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) - (self[e43] * other[e25]) - (self[e1234] * other[e15]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) - (self[e41] * other[e35]) - (self[e1234] * other[e25]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) - (self[e42] * other[e15]) - (self[e1234] * other[e35]),
                -(self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      112        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      104      120        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group1())
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e45] * other[e4235])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    - (self[e42] * other[e35])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e45] * other[e4315])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    - (self[e43] * other[e15])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e45] * other[e4125])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    - (self[e41] * other[e25])
                    - (self[e4235] * other[e4315]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e1234] * other[e3215]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e25] * other[e4125])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e1234] * other[e45]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e12] * other[e4315])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e1234] * other[e15]),
                (self[e43] * other[e15]) + (self[e23] * other[e4125]) + (self[e31] * other[e45])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e1234] * other[e25]),
                (self[e41] * other[e25]) + (self[e31] * other[e4235]) + (self[e12] * other[e45])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e1234] * other[e35]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e1234] * other[e425]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e1234] * other[e435]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[e1234] * other[e235]) - (self[e42] * other[e125]) - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e1234] * other[e315]) - (self[e43] * other[e235]) - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e1234] * other[e125]) - (self[e41] * other[e315]) - (self[e23] * other[e425]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e4125] * other[e425]),
                (self[e41] * other[e125]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435]),
                (self[e42] * other[e235]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      104      120        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]) - (self[e42] * other[e435]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) - (self[e43] * other[e415]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) - (self[e41] * other[e425]),
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e1234] * other[e235])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e1234] * other[e315])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e1234] * other[e125])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345]),
                -(self[e41] * other[e415]) - (self[e42] * other[e425]) - (self[e43] * other[e435]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
    }
}
impl GeometricProduct<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      274      306        0
    //    simd2       11       11        0
    //    simd3       36       36        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      332      364        0
    //  no simd      448      480        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[scalar]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group5())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e45]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e35] * other[e42]) + (self[e4125] * other[e4315])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e4235] * other[e4125])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e4315] * other[e4235])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e1234] * other[e235])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e1234] * other[e315])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e1234] * other[e125])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) + (self[e4315] * other[e412]),
                (self[e23] * other[e412]) + (self[e4125] * other[e423]),
                (self[e31] * other[e423]) + (self[e4235] * other[e431]),
            ]) + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e235, e315, e125
            Simd32x3::from([
                (self[e12] * other[e315]) + (self[e35] * other[e2]) + (self[e35] * other[e425]) + (self[e4125] * other[e315])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e3])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125]) + (self[e15] * other[e3]) + (self[e15] * other[e435]) + (self[e4235] * other[e125])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e1])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235]) + (self[e25] * other[e1]) + (self[e25] * other[e415]) + (self[e4315] * other[e235])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e2])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43])
                    - (self[e1234] * other[e15])
                    - (self[e4315] * other[e12]),
                (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41])
                    - (self[e1234] * other[e25])
                    - (self[e4125] * other[e23]),
                (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42])
                    - (self[e1234] * other[e35])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group3()),
            // e1234
            (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       59        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       59       75        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]) - (self[e1234] * other[e1]) - (self[e4235] * other[e4]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]) - (self[e1234] * other[e2]) - (self[e4315] * other[e4]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]) - (self[e1234] * other[e3]) - (self[e4125] * other[e4]),
                (self[e1234] * other[e5]) + (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]) - (self[e45] * other[e1]) - (self[e4125] * other[e2]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]) - (self[e45] * other[e2]) - (self[e4235] * other[e3]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]) - (self[e45] * other[e3]) - (self[e4315] * other[e1]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e4235] * other[e5]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e4315] * other[e5]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e4125] * other[e5]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e42] * other[e5]) + (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e43] * other[e5]) + (self[e31] * other[e1]) - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
    }
}
impl GeometricProduct<Scalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       50       66        0
    //  no simd       59       75        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]) - (self[e4235] * other[e1234]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]) - (self[e4315] * other[e1234]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]) - (self[e4125] * other[e1234]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group0())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e15] * other[e1234]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) + (self[e25] * other[e1234]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) + (self[e35] * other[e1234]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      180        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      179      195        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[e4315] * other[e412])
                    - (self[e1234] * other[e1])
                    - (self[e4235] * other[e4]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e4125] * other[e423])
                    - (self[e1234] * other[e2])
                    - (self[e4315] * other[e4]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e4235] * other[e431])
                    - (self[e1234] * other[e3])
                    - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e1234] * other[e235])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e1234] * other[e315])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e1234] * other[e125])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e31] * other[e125])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e4315] * other[e125]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e12] * other[e235])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e4125] * other[e235]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e23] * other[e315])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e4235] * other[e315]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e5]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e15] * other[e4])
                    - (self[e35] * other[e431])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e15] * other[e412])
                    - (self[e25] * other[e4])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e25] * other[e423])
                    - (self[e35] * other[e4])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      196        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      191      207        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[scalar])
                    + (self[e43] * other[e31])
                    + (self[e43] * other[e4315])
                    + (self[e12] * other[e42])
                    + (self[e1234] * other[e4235])
                    + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e4235] * other[e1234]),
                (self[e41] * other[e12])
                    + (self[e41] * other[e4125])
                    + (self[e42] * other[scalar])
                    + (self[e23] * other[e43])
                    + (self[e1234] * other[e4315])
                    + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e4315] * other[e1234]),
                (self[e42] * other[e23])
                    + (self[e42] * other[e4235])
                    + (self[e43] * other[scalar])
                    + (self[e31] * other[e41])
                    + (self[e1234] * other[e4125])
                    + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e4125] * other[e1234]),
                -(self[e41] * other[e15])
                    - (self[e42] * other[e25])
                    - (self[e43] * other[e35])
                    - (self[e23] * other[e23])
                    - (self[e31] * other[e31])
                    - (self[e12] * other[e12])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215])
                    + (self[e43] * other[e25])
                    + (self[e12] * other[e31])
                    + (self[e45] * other[e4235])
                    + (self[e35] * other[e42])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    + (self[e3215] * other[e41])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e41] * other[e35])
                    + (self[e42] * other[e3215])
                    + (self[e23] * other[e12])
                    + (self[e45] * other[e4315])
                    + (self[e15] * other[e43])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    + (self[e3215] * other[e42])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e42] * other[e15])
                    + (self[e43] * other[e3215])
                    + (self[e31] * other[e23])
                    + (self[e45] * other[e4125])
                    + (self[e25] * other[e41])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    + (self[e3215] * other[e43])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    + (self[e3215] * other[e23])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e35] * other[e4235])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    + (self[e3215] * other[e31])
                    - (self[e12] * other[e15])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    + (self[e3215] * other[e12])
                    - (self[e23] * other[e25])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                    - (self[e41] * other[e23])
                    - (self[e41] * other[e4235])
                    - (self[e42] * other[e31])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e25] * other[e43])
                    - (self[e1234] * other[e15])
                    - (self[e4315] * other[e12]),
                (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e35] * other[e41])
                    - (self[e1234] * other[e25])
                    - (self[e4125] * other[e23]),
                (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e15] * other[e42])
                    - (self[e1234] * other[e35])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group3()),
        );
    }
}
impl std::ops::Div<geometric_product> for DualNum {
    type Output = geometric_product_partial<DualNum>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        7       34        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], (other[e45] * self[e5]) * -1.0])
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e41] * self[e5], other[e42] * self[e5], other[e43] * self[e5], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd3        2        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        4       24        0
    //  no simd       14       45        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423] * self[e12345], other[e431] * self[e12345], other[e412] * self[e12345], other[e4] * self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e415] * self[e12345]) * -1.0,
                (other[e425] * self[e12345]) * -1.0,
                (other[e435] * self[e12345]) * -1.0,
                other[e321] * self[e12345],
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                    - (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3()))
                .extend_to_4(other[e4])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1] * self[e12345], other[e2] * self[e12345], other[e3] * self[e12345], (other[e5] * self[e12345]) * -1.0])
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(other[e3215] * self[e12345]) + (other[scalar] * self[e5]), other[scalar] * self[e12345]]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([1.0, 1.0, 1.0, other[e321] * self[e5]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())).extend_to_4(other[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e1] * self[e12345],
                other[e2] * self[e12345],
                other[e3] * self[e12345],
                -(other[e321] * self[e5]) - (other[e5] * self[e12345]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiMotor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group0()) + (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiPlane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e1] * self[e5], other[e2] * self[e5], other[e3] * self[e5], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiScalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[e12345]) * self.group0() * Simd32x2::from(-1.0));
    }
}
impl GeometricProduct<Circle> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        6       30        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e235] * self[e12345]),
                -(other[e425] * self[e5]) - (other[e315] * self[e12345]),
                -(other[e435] * self[e5]) - (other[e125] * self[e12345]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<CircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        7       33        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e235] * self[e12345]),
                -(other[e425] * self[e5]) - (other[e315] * self[e12345]),
                -(other[e435] * self[e5]) - (other[e125] * self[e12345]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e423] * self[e5],
                other[e431] * self[e5],
                other[e412] * self[e5],
                -(other[e321] * self[e5]) - (other[e12345] * self[e5]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Dipole> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        4        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        7       31        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], 0.0])
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd3        1        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        7       20        0
    //  no simd       15       33        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41] * self[e12345], other[e42] * self[e12345], other[e43] * self[e12345], other[e1234] * self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e23] * self[e12345]),
                (other[e42] * self[e5]) + (other[e31] * self[e12345]),
                (other[e43] * self[e5]) + (other[e12] * self[e12345]),
                -(other[e45] * self[e12345]) - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e23] * self[e5], other[e31] * self[e5], other[e12] * self[e5], 0.0])
                + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())).extend_to_4(other[e1234]),
        );
    }
}
impl GeometricProduct<DualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([-(other[e5] * self[e12345]) - (other[e12345] * self[e5]), other[e12345] * self[e12345]]) * Simd32x2::from([1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([1.0, 1.0, 1.0, self[e5] * other[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
        );
    }
}
impl GeometricProduct<Flector> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       23        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e45]])
                * ((Simd32x3::from(self[e12345]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())).extend_to_4(self[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12345] * other[e4235],
                self[e12345] * other[e4315],
                self[e12345] * other[e4125],
                (self[e12345] * other[e3215]) - (self[e5] * other[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for DualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<Motor> for DualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(self[e5]) * other.group0()) - (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       29        0
    //    simd3        4       10        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       42        0
    //  no simd       32       71        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e5] * other[e4]) - (self[e12345] * other[e12345]), (self[e5] * other[e1234]) + (self[e12345] * other[scalar])]),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (-(Simd32x3::from(self[e5]) * other.group4()) - (Simd32x3::from(self[e12345]) * other.group9().truncate_to_3())).extend_to_4(self[e12345]),
            // e5
            (self[e5] * other[scalar]) + (self[e12345] * other[e3215]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e5] * other[e415]) - (self[e12345] * other[e235]),
                -(self[e5] * other[e425]) - (self[e12345] * other[e315]),
                -(self[e5] * other[e435]) - (self[e12345] * other[e125]),
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(self[e5]) * other.group7()) - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([self[e5] * other[e4235], self[e5] * other[e4315], self[e5] * other[e4125], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<RoundPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       26        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([1.0, 1.0, 1.0, self[e5] * other[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e5] * other[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e5] * other[e1], self[e5] * other[e2], self[e5] * other[e3], self[e12345] * other[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       26        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([1.0, 1.0, 1.0, self[e5] * other[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e5] * other[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([self[e5] * other[e4235], self[e5] * other[e4315], self[e5] * other[e4125], self[e12345] * other[e3215]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       17        0
    //    simd3        2        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       25        0
    //  no simd       16       46        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12345] * other[e423],
                self[e12345] * other[e431],
                self[e12345] * other[e412],
                -(self[e5] * other[e4]) - (self[e12345] * other[e12345]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other[e415]) * -1.0,
                (self[e12345] * other[e425]) * -1.0,
                (self[e12345] * other[e435]) * -1.0,
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                    - (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3()))
                .extend_to_4(self[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       16       35        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12345] * other[e41],
                self[e12345] * other[e42],
                self[e12345] * other[e43],
                (self[e5] * other[e1234]) + (self[e12345] * other[scalar]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (-(Simd32x3::from(self[e5]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())).extend_to_4(self[e12345]),
        );
    }
}
impl std::ops::Div<geometric_product> for FlatPoint {
    type Output = geometric_product_partial<FlatPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       41        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       30       48        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45],
                other[e42] * self[e45],
                other[e43] * self[e45],
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) - (other[e42] * self[e15]),
                (other[scalar] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       49        0
    //    simd3        2        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       37       55        0
    //  no simd       44       71        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45],
                other[e431] * self[e45],
                other[e412] * self[e45],
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e4] * self[e15]) - (other[e412] * self[e25]) - (other[e1] * self[e45]),
                (other[e412] * self[e15]) + (other[e4] * self[e25]) - (other[e423] * self[e35]) - (other[e2] * self[e45]),
                (other[e423] * self[e25]) + (other[e4] * self[e35]) - (other[e431] * self[e15]) - (other[e3] * self[e45]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) - (other[e435] * self[e25]) - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) - (other[e415] * self[e35]) - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) - (other[e425] * self[e15]) - (other[e2] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * (Simd32x3::from([
                    (other[e412] * self[e25]) - (other[e431] * self[e35]),
                    (other[e423] * self[e35]) - (other[e412] * self[e15]),
                    (other[e431] * self[e15]) - (other[e423] * self[e25]),
                ]) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3()))
                .extend_to_4(other[e4])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        4       11        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([1.0, 1.0, 1.0, other[e321] * self[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e321] * self[e15], other[e321] * self[e25], other[e321] * self[e35], 0.0])
                + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e321] * self[e25]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiLine> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       15        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) - (other[e12] * self[e25]),
                (other[e12] * self[e15]) - (other[e23] * self[e35]),
                (other[e23] * self[e25]) - (other[e31] * self[e15]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group1()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * (Simd32x3::from([
                    (other[e31] * self[e35]) - (other[e12] * self[e25]),
                    (other[e12] * self[e15]) - (other[e23] * self[e35]),
                    (other[e23] * self[e25]) - (other[e31] * self[e15]),
                ]) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                    + (Simd32x3::from(self[e45]) * other.group1().truncate_to_3()))
                .extend_to_4(other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                (other[e3215] * self[e45]) - (other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([other[e1] * self[e45], other[e2] * self[e45], other[e3] * self[e45], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) - (other[e2] * self[e15]),
                (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for FlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
    }
}
impl GeometricProduct<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       25       41        0
    //  no simd       25       44        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45],
                other[e431] * self[e45],
                other[e412] * self[e45],
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) - (other[e412] * self[e25]),
                (other[e412] * self[e15]) - (other[e423] * self[e35]),
                (other[e423] * self[e25]) - (other[e431] * self[e15]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) - (other[e435] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) - (other[e415] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) - (other[e425] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) - (other[e431] * self[e35]) - (other[e415] * self[e45]),
                (other[e423] * self[e35]) - (other[e412] * self[e15]) - (other[e425] * self[e45]),
                (other[e431] * self[e15]) - (other[e423] * self[e25]) - (other[e435] * self[e45]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       44        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       29       45        0
    //  no simd       29       48        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e423] * self[e45],
                other[e431] * self[e45],
                other[e412] * self[e45],
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e431] * self[e35]) - (other[e412] * self[e25]),
                (other[e412] * self[e15]) - (other[e423] * self[e35]),
                (other[e423] * self[e25]) - (other[e431] * self[e15]),
                (other[e423] * self[e15]) + (other[e431] * self[e25]) + (other[e412] * self[e35]) - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e12345] * self[e15]) - (other[e435] * self[e25]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e12345] * self[e25]) - (other[e415] * self[e35]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]) - (other[e425] * self[e15]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) - (other[e431] * self[e35]) - (other[e415] * self[e45]),
                (other[e423] * self[e35]) - (other[e412] * self[e15]) - (other[e425] * self[e45]),
                (other[e431] * self[e15]) - (other[e423] * self[e25]) - (other[e435] * self[e45]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       26       44        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45],
                other[e42] * self[e45],
                other[e43] * self[e45],
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) - (other[e12] * self[e25]) - (other[e45] * self[e15]),
                (other[e12] * self[e15]) - (other[e23] * self[e35]) - (other[e45] * self[e25]),
                (other[e23] * self[e25]) - (other[e31] * self[e15]) - (other[e45] * self[e35]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group2()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) - (other[e42] * self[e15]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        4        4        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       44       71        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e41] * self[e45],
                other[e42] * self[e45],
                other[e43] * self[e45],
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) + (other[e4125] * self[e45]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * (Simd32x3::from([
                    (other[e31] * self[e35]) + (other[e4125] * self[e25]),
                    (other[e12] * self[e15]) + (other[e4235] * self[e35]),
                    (other[e23] * self[e25]) + (other[e4315] * self[e15]),
                ]) + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(self[e15]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                    - (Simd32x3::from(self[e25]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                    - (Simd32x3::from(self[e35]) * Simd32x3::from([other[e4315], other[e23], other[e45]])))
                .extend_to_4(other[e1234])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) - (other[e43] * self[e25]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) - (other[e42] * self[e15]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<DualNum> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([1.0, 1.0, 1.0, other[e5] * self[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        4       14        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([1.0, 1.0, 1.0, other[e45] * self[e45]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([(other[e45] * self[e15]) * -1.0, (other[e45] * self[e25]) * -1.0, (other[e45] * self[e35]) * -1.0, 0.0])
                + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<Flector> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       12       20        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e15] * other[e45]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e25] * other[e45]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e35] * other[e45]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
        );
    }
}
impl GeometricProduct<Line> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        9       19        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e35] * other[e425]) - (self[e25] * other[e435]),
                (self[e15] * other[e435]) - (self[e35] * other[e415]),
                (self[e25] * other[e415]) - (self[e15] * other[e425]),
                0.0,
            ]) + (Simd32x3::from(self[e45]) * other.group1()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e45] * other[e415],
                self[e45] * other[e425],
                self[e45] * other[e435],
                -(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Motor> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       12       31        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e12345]])
                * (Simd32x3::from([
                    (self[e35] * other[e425]) - (self[e25] * other[e435]),
                    (self[e15] * other[e435]) - (self[e35] * other[e415]),
                    (self[e25] * other[e415]) - (self[e15] * other[e425]),
                ]) + (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                    + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e45] * other[e415],
                self[e45] * other[e425],
                self[e45] * other[e435],
                (self[e45] * other[e5]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       72        0
    //    simd2        3        3        0
    //    simd3        7       11        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       62       94        0
    //  no simd       97      143        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], (self[e45] * other[e321]) * -1.0])
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e25] * other[e412]) - (self[e35] * other[e431]),
                    (self[e35] * other[e423]) - (self[e15] * other[e412]),
                    (self[e15] * other[e431]) - (self[e25] * other[e423]),
                ]) - (Simd32x3::from(self[e45]) * other.group6().truncate_to_3())
                    - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            (self[e45] * other[e5])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) - (self[e15] * other[e42]),
            ]) + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) - (self[e25] * other[e412]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) - (self[e35] * other[e423]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) + (self[e35] * other[e425]) - (self[e25] * other[e3]) - (self[e25] * other[e435]),
                (self[e15] * other[e3]) + (self[e15] * other[e435]) - (self[e35] * other[e1]) - (self[e35] * other[e415]),
                (self[e25] * other[e1]) + (self[e25] * other[e415]) - (self[e15] * other[e2]) - (self[e15] * other[e425]),
            ]) + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            self[e45] * other[e1234] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e45] * other[e4235], self[e45] * other[e4315], self[e45] * other[e4125], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        0        1        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       23        0
    //  no simd       10       31        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e45] * other[e1]) * -1.0, (self[e45] * other[e2]) * -1.0, (self[e45] * other[e3]) * -1.0, 0.0])
                + (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()).extend_to_4(0.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) - (self[e15] * other[e2]),
                self[e45] * other[e4],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e15] * other[e4],
                self[e25] * other[e4],
                self[e35] * other[e4],
                (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       19        0
    //  no simd       10       24        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e45] * other[e4235], self[e45] * other[e4315], self[e45] * other[e4125], 0.0])
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()).extend_to_4(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                self[e45] * other[e1234],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       49        0
    //    simd3        2        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       48       75        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e45] * other[e423],
                self[e45] * other[e431],
                self[e45] * other[e412],
                -(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) - (self[e25] * other[e412]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) - (self[e35] * other[e423]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) - (self[e15] * other[e431]),
                (self[e15] * other[e423]) + (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) - (self[e25] * other[e435]) - (self[e25] * other[e3]),
                (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]) - (self[e35] * other[e415]) - (self[e35] * other[e1]),
                (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]) - (self[e15] * other[e425]) - (self[e15] * other[e2]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(self[e45]) * other.group2()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e25] * other[e412]) - (self[e35] * other[e431]),
                    (self[e35] * other[e423]) - (self[e15] * other[e412]),
                    (self[e15] * other[e431]) - (self[e25] * other[e423]),
                ]) - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       34        0
    //    simd3        6        7        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       30       46        0
    //  no simd       48       75        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e45] * other[e41],
                self[e45] * other[e42],
                self[e45] * other[e43],
                (self[e45] * other[e45]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * ((Simd32x3::from(self[e15]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                    + (Simd32x3::from(self[e25]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                    + (Simd32x3::from(self[e35]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                    + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                    - (Simd32x3::from(self[e15]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                    - (Simd32x3::from(self[e25]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                    - (Simd32x3::from(self[e35]) * Simd32x3::from([other[e4315], other[e23], other[e45]])))
                .extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) - (self[e25] * other[e43]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) - (self[e15] * other[e42]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl std::ops::Div<geometric_product> for Flector {
    type Output = geometric_product_partial<Flector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       69       85        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]),
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]) - (other[e43] * self[e25]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]) - (other[e42] * self[e15]),
                (other[scalar] * self[e45])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       92      108        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e4] * self[e15]) + (other[e3] * self[e4315])
                    - (other[e412] * self[e25])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e4] * self[e25]) + (other[e1] * self[e4125])
                    - (other[e423] * self[e35])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e4] * self[e35]) + (other[e2] * self[e4235])
                    - (other[e431] * self[e15])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e4] * self[e15]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e4] * self[e25]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e4] * self[e35]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       15        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())).extend_to_4(other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                (other[e3215] * self[e45]) + (other[scalar] * self[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e321]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e315] * self[e45]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e125] * self[e45]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
    }
}
impl GeometricProduct<AntiFlector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
        );
    }
}
impl GeometricProduct<AntiLine> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) - (other[e412] * self[e25]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) - (other[e423] * self[e35]) - (other[e321] * self[e4315]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) - (other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
                -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) - (other[e412] * self[e25]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) - (other[e423] * self[e35]) - (other[e321] * self[e4315]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) - (other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]),
                (other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]) - (other[e43] * self[e25]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]) - (other[e41] * self[e35]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]) - (other[e42] * self[e15]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      112        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      104      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e41] * self[e45]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e43] * self[e45]) - (other[e1234] * self[e4125]),
                (other[e45] * self[e45]) + (other[e1234] * self[e3215])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25]) + (other[e45] * self[e4125]) + (other[e1234] * self[e35]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45])
                    - (other[e42] * self[e15])
                    - (other[e4315] * self[e4235]),
                -(other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e31] * self[e4125]) + (other[e1234] * self[e15])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e12] * self[e4235]) + (other[e1234] * self[e25])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e1234] * self[e35])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<DualNum> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       23        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e45]])
                * ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())).extend_to_4(other[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12345] * self[e4235],
                other[e12345] * self[e4315],
                other[e12345] * self[e4125],
                (other[e5] * self[e45]) + (other[e12345] * self[e3215]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       12       20        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
    }
}
impl GeometricProduct<Flector> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e4315]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
        );
    }
}
impl GeometricProduct<Line> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e35] * other[e425]) + (self[e45] * other[e235]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435]) + (self[e45] * other[e315]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415]) + (self[e45] * other[e125]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e45] * other[e415]) - (self[e4125] * other[e425]),
                (self[e4125] * other[e415]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]),
                (self[e4235] * other[e425]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]),
                -(self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[e45] * other[e235])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435])
                    + (self[e25] * other[e12345])
                    + (self[e45] * other[e315])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415])
                    + (self[e35] * other[e12345])
                    + (self[e45] * other[e125])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e45] * other[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e45] * other[e415]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]),
                (self[e4125] * other[e415]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]),
                (self[e4235] * other[e425]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]),
                (self[e45] * other[e5]) + (self[e3215] * other[e12345])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      170        0
    //    simd2        4        4        0
    //    simd3       14       14        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      165      197        0
    //  no simd      224      256        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) - (Simd32x4::from(other[e4]) * self.group0()),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e4315] * other[e43]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e4235] * other[e43]),
                (self[e4235] * other[e42]) - (self[e4315] * other[e41]),
            ]) - (Simd32x3::from(self[e45]) * other.group4())
                - (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) + (self[e4125] * other[e4315]) - (self[e25] * other[e43]) - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e4235] * other[e4125]) - (self[e35] * other[e41]) - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e4315] * other[e4235]) - (self[e15] * other[e42]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(other[e45]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e4315] * other[e3]) + (self[e3215] * other[e423])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e4125] * other[e1]) + (self[e3215] * other[e431])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e4235] * other[e2]) + (self[e3215] * other[e412])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e3215] * other[e4]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e4315] * other[e412]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]),
            ]) - (Simd32x3::from(self[e45]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) + (self[e35] * other[e425]) + (self[e4125] * other[e315])
                    - (self[e25] * other[e3])
                    - (self[e25] * other[e435])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e3]) + (self[e15] * other[e435]) + (self[e4235] * other[e125])
                    - (self[e35] * other[e1])
                    - (self[e35] * other[e415])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e1]) + (self[e25] * other[e415]) + (self[e4315] * other[e235])
                    - (self[e15] * other[e2])
                    - (self[e15] * other[e425])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e12]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e23]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group1()),
            // e1234
            (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e25] * other[e4125]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       24       55        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4235] * other[e4],
                self[e4315] * other[e4],
                self[e4125] * other[e4],
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e4315] * other[e3]) - (self[e4125] * other[e2]),
                    (self[e4125] * other[e1]) - (self[e4235] * other[e3]),
                    (self[e4235] * other[e2]) - (self[e4315] * other[e1]),
                ]) + (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()))
                .extend_to_4(self[e3215])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]) - (self[e15] * other[e2]),
                -(self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * self.group0() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Scalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        4        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       24       54        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4235] * other[e1234],
                self[e4315] * other[e1234],
                self[e4125] * other[e1234],
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                    (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                    (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                    + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e3215]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e25] * other[e4125]) - (self[e35] * other[e4315]),
                    (self[e35] * other[e4235]) - (self[e15] * other[e4125]),
                    (self[e15] * other[e4315]) - (self[e25] * other[e4235]),
                ]) + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                    - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()))
                .extend_to_4(self[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       94      110        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[e4315] * other[e3]) + (self[e3215] * other[e423])
                    - (self[e25] * other[e412])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[e4125] * other[e1]) + (self[e3215] * other[e431])
                    - (self[e35] * other[e423])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[e4235] * other[e2]) + (self[e3215] * other[e412])
                    - (self[e15] * other[e431])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e3215] * other[e4]),
            ]) - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e4235] * other[e315]),
                -(self[e15] * other[e415])
                    - (self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e45]) * other.group2())
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) - (Simd32x4::from(other[e4]) * self.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      112        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      100      116        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) - (self[e45] * other[e41]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e45] * other[e42]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) - (self[e45] * other[e43]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e45] * other[e45]) + (self[e3215] * other[e1234])
                    - (self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e4315]),
                -(self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[scalar]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e45] * other[e15])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    + (self[e3215] * other[e23])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e45] * other[e25])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    + (self[e3215] * other[e31])
                    - (self[e15] * other[e4125])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e45] * other[e35])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    + (self[e3215] * other[e12])
                    - (self[e15] * other[e31])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e4315] * other[e12]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e4125] * other[e23]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e4235] * other[e31]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl std::ops::Div<geometric_product> for Line {
    type Output = geometric_product_partial<Line>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e45] * self[e235])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e45] * self[e315])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e45] * self[e125])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]) - (other[e4] * self[e415]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]) - (other[e4] * self[e425]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e4] * self[e435]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e4] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e1] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) - (other[e315] * self[e435]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) - (other[e125] * self[e415]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) - (other[e235] * self[e425]) - (other[e321] * self[e125]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e321] * self[e415],
                other[e321] * self[e425],
                other[e321] * self[e435],
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e321] * self[e425]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e321] * self[e435]) + (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) - (other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) - (other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) - (other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) - (other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) - (other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) - (other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) - (other[e12] * self[e315]) - (other[e45] * self[e235]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) - (other[e23] * self[e125]) - (other[e45] * self[e315]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) - (other[e31] * self[e235]) - (other[e45] * self[e125]) - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e1234] * self[e435]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e31] * self[e435]) + (other[e1234] * self[e235]) - (other[e43] * self[e315]) - (other[e12] * self[e425]),
                (other[e43] * self[e235]) + (other[e12] * self[e415]) + (other[e1234] * self[e315]) - (other[e41] * self[e125]) - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e23] * self[e425]) + (other[e1234] * self[e125]) - (other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]) - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425]) - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435]) - (other[e25] * self[e415]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e1234] * self[e235])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e1234] * self[e315])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415])
                    - (other[e41] * self[e315])
                    - (other[e45] * self[e435])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e25] * self[e435]) - (other[e35] * self[e425]) - (other[e45] * self[e235]),
                (other[e35] * self[e415]) - (other[e15] * self[e435]) - (other[e45] * self[e315]),
                (other[e15] * self[e425]) - (other[e25] * self[e415]) - (other[e45] * self[e125]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e45] * self[e415],
                other[e45] * self[e425],
                other[e45] * self[e435],
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425])
                    - (other[e45] * self[e235])
                    - (other[e4315] * self[e125]),
                (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435])
                    - (other[e45] * self[e315])
                    - (other[e4125] * self[e235]),
                (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415])
                    - (other[e45] * self[e125])
                    - (other[e4235] * self[e315]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e45] * self[e415]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e45] * self[e425]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e45] * self[e435]) - (other[e4235] * self[e425]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e425] * self[e435]),
                (other[e415] * self[e435]) - (other[e435] * self[e415]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) - (other[e425] * self[e125]) - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) - (other[e435] * self[e235]) - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) - (other[e415] * self[e315]) - (other[e235] * self[e425]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e415] * other[e12345]) - (self[e435] * other[e425]),
                (self[e435] * other[e415]) - (self[e415] * other[e435]) - (self[e425] * other[e12345]),
                (self[e415] * other[e425]) - (self[e425] * other[e415]) - (self[e435] * other[e12345]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345]),
                (self[e415] * other[e315]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e435]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      127      159        0
    //    simd3       11       11        0
    // Totals...
    // yes simd      138      170        0
    //  no simd      160      192        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) - (Simd32x3::from(other[e4]) * self.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412]) - (self[e435] * other[e425]) - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423]) - (self[e415] * other[e435]) - (self[e235] * other[e412]),
                (self[e415] * other[e425]) + (self[e235] * other[e431]) - (self[e425] * other[e415]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(other[e1234]) * self.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * self.group0())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
        );
    }
}
impl GeometricProduct<Plane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       16       37        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e4],
                self[e315] * other[e4],
                self[e125] * other[e4],
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]),
        );
    }
}
impl GeometricProduct<Scalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
                0.0,
            ]) + (Simd32x3::from(other[e3215]) * self.group0()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) - (self[e415] * other[e4]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]) - (self[e425] * other[e4]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]) - (self[e435] * other[e4]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]),
        );
    }
}
impl GeometricProduct<VersorOdd> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) + (self[e425] * other[e1234]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) + (self[e435] * other[e1234]) - (self[e415] * other[e42]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e235] * other[e1234]) + (self[e125] * other[e42])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e235] * other[e43]) + (self[e315] * other[e1234])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e315] * other[e41]) + (self[e125] * other[e1234])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
        );
    }
}
impl std::ops::Div<geometric_product> for Motor {
    type Output = geometric_product_partial<Motor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       72       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[scalar] * self[e415])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[scalar] * self[e425])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[scalar] * self[e435])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) - (other[e45] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e41] * self[e5]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e42] * self[e5]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e43] * self[e5]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       92      108        0
    //  no simd      104      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e423] * self[e12345]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e431] * self[e12345]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e4] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e423] * self[e315])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e5] * self[e12345]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       23        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (Simd32x3::from([
                    (other[e125] * self[e425]) - (other[e315] * self[e435]),
                    (other[e235] * self[e435]) - (other[e125] * self[e415]),
                    (other[e315] * self[e415]) - (other[e235] * self[e425]),
                ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                    - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e321] * self[e415],
                other[e321] * self[e425],
                other[e321] * self[e435],
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e321] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e1] * self[e125])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e2] * self[e235])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e12345]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<AntiPlane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e423] * self[e12345]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e431] * self[e12345]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       66       82        0
    //  no simd       72       88        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) - (other[e431] * self[e435]),
                (other[e423] * self[e435]) - (other[e412] * self[e415]),
                (other[e431] * self[e415]) - (other[e423] * self[e425]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e415]) + (other[e431] * self[e425]) + (other[e412] * self[e435]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) - (other[e431] * self[e125]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) - (other[e412] * self[e235]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) - (other[e423] * self[e315]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125]) - (other[e45] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435])
                    - (other[e12] * self[e315])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415])
                    - (other[e23] * self[e125])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345])
                    - (other[e31] * self[e235])
                    - (other[e25] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * self.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) - (other[e41] * self[e5]) - (other[e42] * self[e125]) - (other[e45] * self[e415]),
                (other[e41] * self[e125]) - (other[e42] * self[e5]) - (other[e43] * self[e235]) - (other[e45] * self[e425]),
                (other[e42] * self[e235]) - (other[e41] * self[e315]) - (other[e43] * self[e5]) - (other[e45] * self[e435]),
                -(other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       86      102        0
    //  no simd      104      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) - (other[e43] * self[e425]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) - (other[e41] * self[e435]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]) - (other[e42] * self[e415]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e1234] * self[e235])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e1234] * self[e315])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e1234] * self[e125])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e45] * self[e12345])
                    - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e45] * self[e415])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e45] * self[e425])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e45] * self[e435])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345]) - (other[e41] * self[e415]) - (other[e42] * self[e425]) - (other[e43] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(other[e5]) * self.group0()) - (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        2        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       12       31        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e12345]])
                * (Simd32x3::from([
                    (other[e25] * self[e435]) - (other[e35] * self[e425]),
                    (other[e35] * self[e415]) - (other[e15] * self[e435]),
                    (other[e15] * self[e425]) - (other[e25] * self[e415]),
                ]) + (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()))
                .extend_to_4(other[e45])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e45] * self[e415],
                other[e45] * self[e425],
                other[e45] * self[e435],
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e45] * self[e5]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       40        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       34       42        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415])
                    - (other[e35] * self[e425])
                    - (other[e4235] * self[e5])
                    - (other[e4315] * self[e125]),
                (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425])
                    - (other[e15] * self[e435])
                    - (other[e4315] * self[e5])
                    - (other[e4125] * self[e235]),
                (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435])
                    - (other[e25] * self[e415])
                    - (other[e4235] * self[e315])
                    - (other[e4125] * self[e5]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e12345]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]) + (other[e3215] * self[e12345])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e435]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
        );
    }
}
impl GeometricProduct<Line> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]),
                (other[e415] * self[e435]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       31       39        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e435] * self[e425]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                (other[e415] * self[e435]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                (other[e425] * self[e415]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e12345] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e5] * self[e435]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435]),
            ]) - (Simd32x4::from(self[e12345]) * other.group1())
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      162      194        0
    //    simd3       18       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      182      214        0
    //  no simd      224      256        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345])
                    - (self[e5] * other[e4]),
                (self[e12345] * other[scalar]) + (self[e5] * other[e1234])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43]),
                (self[e12345] * other[e1234]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e3]) + (self[e315] * other[e435])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e12345] * other[e235])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e2])
                    - (self[e125] * other[e425])
                    - (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e125] * other[e1]) + (self[e125] * other[e415])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e12345] * other[e315])
                    - (self[e235] * other[e3])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e235] * other[e2]) + (self[e235] * other[e425])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e12345] * other[e125])
                    - (self[e315] * other[e1])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412]) - (self[e435] * other[e425]) - (self[e125] * other[e431]),
                (self[e435] * other[e415]) + (self[e125] * other[e423]) - (self[e415] * other[e435]) - (self[e235] * other[e412]),
                (self[e415] * other[e425]) + (self[e235] * other[e431]) - (self[e425] * other[e415]) - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar])
                    + (self[e435] * other[e31])
                    + (self[e12345] * other[e23])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12])
                    + (self[e425] * other[scalar])
                    + (self[e12345] * other[e31])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23])
                    + (self[e435] * other[scalar])
                    + (self[e12345] * other[e12])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e12345] * other[e45])
                    - (self[e5] * other[e1234]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
            ]) + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e435] * other[e25]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) - (self[e415] * other[e25]),
            ]) + (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e5]) * other.group5())
                + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e12345] * other[e1]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e12345] * other[e2]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435])
                    - (self[e12345] * other[e5])
                    - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]) - (self[e12345] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                (self[e435] * other[e4235]) - (self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) - (self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        2        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       24       55        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e4],
                self[e315] * other[e4],
                self[e125] * other[e4],
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e5] * other[e4]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, other[e4]])
                * (Simd32x3::from([
                    (self[e315] * other[e3]) - (self[e125] * other[e2]),
                    (self[e125] * other[e1]) - (self[e235] * other[e3]),
                    (self[e235] * other[e2]) - (self[e315] * other[e1]),
                ]) - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e5]) * self.group0().truncate_to_3()))
                .extend_to_4(self[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e435] * other[e2]) + (self[e12345] * other[e1]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e415] * other[e3]) + (self[e12345] * other[e2]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e12345] * other[e3]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]),
        );
    }
}
impl GeometricProduct<Scalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, other[e1234]])
                * (Simd32x3::from([
                    (self[e425] * other[e4125]) - (self[e435] * other[e4315]),
                    (self[e435] * other[e4235]) - (self[e415] * other[e4125]),
                    (self[e415] * other[e4315]) - (self[e425] * other[e4235]),
                ]) - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()))
                .extend_to_4(self[e12345]),
        );
    }
}
impl GeometricProduct<VersorEven> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      108        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       97      113        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e425] * other[e412]) - (self[e435] * other[e431]),
                (self[e435] * other[e423]) - (self[e415] * other[e412]),
                (self[e415] * other[e431]) - (self[e425] * other[e423]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) - (Simd32x4::from(self[e12345]) * other.group0())
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e315] * other[e412])
                    - (self[e415] * other[e12345])
                    - (self[e435] * other[e425])
                    - (self[e12345] * other[e415])
                    - (self[e125] * other[e431])
                    - (self[e5] * other[e423]),
                (self[e435] * other[e415]) + (self[e125] * other[e423])
                    - (self[e415] * other[e435])
                    - (self[e425] * other[e12345])
                    - (self[e12345] * other[e425])
                    - (self[e235] * other[e412])
                    - (self[e5] * other[e431]),
                (self[e415] * other[e425]) + (self[e235] * other[e431])
                    - (self[e425] * other[e415])
                    - (self[e435] * other[e12345])
                    - (self[e12345] * other[e435])
                    - (self[e315] * other[e423])
                    - (self[e5] * other[e412]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) - (Simd32x4::from(other[e4]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e435] * other[e2]) + (self[e12345] * other[e1]) + (self[e315] * other[e412])
                    - (self[e425] * other[e3])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e415] * other[e3]) + (self[e425] * other[e321]) + (self[e12345] * other[e2]) + (self[e125] * other[e423])
                    - (self[e435] * other[e1])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e425] * other[e1]) + (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e235] * other[e431])
                    - (self[e415] * other[e2])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5])
                    - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       79       95        0
    //  no simd      112      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) - (self[e425] * other[e43]),
                (self[e415] * other[e43]) - (self[e435] * other[e41]),
                (self[e425] * other[e41]) - (self[e415] * other[e42]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar])
                    + (self[e435] * other[e31])
                    + (self[e12345] * other[e23])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    - (self[e425] * other[e12])
                    - (self[e315] * other[e43]),
                (self[e415] * other[e12])
                    + (self[e425] * other[scalar])
                    + (self[e12345] * other[e31])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    - (self[e435] * other[e23])
                    - (self[e125] * other[e41]),
                (self[e425] * other[e23])
                    + (self[e435] * other[scalar])
                    + (self[e12345] * other[e12])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    - (self[e415] * other[e31])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e12345] * other[e45])
                    - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]) - (self[e425] * other[e35]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]) - (self[e435] * other[e15]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]) - (self[e415] * other[e25]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                + (Simd32x4::from(other[e3215]) * self.group0())
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e12345] * other[e4235])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e12345] * other[e4315])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e12345] * other[e4125])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43]),
                (self[e12345] * other[e1234]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]),
        );
    }
}
impl std::ops::Div<geometric_product> for MultiVector {
    type Output = geometric_product_partial<MultiVector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      221        0
    //    simd2       10       10        0
    //    simd3       28       28        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      233      266        0
    //  no simd      320      353        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0]) + (Simd32x2::from(other[scalar]) * self.group0())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[scalar] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]) + (other[scalar] * self[e15])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]) + (other[scalar] * self[e25])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[scalar] * self[e35])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e45]) * other.group2()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group6())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) - (other[e43] * self[e2]) - (other[e43] * self[e425]) - (other[e12] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) - (other[e41] * self[e3]) - (other[e41] * self[e435]) - (other[e23] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) - (other[e42] * self[e1]) - (other[e42] * self[e415]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e321]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[scalar]) * self.group8())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e45]) * self.group8())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      288      320        0
    //    simd2        4        4        0
    //    simd3       36       36        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      339      371        0
    //  no simd      448      480        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4]),
                (other[e4] * self[e3215]) + (other[e5] * self[e1234])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e3]) + (other[e423] * self[e435])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e1]) + (other[e431] * self[e415])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431])
                    - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412])
                    - (other[e2] * self[e3]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423])
                    - (other[e3] * self[e1]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431])
                    - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) + (other[e3] * self[e42]),
                (other[e435] * self[e41]) + (other[e1] * self[e43]),
                (other[e415] * self[e42]) + (other[e2] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e2] * self[e35])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e3] * self[e15])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd2        1        2        0
    //    simd3        4        9        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       14       36        0
    //  no simd       32       71        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]])) + (Simd32x2::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * ((Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar]),
            // e5
            (other[e3215] * self[e12345]) + (other[scalar] * self[e5]) - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                (other[e3215] * self[e1234]) * -1.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group3()),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group4()) + (Simd32x3::from(other[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])) + (Simd32x4::from(other[scalar]) * self.group6()),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group8())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e3215] * self[e41]) * -1.0,
                (other[e3215] * self[e42]) * -1.0,
                (other[e3215] * self[e43]) * -1.0,
                (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group9()),
            // e1234
            other[scalar] * self[e1234],
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       86        0
    //    simd2        1        1        0
    //    simd3        7       10        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       72      102        0
    //  no simd       96      138        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e315] * self[e43]) - (other[e125] * self[e42]),
                    (other[e125] * self[e41]) - (other[e235] * self[e43]),
                    (other[e235] * self[e42]) - (other[e315] * self[e41]),
                ]) + (Simd32x3::from(other[e321]) * self.group5())
                    + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            (other[e321] * self[e3215])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) - (other[e321] * self[e235]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e321] * self[e315]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e321] * self[e125]),
                other[e321] * self[e12345],
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from(other[e321]) * self.group7(),
            // e23, e31, e12
            Simd32x3::from([
                (other[e125] * self[e431]) - (other[e315] * self[e412]),
                (other[e235] * self[e412]) - (other[e125] * self[e423]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                (other[e321] * self[scalar]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from(other[e321]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) - (other[e125] * self[e31]) - (other[e125] * self[e4315]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) - (other[e235] * self[e12]) - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) - (other[e315] * self[e23]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5]),
            ]),
            // e1234
            other[e321] * self[e4],
        );
    }
}
impl GeometricProduct<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      182        0
    //    simd2        4        4        0
    //    simd3       14       14        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      174      206        0
    //  no simd      224      256        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e5] * self[e4]),
                (other[e5] * self[e1234]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e321] * self[e23])
                    + (other[e1] * self[scalar])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e321] * self[e31])
                    + (other[e2] * self[scalar])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e321] * self[e12])
                    + (other[e1] * self[e31])
                    + (other[e3] * self[scalar])
                    + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e12345]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(other[e321]) * self.group7())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e125] * self[e431]) + (other[e3] * self[e2]) - (other[e315] * self[e412]) - (other[e2] * self[e3]),
                (other[e235] * self[e412]) + (other[e1] * self[e3]) - (other[e125] * self[e423]) - (other[e3] * self[e1]),
                (other[e315] * self[e423]) + (other[e2] * self[e1]) - (other[e235] * self[e431]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e321] * self[scalar])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]) - (Simd32x3::from(other[e321]) * self.group4())
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e2] * self[e35])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e3] * self[e15])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      147        0
    //    simd2        5        6        0
    //    simd3       11       11        0
    // Totals...
    // yes simd      133      164        0
    //  no simd      160      192        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e12] * self[e2]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e23] * self[e3]) - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e31] * self[e1]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(self[e1234]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(self[e5]) * other.group0())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
            // e1234
            -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      162        0
    //    simd2        7        8        0
    //    simd3       18       18        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      163      194        0
    //  no simd      224      256        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * self.group0()) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e2])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e3])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e1])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group6())
                + (Simd32x4::from(self[e4]) * other.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[scalar]) * self.group8())
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group9())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[scalar] * self[e1234]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       90        0
    //    simd2        3        3        0
    //    simd3        7        7        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       70      103        0
    //  no simd       96      129        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e5] * self[e4]) * -1.0, other[e5] * self[e1234]])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) - (other[e2] * self[e423]),
            ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]),
            ]) - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) - (other[e2] * self[e15]),
            ]) + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * crate::swizzle!(self.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e321]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group6().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group3().truncate_to_3(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      206      238        0
    //    simd2        1        1        0
    //    simd3       20       20        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      232      264        0
    //  no simd      288      320        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
            // e5
            (other[e321] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e435] * self[e431])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e415] * self[e412])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e425] * self[e423])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431]),
            ]) + (Simd32x3::from(other[e321]) * self.group7())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2())
                - (Simd32x3::from(self[e5]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e321]) * self.group4()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group2())
                + (Simd32x3::from(self[e45]) * other.group2())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4]),
        );
    }
}
impl GeometricProduct<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      218      250        0
    //    simd2        1        1        0
    //    simd3       24       24        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      250      282        0
    //  no simd      320      352        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345]),
                (other[e12345] * self[scalar])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * other.group2()),
            // e5
            (other[e321] * self[e3215]) + (other[e12345] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e12345] * self[e125]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e321]) * other.group2())
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e435] * self[e431])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e415] * self[e412])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e425] * self[e423])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e415] * self[e431]),
            ]) + (Simd32x3::from(other[e321]) * self.group7())
                - (Simd32x3::from(other[e12345]) * self.group7())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e431] * self[e125])
                    - (other[e425] * self[e435])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e412] * self[e235])
                    - (other[e435] * self[e415])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e321]) * self.group4()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e12345] * self[e1])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e12345] * self[e2])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e12345] * self[e3])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      186      219        0
    //    simd2        9        9        0
    //    simd3       24       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      222      255        0
    //  no simd      288      321        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0])
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) - (other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) - (other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) - (other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group2()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) - (other[e43] * self[e2]) - (other[e43] * self[e425]) - (other[e12] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) - (other[e41] * self[e3]) - (other[e41] * self[e435]) - (other[e23] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) - (other[e42] * self[e1]) - (other[e42] * self[e415]) - (other[e31] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e321]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) - (other[e31] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e45]) * self.group8())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      268      300        0
    //    simd2       11       11        0
    //    simd3       38       38        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      328      360        0
    //  no simd      448      480        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215]),
                (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215]),
                (other[e23] * self[e25])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e4315] * self[e43]) - (other[e12] * self[e42]) - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e4125] * self[e41]) - (other[e23] * self[e43]) - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e4235] * self[e42]) - (other[e31] * self[e41]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e25] * self[e43]) + (other[e4315] * self[e4125])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e35] * self[e41]) + (other[e4125] * self[e4235])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e15] * self[e42]) + (other[e4235] * self[e4315])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e25] * self[e412])
                    + (other[e1234] * self[e235])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e35] * self[e423])
                    + (other[e1234] * self[e315])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e15] * self[e431])
                    + (other[e1234] * self[e125])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e2])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e3])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e1])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e321]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) + (other[e4125] * self[e315]),
                (other[e12] * self[e235]) + (other[e4235] * self[e125]),
                (other[e23] * self[e315]) + (other[e4315] * self[e235]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e1234] * self[e45])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43]),
        );
    }
}
impl GeometricProduct<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       26        0
    //    simd3        4       10        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       40        0
    //  no simd       32       72        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e5] * self[e4]) - (other[e12345] * self[e12345]), (other[e5] * self[e1234]) + (other[e12345] * self[scalar])]),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * ((Simd32x3::from(other[e5]) * self.group4()) - (Simd32x3::from(other[e12345]) * self.group9().truncate_to_3())).extend_to_4(other[e12345]),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e12345] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e5] * self[e415]) - (other[e12345] * self[e235]),
                -(other[e5] * self[e425]) - (other[e12345] * self[e315]),
                -(other[e5] * self[e435]) - (other[e12345] * self[e125]),
                other[e12345] * self[e321],
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(other[e5]) * self.group7()) - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], (other[e12345] * self[e45]) * -1.0])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       75        0
    //    simd2        3        3        0
    //    simd3       10       13        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       67       94        0
    //  no simd       96      132        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], (other[e45] * self[e321]) * -1.0])
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e25] * self[e412]) - (other[e35] * self[e431]),
                    (other[e35] * self[e423]) - (other[e15] * self[e412]),
                    (other[e15] * self[e431]) - (other[e25] * self[e423]),
                ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group6().truncate_to_3()))
                .extend_to_4(other[e45]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]) - (other[e35] * self[e31]) - (other[e35] * self[e4315]) - (other[e45] * self[e15]),
                (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]) - (other[e15] * self[e12]) - (other[e15] * self[e4125]) - (other[e45] * self[e25]),
                (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) - (other[e25] * self[e23]) - (other[e25] * self[e4235]) - (other[e45] * self[e35]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e41, e42, e43
            Simd32x3::from(other[e45]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) - (other[e35] * self[e42]),
                (other[e35] * self[e41]) - (other[e15] * self[e43]),
                (other[e15] * self[e42]) - (other[e25] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from(other[e45]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) - (other[e15] * self[e1234]) - (other[e25] * self[e43]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) - (other[e25] * self[e1234]) - (other[e35] * self[e41]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) - (other[e15] * self[e42]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]),
            // e1234
            other[e45] * self[e1234],
        );
    }
}
impl GeometricProduct<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      174        0
    //    simd2        4        4        0
    //    simd3       18       18        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      169      201        0
    //  no simd      224      256        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * other.group0()),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e45] * self[e15])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e45] * self[e25])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e45] * self[e35])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) + (other[e4315] * self[e4125]) - (other[e35] * self[e42]) - (other[e4125] * self[e4315]),
                (other[e35] * self[e41]) + (other[e4125] * self[e4235]) - (other[e15] * self[e43]) - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e4235] * self[e4315]) - (other[e25] * self[e41]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e2]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423]) + (other[e4235] * self[e3]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431]) + (other[e4315] * self[e1]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e4125] * self[e315]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group8())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4315] * self[e12])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) + (other[e4125] * self[e23])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) + (other[e4235] * self[e31])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e1234
            (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
        );
    }
}
impl GeometricProduct<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      127      159        0
    //    simd3        7        7        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      137      169        0
    //  no simd      160      192        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]),
            // e5
            -(other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
            ]) - (Simd32x3::from(self[e4]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]) - (other[e425] * self[e435]) - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]) - (other[e435] * self[e415]) - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]) - (other[e415] * self[e425]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(self[e1234]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(self[scalar]) * other.group1())
                + (Simd32x3::from(self[e45]) * other.group1())
                + (Simd32x3::from(self[e3215]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e315] * self[e412])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e125] * self[e423])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e235] * self[e431]) + (other[e125] * self[e4])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
        );
    }
}
impl GeometricProduct<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      182        0
    //    simd3       14       14        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      172      204        0
    //  no simd      224      256        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e5] * self[e4]),
                (other[e12345] * self[scalar]) + (other[e5] * self[e1234])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e12345] * self[e125])
                    - (other[e5] * self[e435]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * self.group7())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]) - (other[e425] * self[e435]) - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]) - (other[e435] * self[e415]) - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]) - (other[e415] * self[e425]) - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e12345] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e12345] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e12345] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * other.group1()),
            // e423, e431, e412
            Simd32x3::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
            ]) + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e5] * self[e423])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e5] * self[e431])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e5] * self[e412])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      604      636        0
    //    simd2       16       16        0
    //    simd3       80       80        0
    //    simd4       29       29        0
    // Totals...
    // yes simd      729      761        0
    //  no simd      992     1024        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
                (other[e12345] * self[scalar])
                    + (other[e4235] * self[e1])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    + (other[e25] * self[e412])
                    + (other[e43] * self[e315])
                    + (other[e31] * self[e3])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e412] * self[e25])
                    + (other[e315] * self[e43])
                    + (other[e4125] * self[e425])
                    + (other[e3215] * self[e423])
                    - (other[e12345] * self[e4235])
                    - (other[e3] * self[e31])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435])
                    - (other[e1234] * self[e235]),
                (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    + (other[e35] * self[e423])
                    + (other[e41] * self[e125])
                    + (other[e12] * self[e1])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e423] * self[e35])
                    + (other[e125] * self[e41])
                    + (other[e4235] * self[e435])
                    + (other[e3215] * self[e431])
                    - (other[e12345] * self[e4315])
                    - (other[e1] * self[e12])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415])
                    - (other[e1234] * self[e315]),
                (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    + (other[e15] * self[e431])
                    + (other[e42] * self[e235])
                    + (other[e23] * self[e2])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e431] * self[e15])
                    + (other[e235] * self[e42])
                    + (other[e4315] * self[e415])
                    + (other[e3215] * self[e412])
                    - (other[e12345] * self[e4125])
                    - (other[e2] * self[e23])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e315] * self[e41])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345])
                    - (other[e1234] * self[e125]),
                (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    + (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1234] * self[e12345])
                    - (other[e41] * self[e1])
                    - (other[e41] * self[e415])
                    - (other[e42] * self[e2])
                    - (other[e42] * self[e425])
                    - (other[e43] * self[e3])
                    - (other[e43] * self[e435])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e4]) * other.group3())
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * self.group3()),
            // e5
            (other[scalar] * self[e5])
                + (other[e12345] * self[e3215])
                + (other[e5] * self[scalar])
                + (other[e5] * self[e45])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e321] * self[e3215])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e31] * self[e35])
                    + (other[e435] * self[e315])
                    + (other[e315] * self[e3])
                    + (other[e125] * self[e425])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12345] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e4235] * self[e3215]),
                (other[e1] * self[e125])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e12] * self[e15])
                    + (other[e415] * self[e125])
                    + (other[e235] * self[e435])
                    + (other[e125] * self[e1])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e12345] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e4315] * self[e3215]),
                (other[e2] * self[e235])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e23] * self[e25])
                    + (other[e425] * self[e235])
                    + (other[e235] * self[e2])
                    + (other[e315] * self[e415])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e12345] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e321] * self[e12345])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(other[e5]) * self.group1())
                + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * other.group1())
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e412] * self[e2]) + (other[e412] * self[e425]) + (other[e4315] * self[e43])
                    - (other[e3] * self[e431])
                    - (other[e12] * self[e42])
                    - (other[e425] * self[e412])
                    - (other[e431] * self[e3])
                    - (other[e431] * self[e435])
                    - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e423] * self[e3]) + (other[e423] * self[e435]) + (other[e4125] * self[e41])
                    - (other[e1] * self[e412])
                    - (other[e23] * self[e43])
                    - (other[e435] * self[e423])
                    - (other[e412] * self[e1])
                    - (other[e412] * self[e415])
                    - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e431] * self[e1]) + (other[e431] * self[e415]) + (other[e4235] * self[e42])
                    - (other[e2] * self[e423])
                    - (other[e31] * self[e41])
                    - (other[e415] * self[e431])
                    - (other[e423] * self[e2])
                    - (other[e423] * self[e425])
                    - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group5())
                - (Simd32x3::from(other[e12345]) * self.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group7()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2])
                    + (other[e25] * self[e43])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e435] * self[e425])
                    + (other[e412] * self[e315])
                    + (other[e125] * self[e431])
                    + (other[e4315] * self[e4125])
                    - (other[e2] * self[e3])
                    - (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e425] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e315] * self[e412])
                    - (other[e4125] * self[e4315]),
                (other[e1] * self[e3])
                    + (other[e35] * self[e41])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e415] * self[e435])
                    + (other[e423] * self[e125])
                    + (other[e235] * self[e412])
                    + (other[e4125] * self[e4235])
                    - (other[e3] * self[e1])
                    - (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e435] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e125] * self[e423])
                    - (other[e4235] * self[e4125]),
                (other[e2] * self[e1])
                    + (other[e15] * self[e42])
                    + (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e425] * self[e415])
                    + (other[e431] * self[e235])
                    + (other[e315] * self[e423])
                    + (other[e4235] * self[e4315])
                    - (other[e1] * self[e2])
                    - (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e415] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e235] * self[e431])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e12345] * self[e23])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    + (other[e25] * self[e412])
                    + (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e425] * self[e12])
                    + (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    + (other[e1234] * self[e235])
                    - (other[e2] * self[e4125])
                    - (other[e35] * self[e431])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e412] * self[e25])
                    - (other[e125] * self[e42])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e12345] * self[e31])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    + (other[e35] * self[e423])
                    + (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e435] * self[e23])
                    + (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    + (other[e1234] * self[e315])
                    - (other[e3] * self[e4235])
                    - (other[e15] * self[e412])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e423] * self[e35])
                    - (other[e235] * self[e43])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e12345] * self[e12])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    + (other[e15] * self[e431])
                    + (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e415] * self[e31])
                    + (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    + (other[e1234] * self[e125])
                    - (other[e1] * self[e4315])
                    - (other[e25] * self[e423])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e431] * self[e15])
                    - (other[e315] * self[e41])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    + (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group6())
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                + (Simd32x4::from(self[scalar]) * other.group6())
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) + (other[e42] * self[e3]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e425] * self[e43]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e2])
                    - (other[e43] * self[e425])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e1] * self[e43]) + (other[e43] * self[e1]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e435] * self[e41]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e3])
                    - (other[e41] * self[e435])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e2] * self[e41]) + (other[e41] * self[e2]) + (other[e41] * self[e425]) + (other[e23] * self[e431]) + (other[e415] * self[e42]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e1])
                    - (other[e42] * self[e415])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35])
                    + (other[e31] * self[e125])
                    + (other[e425] * self[e35])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e4125] * self[e315])
                    - (other[e3] * self[e25])
                    - (other[e12] * self[e315])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e4315] * self[e125]),
                (other[e3] * self[e15])
                    + (other[e12] * self[e235])
                    + (other[e435] * self[e15])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e4235] * self[e125])
                    - (other[e1] * self[e35])
                    - (other[e23] * self[e125])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e4125] * self[e235]),
                (other[e1] * self[e25])
                    + (other[e23] * self[e315])
                    + (other[e415] * self[e25])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e4315] * self[e235])
                    - (other[e2] * self[e15])
                    - (other[e31] * self[e235])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[scalar]) * self.group8())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(self[e5]) * other.group5())
                + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group8())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e35] * self[e42])
                    + (other[e45] * self[e23])
                    + (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e412] * self[e315])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e4315] * self[e12])
                    + (other[e1234] * self[e15])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e435] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e12345] * self[e2])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e15] * self[e43])
                    + (other[e45] * self[e31])
                    + (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e423] * self[e125])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e4125] * self[e23])
                    + (other[e1234] * self[e25])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e415] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e12345] * self[e3])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e25] * self[e41])
                    + (other[e45] * self[e12])
                    + (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e431] * self[e235])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e4235] * self[e31])
                    + (other[e1234] * self[e35])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e425] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    + (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e4235] * self[e15])
                    + (other[e4315] * self[e25])
                    + (other[e4125] * self[e35])
                    - (other[e5] * self[e12345])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * self.group9())
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                + (Simd32x4::from(self[scalar]) * other.group9())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e1234] * self[scalar])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
    }
}
impl GeometricProduct<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       97        0
    //    simd2        1        1        0
    //    simd3        7        7        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       75      107        0
    //  no simd       96      128        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]) - (self[e12345] * other[e4235]) - (self[e435] * other[e4315]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]) - (self[e12345] * other[e4315]) - (self[e415] * other[e4125]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]) - (self[e12345] * other[e4125]) - (self[e425] * other[e4235]),
                -(self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
            ]) + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
    }
}
impl GeometricProduct<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       94        0
    //    simd2        3        3        0
    //    simd3       12       12        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       83      115        0
    //  no simd      128      160        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e4] * other[e5]) - (self[e5] * other[e4]), (self[e3215] * other[e4]) + (self[e1234] * other[e5])])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e12] * other[e2]) - (self[e31] * other[e3]),
                (self[e42] * other[e5]) + (self[e23] * other[e3]) - (self[e12] * other[e1]),
                (self[e43] * other[e5]) + (self[e31] * other[e1]) - (self[e23] * other[e2]),
                (self[e41] * other[e1]) + (self[e42] * other[e2]) + (self[e43] * other[e3]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                - (Simd32x4::from(other[e4]) * self.group3()),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e3]) - (self[e415] * other[e5]) - (self[e125] * other[e2]),
                (self[e125] * other[e1]) - (self[e425] * other[e5]) - (self[e235] * other[e3]),
                (self[e235] * other[e2]) - (self[e435] * other[e5]) - (self[e315] * other[e1]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                - (Simd32x4::from(self[e5]) * other.group0()),
            // e41, e42, e43
            Simd32x3::from([
                (self[e412] * other[e2]) - (self[e431] * other[e3]),
                (self[e423] * other[e3]) - (self[e412] * other[e1]),
                (self[e431] * other[e1]) - (self[e423] * other[e2]),
            ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) - (self[e3] * other[e2]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]),
            ]) - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]) - (self[e45] * other[e1]) - (self[e4125] * other[e2]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]) - (self[e45] * other[e2]) - (self[e4235] * other[e3]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]) - (self[e45] * other[e3]) - (self[e4315] * other[e1]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e42] * other[e3]) - (self[e43] * other[e2]),
                (self[e43] * other[e1]) - (self[e41] * other[e3]),
                (self[e41] * other[e2]) - (self[e42] * other[e1]),
            ]) + (Simd32x3::from(other[e4]) * self.group5())
                - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e2]) - (self[e25] * other[e3]),
                (self[e15] * other[e3]) - (self[e35] * other[e1]),
                (self[e25] * other[e1]) - (self[e15] * other[e2]),
            ]) + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12345] * other[e1]) + (self[e435] * other[e2]) - (self[e425] * other[e3]) - (self[e235] * other[e4]),
                (self[e12345] * other[e2]) + (self[e415] * other[e3]) - (self[e435] * other[e1]) - (self[e315] * other[e4]),
                (self[e12345] * other[e3]) + (self[e425] * other[e1]) - (self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e12345] * other[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
            // e1234
            -(self[e12345] * other[e4]) - (self[e321] * other[e4]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
        );
    }
}
impl GeometricProduct<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group1(),
            // e5
            self[e5] * other[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group9(),
            // e1234
            self[e1234] * other[scalar],
        );
    }
}
impl GeometricProduct<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd2        2        2        0
    //    simd3       12       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       96      128        0
    //  no simd      128      160        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]) - (self[e12345] * other[e4235]) - (self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]) - (self[e12345] * other[e4315]) - (self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]) - (self[e12345] * other[e4125]) - (self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e12345] * other[e1234]) + (self[e321] * other[e1234]) - (self[e423] * other[e4235]) - (self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]) - (self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]) - (self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]) - (self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e4315]) - (self[e42] * other[e4125]),
                (self[e41] * other[e4125]) - (self[e43] * other[e4235]),
                (self[e42] * other[e4235]) - (self[e41] * other[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group5())
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e235] * other[e1234]) - (self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                (self[e3] * other[e4235]) + (self[e315] * other[e1234]) - (self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                (self[e1] * other[e4315]) + (self[e125] * other[e1234]) - (self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e412] * other[e4315]) - (self[e431] * other[e4125]),
                (self[e423] * other[e4125]) - (self[e412] * other[e4235]),
                (self[e431] * other[e4235]) - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e315] * other[e4125]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) - (self[e315] * other[e4235]),
            ]) + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e12] * other[e4315]) - (self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                (self[e25] * other[e1234]) + (self[e23] * other[e4125]) - (self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                (self[e35] * other[e1234]) + (self[e31] * other[e4235]) - (self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e1234]) - (self[e45] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
    }
}
impl GeometricProduct<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      296      328        0
    //    simd2        4        4        0
    //    simd3       40       40        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      354      386        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e12345] * other[e12345])
                    - (self[e4] * other[e5])
                    - (self[e5] * other[e4]),
                (self[scalar] * other[e12345]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from(other[e321]) * Simd32x2::from([self[e321], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e4315] * other[e435])
                    - (self[e35] * other[e431])
                    - (self[e45] * other[e415])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e3])
                    - (self[e4235] * other[e12345])
                    - (self[e4125] * other[e425])
                    - (self[e3215] * other[e423]),
                (self[e35] * other[e423]) + (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e4125] * other[e415])
                    - (self[e15] * other[e412])
                    - (self[e45] * other[e425])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e1])
                    - (self[e4235] * other[e435])
                    - (self[e4315] * other[e12345])
                    - (self[e3215] * other[e431]),
                (self[e15] * other[e431]) + (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e4235] * other[e425])
                    - (self[e25] * other[e423])
                    - (self[e45] * other[e435])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e2])
                    - (self[e4315] * other[e415])
                    - (self[e4125] * other[e12345])
                    - (self[e3215] * other[e412]),
                (self[e41] * other[e1])
                    + (self[e42] * other[e2])
                    + (self[e43] * other[e3])
                    + (self[e4235] * other[e423])
                    + (self[e4315] * other[e431])
                    + (self[e4125] * other[e412])
                    - (self[e41] * other[e415])
                    - (self[e42] * other[e425])
                    - (self[e43] * other[e435])
                    - (self[e23] * other[e423])
                    - (self[e31] * other[e431])
                    - (self[e12] * other[e412])
                    - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * self.group3()),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e415])
                - (self[e15] * other[e1])
                - (self[e25] * other[e425])
                - (self[e25] * other[e2])
                - (self[e35] * other[e435])
                - (self[e35] * other[e3])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3] * other[e315]) + (self[e425] * other[e125]) + (self[e315] * other[e435]) + (self[e315] * other[e3])
                    - (self[e5] * other[e1])
                    - (self[e415] * other[e5])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                (self[e1] * other[e125]) + (self[e435] * other[e235]) + (self[e125] * other[e415]) + (self[e125] * other[e1])
                    - (self[e5] * other[e2])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                (self[e2] * other[e235]) + (self[e415] * other[e315]) + (self[e235] * other[e425]) + (self[e235] * other[e2])
                    - (self[e5] * other[e3])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                (self[e12345] * other[e321]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412])
                    - (self[e1] * other[e415])
                    - (self[e2] * other[e425])
                    - (self[e3] * other[e435])
                    - (self[e415] * other[e1])
                    - (self[e425] * other[e2])
                    - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                + (Simd32x4::from(other[e5]) * self.group1())
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e2] * other[e412]) + (self[e425] * other[e412]) - (self[e3] * other[e431]) - (self[e435] * other[e431]),
                (self[e3] * other[e423]) + (self[e435] * other[e423]) - (self[e1] * other[e412]) - (self[e415] * other[e412]),
                (self[e1] * other[e431]) + (self[e415] * other[e431]) - (self[e2] * other[e423]) - (self[e425] * other[e423]),
            ]) + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e2] * other[e3]) + (self[e425] * other[e435]) + (self[e431] * other[e125]) + (self[e315] * other[e412])
                    - (self[e3] * other[e2])
                    - (self[e435] * other[e425])
                    - (self[e412] * other[e315])
                    - (self[e125] * other[e431]),
                (self[e3] * other[e1]) + (self[e435] * other[e415]) + (self[e412] * other[e235]) + (self[e125] * other[e423])
                    - (self[e1] * other[e3])
                    - (self[e415] * other[e435])
                    - (self[e423] * other[e125])
                    - (self[e235] * other[e412]),
                (self[e1] * other[e2]) + (self[e415] * other[e425]) + (self[e423] * other[e315]) + (self[e235] * other[e431])
                    - (self[e2] * other[e1])
                    - (self[e425] * other[e415])
                    - (self[e431] * other[e235])
                    - (self[e315] * other[e423]),
            ]) - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(other[e4]) * self.group8()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4])
                    + (self[e35] * other[e431])
                    + (self[e43] * other[e315])
                    + (self[e23] * other[e12345])
                    + (self[e12] * other[e425])
                    + (self[e4315] * other[e3])
                    + (self[e3215] * other[e423])
                    + (self[e1234] * other[e235])
                    - (self[e25] * other[e412])
                    - (self[e42] * other[e125])
                    - (self[e31] * other[e435])
                    - (self[e4235] * other[e321])
                    - (self[e4125] * other[e2]),
                (self[e15] * other[e412])
                    + (self[e25] * other[e4])
                    + (self[e41] * other[e125])
                    + (self[e23] * other[e435])
                    + (self[e31] * other[e12345])
                    + (self[e4125] * other[e1])
                    + (self[e3215] * other[e431])
                    + (self[e1234] * other[e315])
                    - (self[e35] * other[e423])
                    - (self[e43] * other[e235])
                    - (self[e12] * other[e415])
                    - (self[e4235] * other[e3])
                    - (self[e4315] * other[e321]),
                (self[e25] * other[e423])
                    + (self[e35] * other[e4])
                    + (self[e42] * other[e235])
                    + (self[e31] * other[e415])
                    + (self[e12] * other[e12345])
                    + (self[e4235] * other[e2])
                    + (self[e3215] * other[e412])
                    + (self[e1234] * other[e125])
                    - (self[e15] * other[e431])
                    - (self[e41] * other[e315])
                    - (self[e23] * other[e425])
                    - (self[e4315] * other[e1])
                    - (self[e4125] * other[e321]),
                (self[e15] * other[e423])
                    + (self[e25] * other[e431])
                    + (self[e35] * other[e412])
                    + (self[e4235] * other[e415])
                    + (self[e4315] * other[e425])
                    + (self[e4125] * other[e435])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e1])
                    - (self[e31] * other[e2])
                    - (self[e12] * other[e3])
                    - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e12] * other[e431]) + (self[e4315] * other[e412]) - (self[e31] * other[e412]) - (self[e4125] * other[e431]),
                (self[e23] * other[e412]) + (self[e4125] * other[e423]) - (self[e12] * other[e423]) - (self[e4235] * other[e412]),
                (self[e31] * other[e423]) + (self[e4235] * other[e431]) - (self[e23] * other[e431]) - (self[e4315] * other[e423]),
            ]) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from(other[e4]) * self.group5())
                - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[e12] * other[e315]) + (self[e4125] * other[e315])
                    - (self[e25] * other[e435])
                    - (self[e25] * other[e3])
                    - (self[e31] * other[e125])
                    - (self[e4315] * other[e125]),
                (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e23] * other[e125]) + (self[e4235] * other[e125])
                    - (self[e35] * other[e415])
                    - (self[e35] * other[e1])
                    - (self[e12] * other[e235])
                    - (self[e4125] * other[e235]),
                (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e31] * other[e235]) + (self[e4315] * other[e235])
                    - (self[e15] * other[e425])
                    - (self[e15] * other[e2])
                    - (self[e23] * other[e315])
                    - (self[e4235] * other[e315]),
            ]) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12345] * other[e1])
                    + (self[e1] * other[e12345])
                    + (self[e3] * other[e425])
                    + (self[e4] * other[e235])
                    + (self[e415] * other[e321])
                    + (self[e435] * other[e2])
                    + (self[e423] * other[e5])
                    + (self[e412] * other[e315])
                    + (self[e315] * other[e412])
                    - (self[e2] * other[e435])
                    - (self[e425] * other[e3])
                    - (self[e431] * other[e125])
                    - (self[e235] * other[e4])
                    - (self[e125] * other[e431]),
                (self[e12345] * other[e2])
                    + (self[e1] * other[e435])
                    + (self[e2] * other[e12345])
                    + (self[e4] * other[e315])
                    + (self[e415] * other[e3])
                    + (self[e425] * other[e321])
                    + (self[e423] * other[e125])
                    + (self[e431] * other[e5])
                    + (self[e125] * other[e423])
                    - (self[e3] * other[e415])
                    - (self[e435] * other[e1])
                    - (self[e412] * other[e235])
                    - (self[e235] * other[e412])
                    - (self[e315] * other[e4]),
                (self[e12345] * other[e3])
                    + (self[e2] * other[e415])
                    + (self[e3] * other[e12345])
                    + (self[e4] * other[e125])
                    + (self[e425] * other[e1])
                    + (self[e435] * other[e321])
                    + (self[e431] * other[e235])
                    + (self[e412] * other[e5])
                    + (self[e235] * other[e431])
                    - (self[e1] * other[e425])
                    - (self[e415] * other[e2])
                    - (self[e423] * other[e315])
                    - (self[e315] * other[e423])
                    - (self[e125] * other[e4]),
                (self[e415] * other[e235])
                    + (self[e425] * other[e315])
                    + (self[e435] * other[e125])
                    + (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3])
                    - (self[e12345] * other[e5])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * other.group0()),
            // e1234
            (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                + (self[e4] * other[e321])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                - (self[e12345] * other[e4])
                - (self[e4] * other[e12345])
                - (self[e321] * other[e4])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3]),
        );
    }
}
impl GeometricProduct<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      282      314        0
    //    simd2       12       12        0
    //    simd3       38       38        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      347      379        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) + (self[e425] * other[e4125]) + (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e315] * other[e43])
                    - (self[e12345] * other[e4235])
                    - (self[e2] * other[e12])
                    - (self[e5] * other[e41])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e431] * other[e35])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42]),
                (self[e1] * other[e12]) + (self[e435] * other[e4235]) + (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e125] * other[e41])
                    - (self[e12345] * other[e4315])
                    - (self[e3] * other[e23])
                    - (self[e5] * other[e42])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e412] * other[e15])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234]),
                (self[e2] * other[e23]) + (self[e415] * other[e4315]) + (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e235] * other[e42])
                    - (self[e12345] * other[e4125])
                    - (self[e1] * other[e31])
                    - (self[e5] * other[e43])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e423] * other[e25])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234]),
                (self[e12345] * other[e1234])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * self.group1()),
            // e5
            (self[e12345] * other[e3215])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                + (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                - (self[e5] * other[e45])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e45] * other[e15])
                    + (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e4235] * other[e3215])
                    + (self[e4125] * other[e25])
                    - (self[e31] * other[e35])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e15] * other[e12])
                    + (self[e35] * other[e4235])
                    + (self[e45] * other[e25])
                    + (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e4235] * other[e35])
                    + (self[e4315] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e45] * other[e35])
                    + (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e4315] * other[e15])
                    + (self[e4125] * other[e3215])
                    - (self[e23] * other[e25])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                (self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35])
                    - (self[e23] * other[e4235])
                    - (self[e31] * other[e4315])
                    - (self[e12] * other[e4125])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12])
                    - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(other[scalar]) * self.group3())
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e12] * other[e42]) + (self[e4315] * other[e43])
                    - (self[e42] * other[e12])
                    - (self[e42] * other[e4125])
                    - (self[e31] * other[e43])
                    - (self[e4125] * other[e42]),
                (self[e41] * other[e12]) + (self[e41] * other[e4125]) + (self[e23] * other[e43]) + (self[e4125] * other[e41])
                    - (self[e43] * other[e23])
                    - (self[e43] * other[e4235])
                    - (self[e12] * other[e41])
                    - (self[e4235] * other[e43]),
                (self[e42] * other[e23]) + (self[e42] * other[e4235]) + (self[e31] * other[e41]) + (self[e4235] * other[e42])
                    - (self[e41] * other[e31])
                    - (self[e41] * other[e4315])
                    - (self[e23] * other[e42])
                    - (self[e4315] * other[e41]),
            ]) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(other[e45]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group5())
                - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (self[e35] * other[e42]) + (self[e43] * other[e25]) + (self[e12] * other[e31]) + (self[e4125] * other[e4315])
                    - (self[e25] * other[e43])
                    - (self[e42] * other[e35])
                    - (self[e31] * other[e12])
                    - (self[e4315] * other[e4125]),
                (self[e15] * other[e43]) + (self[e41] * other[e35]) + (self[e23] * other[e12]) + (self[e4235] * other[e4125])
                    - (self[e35] * other[e41])
                    - (self[e43] * other[e15])
                    - (self[e12] * other[e23])
                    - (self[e4125] * other[e4235]),
                (self[e25] * other[e41]) + (self[e42] * other[e15]) + (self[e31] * other[e23]) + (self[e4315] * other[e4235])
                    - (self[e15] * other[e42])
                    - (self[e41] * other[e25])
                    - (self[e23] * other[e31])
                    - (self[e4235] * other[e4315]),
            ]) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12345] * other[e23])
                    + (self[e2] * other[e4125])
                    + (self[e5] * other[e41])
                    + (self[e435] * other[e31])
                    + (self[e423] * other[e3215])
                    + (self[e412] * other[e25])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    - (self[e3] * other[e4315])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e431] * other[e35])
                    - (self[e315] * other[e43]),
                (self[e12345] * other[e31])
                    + (self[e3] * other[e4235])
                    + (self[e5] * other[e42])
                    + (self[e415] * other[e12])
                    + (self[e423] * other[e35])
                    + (self[e431] * other[e3215])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    - (self[e1] * other[e4125])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e412] * other[e15])
                    - (self[e125] * other[e41]),
                (self[e12345] * other[e12])
                    + (self[e1] * other[e4315])
                    + (self[e5] * other[e43])
                    + (self[e425] * other[e23])
                    + (self[e431] * other[e15])
                    + (self[e412] * other[e3215])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    - (self[e2] * other[e4235])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e423] * other[e25])
                    - (self[e235] * other[e42]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12])
                    - (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group6())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (self[e3] * other[e42]) + (self[e435] * other[e42]) + (self[e412] * other[e31]) + (self[e412] * other[e4315])
                    - (self[e2] * other[e43])
                    - (self[e425] * other[e43])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125]),
                (self[e1] * other[e43]) + (self[e415] * other[e43]) + (self[e423] * other[e12]) + (self[e423] * other[e4125])
                    - (self[e3] * other[e41])
                    - (self[e435] * other[e41])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235]),
                (self[e2] * other[e41]) + (self[e425] * other[e41]) + (self[e431] * other[e23]) + (self[e431] * other[e4235])
                    - (self[e1] * other[e42])
                    - (self[e415] * other[e42])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315]),
            ]) + (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(other[e45]) * self.group7())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (self[e2] * other[e35]) + (self[e435] * other[e25]),
                (self[e3] * other[e15]) + (self[e415] * other[e35]),
                (self[e1] * other[e25]) + (self[e425] * other[e15]),
            ]) + (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e42] * other[e35])
                    + (self[e23] * other[e45])
                    + (self[e12] * other[e4315])
                    + (self[e4125] * other[e31])
                    + (self[e3215] * other[e41])
                    - (self[e25] * other[e43])
                    - (self[e41] * other[e3215])
                    - (self[e43] * other[e25])
                    - (self[e31] * other[e4125])
                    - (self[e4315] * other[e12])
                    - (self[e1234] * other[e15]),
                (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e43] * other[e15])
                    + (self[e23] * other[e4125])
                    + (self[e31] * other[e45])
                    + (self[e4235] * other[e12])
                    + (self[e3215] * other[e42])
                    - (self[e35] * other[e41])
                    - (self[e41] * other[e35])
                    - (self[e42] * other[e3215])
                    - (self[e12] * other[e4235])
                    - (self[e4125] * other[e23])
                    - (self[e1234] * other[e25]),
                (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e41] * other[e25])
                    + (self[e31] * other[e4235])
                    + (self[e12] * other[e45])
                    + (self[e4315] * other[e23])
                    + (self[e3215] * other[e43])
                    - (self[e15] * other[e42])
                    - (self[e42] * other[e15])
                    - (self[e43] * other[e3215])
                    - (self[e23] * other[e4315])
                    - (self[e4235] * other[e31])
                    - (self[e1234] * other[e35]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                    - (self[e15] * other[e23])
                    - (self[e25] * other[e31])
                    - (self[e35] * other[e12])
                    - (self[e23] * other[e15])
                    - (self[e31] * other[e25])
                    - (self[e12] * other[e35])
                    - (self[e4235] * other[e15])
                    - (self[e4315] * other[e25])
                    - (self[e4125] * other[e35])
                    - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group9()),
            // e1234
            (self[scalar] * other[e1234])
                + (self[e4235] * other[e41])
                + (self[e4315] * other[e42])
                + (self[e4125] * other[e43])
                + (self[e1234] * other[scalar])
                + (self[e1234] * other[e45])
                - (self[e45] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43]),
        );
    }
}
impl std::ops::Div<geometric_product> for Plane {
    type Output = geometric_product_partial<Plane>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       29       44        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e412] * self[e3215]) + (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e3215] * self[e4235], other[e3215] * self[e4315], other[e3215] * self[e4125], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([other[e321] * self[e4235], other[e321] * self[e4315], other[e321] * self[e4125], 1.0]) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl GeometricProduct<AntiPlane> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       15        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e5] * self[e4235], other[e5] * self[e4315], other[e5] * self[e4125], 0.0])
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<AntiScalar> for Plane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<Circle> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e321] * self[e3215]) + (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]) - (other[e1234] * self[e4125]),
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([other[e5] * self[e4235], other[e5] * self[e4315], other[e5] * self[e4125], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e45] * self[e4235], other[e45] * self[e4315], other[e45] * self[e4125], 1.0]) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
        );
    }
}
impl GeometricProduct<Line> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) - (other[e415] * self[e4315]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       97        0
    //    simd2        1        1        0
    //    simd3        7        7        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       75      107        0
    //  no simd       96      128        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                (other[e415] * self[e4125]) - (other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                (other[e425] * self[e4235]) - (other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e423] * self[e3215]) - (other[e2] * self[e4125]) - (other[e321] * self[e4235]),
                (other[e1] * self[e4125]) + (other[e431] * self[e3215]) - (other[e3] * self[e4235]) - (other[e321] * self[e4315]),
                (other[e2] * self[e4235]) + (other[e412] * self[e3215]) - (other[e1] * self[e4315]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
    }
}
impl GeometricProduct<Plane> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       18        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([(other[e4235] * self[e3215]) * -1.0, (other[e4315] * self[e3215]) * -1.0, (other[e4125] * self[e3215]) * -1.0, 0.0])
                + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()).extend_to_4(0.0),
        );
    }
}
impl GeometricProduct<RoundPoint> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        9       27        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) - (self[e4235] * other[e3]),
                (self[e4235] * other[e2]) - (self[e4315] * other[e1]),
                self[e3215] * other[e4],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                self[e4235] * other[e5],
                self[e4315] * other[e5],
                self[e4125] * other[e5],
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for Plane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        9       19        0
    //  no simd        9       23        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) - (self[e4235] * other[e4315]),
                self[e3215] * other[e1234],
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e4235] * other[e3215]) - (self[e3215] * other[e4235]),
                (self[e4315] * other[e3215]) - (self[e3215] * other[e4315]),
                (self[e4125] * other[e3215]) - (self[e3215] * other[e4125]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       48       64        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]) - (self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]) - (self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]) - (self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) - (self[e4235] * other[e315]),
                -(self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                (self[e4125] * other[e415]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                (self[e4235] * other[e425]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]),
        );
    }
}
impl GeometricProduct<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       48       64        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]) - (self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]) - (self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]) - (self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]) - (self[e4315] * other[e12]),
                (self[e4235] * other[e12]) + (self[e3215] * other[e42]) - (self[e4125] * other[e23]),
                (self[e4315] * other[e23]) + (self[e3215] * other[e43]) - (self[e4235] * other[e31]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl std::ops::Div<geometric_product> for RoundPoint {
    type Output = geometric_product_partial<RoundPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       44        0
    //    simd3        1        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       32       47        0
    //  no simd       40       55        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                (other[e45] * self[e4]) + (other[scalar] * self[e4]) - (other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       59        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       59       75        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e2]) + (other[e1] * self[e4]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) + (other[e2] * self[e4]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) + (other[e3] * self[e4]) - (other[e423] * self[e2]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e321] * self[e1]) - (other[e235] * self[e4]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e321] * self[e2]) - (other[e315] * self[e4]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e321] * self[e3]) - (other[e125] * self[e4]) - (other[e1] * self[e2]),
                (other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]) - (other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]) - (other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e3215] * self[e1], other[e3215] * self[e2], other[e3215] * self[e3], other[scalar] * self[e5]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e235] * self[e4]) - (other[e321] * self[e1]),
                -(other[e315] * self[e4]) - (other[e321] * self[e2]),
                -(other[e125] * self[e4]) - (other[e321] * self[e3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e315] * self[e1]),
                other[e321] * self[e4],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        4        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       16       32        0
    //  no simd       24       46        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e1] * self[e4],
                other[e2] * self[e4],
                other[e3] * self[e4],
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e3] * self[e2]) - (other[e2] * self[e3]),
                    (other[e1] * self[e3]) - (other[e3] * self[e1]),
                    (other[e2] * self[e1]) - (other[e1] * self[e2]),
                ]) - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e315] * self[e3]) - (other[e125] * self[e2]),
                    (other[e125] * self[e1]) - (other[e235] * self[e3]),
                    (other[e235] * self[e2]) - (other[e315] * self[e1]),
                ]) + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3()))
                .extend_to_4(other[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]),
                0.0,
            ]) + (Simd32x3::from(self[e5]) * other.group0()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                (other[e3215] * self[e4]) - (other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e31] * self[e3]) - (other[e12] * self[e2]),
                    (other[e12] * self[e1]) - (other[e23] * self[e3]),
                    (other[e23] * self[e2]) - (other[e31] * self[e1]),
                ]) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                    + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()))
                .extend_to_4(other[scalar]),
        );
    }
}
impl GeometricProduct<AntiPlane> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd        9       20        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0().truncate_to_3(),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                other[e5] * self[e4],
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e5] * self[e1]) - (other[e1] * self[e5]),
                (other[e5] * self[e2]) - (other[e2] * self[e5]),
                (other[e5] * self[e3]) - (other[e3] * self[e5]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Circle> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e321] * self[e1]) - (other[e235] * self[e4]),
                -(other[e431] * self[e5]) - (other[e321] * self[e2]) - (other[e315] * self[e4]),
                -(other[e412] * self[e5]) - (other[e321] * self[e3]) - (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       40       55        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e321] * self[e1]) - (other[e235] * self[e4]),
                -(other[e431] * self[e5]) - (other[e321] * self[e2]) - (other[e315] * self[e4]),
                -(other[e412] * self[e5]) - (other[e321] * self[e3]) - (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]) - (other[e12345] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e12345] * self[e1]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e12345] * self[e2]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) + (other[e12345] * self[e3]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]) - (other[e45] * self[e1]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]) - (other[e45] * self[e2]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]) - (other[e45] * self[e3]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]),
                (other[e45] * self[e4]) - (other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]) - (other[e31] * self[e1]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e45]])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       55        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       44       60        0
    //  no simd       59       75        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e3]) + (other[e4235] * self[e4]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) + (other[e4315] * self[e4]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) + (other[e4125] * self[e4]) - (other[e42] * self[e1]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e4125] * self[e2]) - (other[e45] * self[e1]) - (other[e4315] * self[e3]),
                (other[e42] * self[e5]) + (other[e4235] * self[e3]) - (other[e45] * self[e2]) - (other[e4125] * self[e1]),
                (other[e43] * self[e5]) + (other[e4315] * self[e1]) - (other[e45] * self[e3]) - (other[e4235] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e41] * self[e5]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e42] * self[e5]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e43] * self[e5]) - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<DualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       26        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([1.0, 1.0, 1.0, other[e5] * self[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e5] * self[e4]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], other[e12345] * self[e4]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        0        1        0
    //    simd4        1        0        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       10       23        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(other[e45] * self[e1]) * -1.0, (other[e45] * self[e2]) * -1.0, (other[e45] * self[e3]) * -1.0, 0.0])
                + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]),
                other[e45] * self[e4],
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4235] * self[e4],
                other[e4315] * self[e4],
                other[e4125] * self[e4],
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e4125] * self[e2]) - (other[e4315] * self[e3]),
                    (other[e4235] * self[e3]) - (other[e4125] * self[e1]),
                    (other[e4315] * self[e1]) - (other[e4235] * self[e2]),
                ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3()))
                .extend_to_4(other[e3215]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]) - (other[e3215] * self[e1]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]) - (other[e3215] * self[e2]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * other.group0(),
        );
    }
}
impl GeometricProduct<Line> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       16       37        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        2        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       24       55        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e4],
                other[e315] * self[e4],
                other[e125] * self[e4],
                (other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e315] * self[e3]) - (other[e125] * self[e2]),
                    (other[e125] * self[e1]) - (other[e235] * self[e3]),
                    (other[e235] * self[e2]) - (other[e315] * self[e1]),
                ]) + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e12345] * self[e5]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       94        0
    //    simd2        3        3        0
    //    simd3       12       12        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       83      115        0
    //  no simd      128      160        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e4] * self[e5]) - (other[e5] * self[e4]), (other[e3215] * self[e4]) + (other[e1234] * self[e5])])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) - (other[e41] * self[e5]) - (other[e12] * self[e2]),
                (other[e12] * self[e1]) - (other[e42] * self[e5]) - (other[e23] * self[e3]),
                (other[e23] * self[e2]) - (other[e43] * self[e5]) - (other[e31] * self[e1]),
                -(other[e41] * self[e1]) - (other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                + (Simd32x4::from(self[e4]) * other.group3()),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) - (other[e415] * self[e5]) - (other[e125] * self[e2]),
                (other[e125] * self[e1]) - (other[e425] * self[e5]) - (other[e235] * self[e3]),
                (other[e235] * self[e2]) - (other[e435] * self[e5]) - (other[e315] * self[e1]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0())
                - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e2]) - (other[e431] * self[e3]),
                (other[e423] * self[e3]) - (other[e412] * self[e1]),
                (other[e431] * self[e1]) - (other[e423] * self[e2]),
            ]) + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
            ]) - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(self[e5]) * other.group7()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e4125] * self[e2]) - (other[e45] * self[e1]) - (other[e4315] * self[e3]),
                (other[e42] * self[e5]) + (other[e4235] * self[e3]) - (other[e45] * self[e2]) - (other[e4125] * self[e1]),
                (other[e43] * self[e5]) + (other[e4315] * self[e1]) - (other[e45] * self[e3]) - (other[e4235] * self[e2]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e3]) - (other[e43] * self[e2]),
                (other[e43] * self[e1]) - (other[e41] * self[e3]),
                (other[e41] * self[e2]) - (other[e42] * self[e1]),
            ]) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group5()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e35] * self[e2]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) - (other[e15] * self[e2]),
            ]) + (Simd32x3::from(self[e5]) * other.group5())
                - (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) - (other[e435] * self[e2]),
                (other[e12345] * self[e2]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) - (other[e415] * self[e3]),
                (other[e12345] * self[e3]) + (other[e415] * self[e2]) + (other[e125] * self[e4]) - (other[e425] * self[e1]),
                -(other[e321] * self[e5]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[e321] * self[e4]) + (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<Plane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd        9       20        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0().truncate_to_3(),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) - (other[e4235] * self[e2]),
                other[e3215] * self[e4],
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       14       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e2] * self[e3]),
                (other[e1] * self[e3]) - (other[e3] * self[e1]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]),
                (other[e5] * self[e4]) - (other[e4] * self[e5]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                other[e5] * self[e1],
                other[e5] * self[e2],
                other[e5] * self[e3],
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[scalar]) * self.group0(), /* e5 */ self[e5] * other[scalar]);
    }
}
impl GeometricProduct<Sphere> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       14       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) - (self[e1] * other[e4125]),
                (self[e1] * other[e4315]) - (self[e2] * other[e4235]),
                (self[e4] * other[e3215]) - (self[e5] * other[e1234]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       52       68        0
    //  no simd       64       80        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e2] * other[e412]) + (self[e4] * other[e1]) - (self[e3] * other[e431]),
                (self[e3] * other[e423]) + (self[e4] * other[e2]) - (self[e1] * other[e412]),
                (self[e1] * other[e431]) + (self[e4] * other[e3]) - (self[e2] * other[e423]),
                (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e2] * other[e3]) - (self[e1] * other[e321]) - (self[e3] * other[e2]) - (self[e4] * other[e235]),
                (self[e3] * other[e1]) - (self[e1] * other[e3]) - (self[e2] * other[e321]) - (self[e4] * other[e315]),
                (self[e1] * other[e2]) - (self[e2] * other[e1]) - (self[e3] * other[e321]) - (self[e4] * other[e125]),
                (self[e4] * other[e5]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) + (self[e4] * other[e321]) - (self[e4] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) + (self[e4] * other[e235]) - (self[e2] * other[e435]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) + (self[e4] * other[e315]) - (self[e3] * other[e415]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) + (self[e4] * other[e125]) - (self[e1] * other[e425]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e3] * other[e42]) + (self[e4] * other[e4235]) - (self[e2] * other[e43]),
                (self[e1] * other[e43]) + (self[e4] * other[e4315]) - (self[e3] * other[e41]),
                (self[e2] * other[e41]) + (self[e4] * other[e4125]) - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]) - (self[e1] * other[e45]) - (self[e3] * other[e4315]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]) - (self[e1] * other[e4125]) - (self[e2] * other[e45]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]) - (self[e2] * other[e4235]) - (self[e3] * other[e45]),
                -(self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]),
                (self[e3] * other[e15]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]),
                (self[e1] * other[e25]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) - (self[e2] * other[e12]) - (self[e5] * other[e41]),
                (self[e1] * other[e12]) - (self[e3] * other[e23]) - (self[e5] * other[e42]),
                (self[e2] * other[e23]) - (self[e1] * other[e31]) - (self[e5] * other[e43]),
                -(self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl std::ops::Div<geometric_product> for Scalar {
    type Output = geometric_product_partial<Scalar>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ other[e12345] * self[scalar]);
    }
}
impl GeometricProduct<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group1(),
            // e5
            other[e5] * self[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group9(),
            // e1234
            other[e1234] * self[scalar],
        );
    }
}
impl GeometricProduct<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[scalar]) * other.group0(), /* e5 */ other[e5] * self[scalar]);
    }
}
impl GeometricProduct<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ other[scalar] * self[scalar]);
    }
}
impl GeometricProduct<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1234
            self[scalar] * other[e1234],
        );
    }
}
impl GeometricProduct<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl std::ops::Div<geometric_product> for Sphere {
    type Output = geometric_product_partial<Sphere>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd3        1        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       40       55        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       63        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       50       66        0
    //  no simd       59       75        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]) - (other[e4] * self[e4235]) - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]) - (other[e4] * self[e4315]) - (other[e2] * self[e1234]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]) - (other[e4] * self[e4125]) - (other[e3] * self[e1234]),
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e3] * self[e4315]) - (other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e1] * self[e4125]) - (other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                (other[e412] * self[e3215]) + (other[e2] * self[e4235]) - (other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       18        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, other[e3215] * self[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3215] * self[e4235], other[e3215] * self[e4315], other[e3215] * self[e4125], other[scalar] * self[e1234]]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       10       27        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(other[e321] * self[e4235]) * -1.0, (other[e321] * self[e4315]) * -1.0, (other[e321] * self[e4125]) * -1.0, 0.0])
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                other[e321] * self[e1234],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd       17       32        0
    //  no simd       24       51        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1] * self[e1234],
                other[e2] * self[e1234],
                other[e3] * self[e1234],
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                    (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                    (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                ]) + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3()))
                .extend_to_4(other[e5]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiLine> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                0.0,
            ]) + (Simd32x3::from(self[e3215]) * other.group0()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                    (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                    (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                ]) + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                    + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()))
                .extend_to_4(other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl GeometricProduct<AntiPlane> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       23        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                other[e5] * self[e1234],
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                other[e1] * self[e3215],
                other[e2] * self[e3215],
                other[e3] * self[e3215],
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
        );
    }
}
impl GeometricProduct<Circle> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        1        1        0
    // Totals...
    // yes simd       33       48        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       52        0
    //    simd3        1        1        0
    // Totals...
    // yes simd       38       53        0
    //  no simd       40       55        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]) - (other[e321] * self[e4235]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]) - (other[e321] * self[e4315]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) + (other[e12345] * self[e1234]) - (other[e321] * self[e1234]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e423] * self[e3215]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e431] * self[e3215]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e12345] * self[e4125]),
                (other[e321] * self[e3215]) + (other[e12345] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        1        1        0
    // Totals...
    // yes simd       33       48        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       67        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       53       69        0
    //  no simd       59       75        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e4235] * self[e1234]) - (other[e42] * self[e4125]) - (other[e1234] * self[e4235]),
                (other[e41] * self[e4125]) + (other[e4315] * self[e1234]) - (other[e43] * self[e4235]) - (other[e1234] * self[e4315]),
                (other[e42] * self[e4235]) + (other[e4125] * self[e1234]) - (other[e41] * self[e4315]) - (other[e1234] * self[e4125]),
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e12] * self[e4315]) - (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e23] * self[e4125]) - (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e31] * self[e4235]) - (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([1.0, 1.0, 1.0, other[e5] * self[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([1.0, 1.0, 1.0, other[e5] * self[e1234]]) * Simd32x4::from([0.0, 0.0, 0.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e5] * self[e4235], other[e5] * self[e4315], other[e5] * self[e4125], other[e12345] * self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       19        0
    //  no simd       10       24        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e45] * self[e4235], other[e45] * self[e4315], other[e45] * self[e4125], 0.0])
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()).extend_to_4(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                other[e45] * self[e1234],
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        4        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       24       54        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4235] * self[e1234],
                other[e4315] * self[e1234],
                other[e4125] * self[e1234],
                (other[e3215] * self[e1234]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                    (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                    (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                ]) + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                    + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e3215])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e25] * self[e4125]) - (other[e35] * self[e4315]),
                    (other[e35] * self[e4235]) - (other[e15] * self[e4125]),
                    (other[e15] * self[e4315]) - (other[e25] * self[e4235]),
                ]) + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                    - (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()))
                .extend_to_4(other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        0        2        0
    //    simd4        1        0        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       30        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
                0.0,
            ]) + (Simd32x3::from(self[e3215]) * other.group0()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) - (other[e425] * self[e4125]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) - (other[e435] * self[e4235]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) - (other[e415] * self[e4315]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       24       43        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]) - (other[e315] * self[e4235]),
                -(other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e435] * self[e4315]) - (other[e425] * self[e4125]),
                    (other[e415] * self[e4125]) - (other[e435] * self[e4235]),
                    (other[e425] * self[e4235]) - (other[e415] * self[e4315]),
                ]) + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                    - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3()))
                .extend_to_4(other[e12345]),
        );
    }
}
impl GeometricProduct<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      104        0
    //    simd2        2        2        0
    //    simd3       12       12        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       90      122        0
    //  no simd      128      160        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) - (other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                (other[e415] * self[e4125]) - (other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                (other[e425] * self[e4235]) - (other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125]) - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]) - (other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]) - (other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]) - (other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e43] * self[e4315]) - (other[e42] * self[e4125]),
                (other[e41] * self[e4125]) - (other[e43] * self[e4235]),
                (other[e42] * self[e4235]) - (other[e41] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group5())
                - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e423] * self[e3215]) - (other[e2] * self[e4125]) - (other[e321] * self[e4235]),
                (other[e1] * self[e4125]) + (other[e431] * self[e3215]) - (other[e3] * self[e4235]) - (other[e321] * self[e4315]),
                (other[e2] * self[e4235]) + (other[e412] * self[e3215]) - (other[e1] * self[e4315]) - (other[e321] * self[e4125]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e412] * self[e4315]) - (other[e431] * self[e4125]),
                (other[e423] * self[e4125]) - (other[e412] * self[e4235]),
                (other[e431] * self[e4235]) - (other[e423] * self[e4315]),
            ]) + (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e315] * self[e4125]) - (other[e125] * self[e4315]),
                (other[e125] * self[e4235]) - (other[e235] * self[e4125]),
                (other[e235] * self[e4315]) - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]) - (other[e15] * self[e1234]) - (other[e12] * self[e4315]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]) - (other[e25] * self[e1234]) - (other[e23] * self[e4125]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) - (other[e35] * self[e1234]) - (other[e31] * self[e4235]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
            // e1234
            (other[scalar] * self[e1234]) + (other[e45] * self[e1234]) + (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
    }
}
impl GeometricProduct<Plane> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd3        0        1        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        9       27        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0().truncate_to_3(),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                other[e3215] * self[e1234],
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e4235] * self[e3215]) * -1.0,
                (other[e4315] * self[e3215]) * -1.0,
                (other[e4125] * self[e3215]) * -1.0,
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       17       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            -(Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]),
                (other[e5] * self[e1234]) - (other[e4] * self[e3215]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]))
                + (Simd32x4::from(self[e3215]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1234
            other[scalar] * self[e1234],
        );
    }
}
impl GeometricProduct<Sphere> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       14       28        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) - (other[e4125] * self[e4315]),
                (other[e4125] * self[e4235]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) - (other[e4315] * self[e4235]),
                (other[e1234] * self[e3215]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e4235] * self[e3215]) * -1.0,
                (other[e4315] * self[e3215]) * -1.0,
                (other[e4125] * self[e3215]) * -1.0,
                (other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]])),
        );
    }
}
impl GeometricProduct<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       49       65        0
    //  no simd       64       80        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other[e412]) - (self[e4235] * other[e4]) - (self[e4125] * other[e431]) - (self[e1234] * other[e1]),
                (self[e4125] * other[e423]) - (self[e4235] * other[e412]) - (self[e4315] * other[e4]) - (self[e1234] * other[e2]),
                (self[e4235] * other[e431]) - (self[e4315] * other[e423]) - (self[e4125] * other[e4]) - (self[e1234] * other[e3]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]) - (self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]) - (self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]) - (self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4235] * other[e415]) + (self[e4315] * other[e425]) + (self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[e1234]) * other.group2()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) - (self[e4235] * other[e315]),
                -(self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e12345]]))
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e435]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                (self[e4125] * other[e415]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                (self[e4235] * other[e425]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4235] * other[e423]) + (self[e4315] * other[e431]) + (self[e4125] * other[e412]) - (self[e1234] * other[e321]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       55       71        0
    //  no simd       64       80        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other[e43]) + (self[e1234] * other[e4235]) - (self[e4235] * other[e1234]) - (self[e4125] * other[e42]),
                (self[e4125] * other[e41]) + (self[e1234] * other[e4315]) - (self[e4235] * other[e43]) - (self[e4315] * other[e1234]),
                (self[e4235] * other[e42]) + (self[e1234] * other[e4125]) - (self[e4315] * other[e41]) - (self[e4125] * other[e1234]),
                (self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e1234] * other[e15]) - (self[e4315] * other[e4125]),
                (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e1234] * other[e25]) - (self[e4125] * other[e4235]),
                (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e1234] * other[e35]) - (self[e4235] * other[e4315]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]) - (self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]) - (self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]) - (self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) + (self[e1234] * other[scalar]) + (self[e1234] * other[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]) - (self[e4315] * other[e12]) - (self[e1234] * other[e15]),
                (self[e4235] * other[e12]) + (self[e3215] * other[e42]) - (self[e4125] * other[e23]) - (self[e1234] * other[e25]),
                (self[e4315] * other[e23]) + (self[e3215] * other[e43]) - (self[e4235] * other[e31]) - (self[e1234] * other[e35]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0()),
        );
    }
}
impl std::ops::Div<geometric_product> for VersorEven {
    type Output = geometric_product_partial<VersorEven>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      124        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      121      137        0
    //  no simd      160      176        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(other[e45]) * self.group2())
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      200        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      194      210        0
    //  no simd      224      240        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e425] * self[e412])
                    - (other[e4] * self[e1])
                    - (other[e3] * self[e431]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e435] * self[e423])
                    - (other[e4] * self[e2])
                    - (other[e1] * self[e412]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e4] * self[e3])
                    - (other[e2] * self[e423]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e4] * self[e235])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e4] * self[e315])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e4] * self[e125])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e5] * self[e423])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e4] * self[e235])
                    - (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e5] * self[e431])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e4] * self[e315])
                    - (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e5] * self[e412])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e4] * self[e125])
                    - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        5       13        0
    //  no simd       16       35        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[scalar] * self[e423],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                (other[e3215] * self[e4]) + (other[scalar] * self[e12345]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]])) + (Simd32x4::from(other[scalar]) * self.group2())
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group3().truncate_to_3())).extend_to_4(other[scalar]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       42        0
    //    simd3        6        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       36       50        0
    //  no simd       48       67        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e321] * self[e423],
                other[e321] * self[e431],
                other[e321] * self[e412],
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) - (other[e235] * self[e4]) - (other[e315] * self[e412]) - (other[e321] * self[e1]),
                (other[e235] * self[e412]) - (other[e315] * self[e4]) - (other[e125] * self[e423]) - (other[e321] * self[e2]),
                (other[e315] * self[e423]) - (other[e235] * self[e431]) - (other[e125] * self[e4]) - (other[e321] * self[e3]),
                (other[e321] * self[e12345]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * ((Simd32x3::from(other[e235]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                    + (Simd32x3::from(other[e315]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                    + (Simd32x3::from(other[e125]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                    - (Simd32x3::from(other[e235]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                    - (Simd32x3::from(other[e315]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                    - (Simd32x3::from(other[e125]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                    - (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()))
                .extend_to_4(other[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) - (other[e125] * self[e431]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) - (other[e235] * self[e412]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) - (other[e315] * self[e423]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5]),
            ]),
        );
    }
}
impl GeometricProduct<AntiFlector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      124        0
    //    simd4        1        1        0
    // Totals...
    // yes simd      109      125        0
    //  no simd      112      128        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e423]) + (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e321] * self[e431]) + (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e321] * self[e412]) + (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3])
                    - (other[e321] * self[e321])
                    - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e321] * self[e1])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e5] * self[e423]),
                (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e321] * self[e2])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e5] * self[e431]),
                (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e321] * self[e3])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e5] * self[e412]),
                (other[e321] * self[e12345]) + (other[e5] * self[e4])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e2] * self[e435])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425]),
                (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e2] * self[e12345]) + (other[e3] * self[e415])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e321] * self[e435]) + (other[e1] * self[e425]) + (other[e3] * self[e12345])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415]),
                (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e321] * self[e5])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiLine> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e23] * self[e4]) + (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e31] * self[e4]) + (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) + (other[e12] * self[e4]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e12] * self[e2]) - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e23] * self[e3]) - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e31] * self[e1]) - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       70       86        0
    //  no simd      112      128        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) - (other[e12] * self[e431]),
                (other[e12] * self[e423]) - (other[e23] * self[e412]),
                (other[e23] * self[e431]) - (other[e31] * self[e423]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[e4]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) - (other[e12] * self[e315]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                + (Simd32x4::from(self[e5]) * other.group0())
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423])
                    - (other[e12] * self[e2])
                    - (other[e35] * self[e431]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431])
                    - (other[e23] * self[e3])
                    - (other[e15] * self[e412]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412])
                    - (other[e31] * self[e1])
                    - (other[e25] * self[e423]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3()),
        );
    }
}
impl GeometricProduct<AntiPlane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       45       61        0
    //  no simd       48       64        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]),
                (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]),
                (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]) - (other[e5] * self[e423]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]) - (other[e5] * self[e431]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e5] * self[e4]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<AntiScalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e5]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      152        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      138      154        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e423] * self[e12345])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e431] * self[e12345])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e412] * self[e12345])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      160        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      148      164        0
    //  no simd      160      176        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e435] * self[e431]) + (other[e321] * self[e423])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412])
                    - (other[e12345] * self[e423]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e415] * self[e412]) + (other[e321] * self[e431])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423])
                    - (other[e12345] * self[e431]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e425] * self[e423]) + (other[e321] * self[e412])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4])
                    - (other[e12345] * self[e412]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e423] * self[e5])
                    - (other[e431] * self[e125])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e431] * self[e5])
                    - (other[e412] * self[e235])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e423] * self[e315])
                    - (other[e412] * self[e5])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e12345] * self[e435]),
                (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e321] * self[e12345]) + (other[e12345] * self[e321])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e12345] * self[e1])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e12345] * self[e2])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e431] * self[e235])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e12345] * self[e3])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]])),
        );
    }
}
impl GeometricProduct<Dipole> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      124        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      117      133        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423]),
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e42] * self[e125]) + (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431]),
                (other[e42] * self[e5]) + (other[e43] * self[e235]) + (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e43] * self[e5]) + (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423]),
                (other[e41] * self[e235]) + (other[e42] * self[e315]) + (other[e43] * self[e125])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) - (other[e12] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) - (other[e23] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) - (other[e31] * self[e235]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e45]) * self.group2())
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e25] * self[e412])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e35] * self[e423])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423]),
                -(other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      168        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      170      186        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[e1234] * self[e1])
                    + (other[e4235] * self[e4])
                    + (other[e4315] * self[e412])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[e1234] * self[e2])
                    + (other[e4315] * self[e4])
                    + (other[e4125] * self[e423])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e45] * self[e412])
                    + (other[e1234] * self[e3])
                    + (other[e4235] * self[e431])
                    + (other[e4125] * self[e4])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e25] * self[e412])
                    + (other[e1234] * self[e235])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e35] * self[e423])
                    + (other[e1234] * self[e315])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e15] * self[e431])
                    + (other[e1234] * self[e125])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e4125] * self[e315]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e4235] * self[e125]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e4315] * self[e235]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e45] * self[e415])
                    - (other[e35] * self[e431])
                    - (other[e1234] * self[e235])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e45] * self[e425])
                    - (other[e15] * self[e412])
                    - (other[e1234] * self[e315])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e45] * self[e435])
                    - (other[e25] * self[e423])
                    - (other[e1234] * self[e125])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]])),
        );
    }
}
impl GeometricProduct<DualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        2        3        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        9       25        0
    //  no simd       16       43        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12345] * self[e423],
                other[e12345] * self[e431],
                other[e12345] * self[e412],
                -(other[e5] * self[e4]) - (other[e12345] * self[e12345]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e5] * self[e423]) - (other[e12345] * self[e415]),
                -(other[e5] * self[e431]) - (other[e12345] * self[e425]),
                -(other[e5] * self[e412]) - (other[e12345] * self[e435]),
                (other[e5] * self[e4]) + (other[e12345] * self[e321]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * ((Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                    - (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                    - (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3()))
                .extend_to_4(other[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        2        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       36        0
    //  no simd       48       67        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e45] * self[e423],
                other[e45] * self[e431],
                other[e45] * self[e412],
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) - (other[e35] * self[e431]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) - (other[e15] * self[e412]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) - (other[e25] * self[e423]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2()),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e4]])
                * (Simd32x3::from([
                    (other[e25] * self[e412]) - (other[e35] * self[e431]),
                    (other[e35] * self[e423]) - (other[e15] * self[e412]),
                    (other[e15] * self[e431]) - (other[e25] * self[e423]),
                ]) + (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()))
                .extend_to_4(other[e45]),
        );
    }
}
impl GeometricProduct<Flector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       73       89        0
    //  no simd      112      128        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e45] * self[e423]) + (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e45] * self[e431]) + (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e45] * self[e412]) + (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321]),
            ]) + (Simd32x4::from(self[e4]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e2]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423]) + (other[e4235] * self[e3]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431]) + (other[e4315] * self[e1]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2())
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415]),
                (other[e15] * self[e431]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(self[e4]) * other.group0()),
        );
    }
}
impl GeometricProduct<Line> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e431]) - (other[e415] * self[e4]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e425] * self[e4]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412]),
                (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423]),
                (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4]),
                -(other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e315] * self[e412])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e125] * self[e423])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e235] * self[e431]) + (other[e125] * self[e4])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      112        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      100      116        0
    //  no simd      112      128        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e431]) - (other[e425] * self[e412]),
                (other[e415] * self[e412]) - (other[e435] * self[e423]),
                (other[e425] * self[e423]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) - (Simd32x4::from(other[e12345]) * self.group0())
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e12345] * self[e415])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e5] * self[e423]),
                (other[e415] * self[e435]) + (other[e235] * self[e412])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e12345] * self[e425])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e5] * self[e431]),
                (other[e425] * self[e415]) + (other[e315] * self[e423])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e12345] * self[e435])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e5] * self[e412]),
                (other[e12345] * self[e321]) + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]) + (other[e315] * self[e412]) + (other[e5] * self[e423])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]) + (other[e125] * self[e423]) + (other[e5] * self[e431])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e235] * self[e431]) + (other[e125] * self[e4]) + (other[e5] * self[e412])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e12345] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      302      334        0
    //    simd2        4        4        0
    //    simd3       38       38        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      358      390        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4]),
                (other[scalar] * self[e12345]) + (other[e3215] * self[e4]) + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from(self[e321]) * Simd32x2::from([other[e321], other[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e43] * self[e315]) + (other[e31] * self[e3]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423])
                    - (other[e35] * self[e431])
                    - (other[e45] * self[e415])
                    - (other[e41] * self[e5])
                    - (other[e42] * self[e125])
                    - (other[e12] * self[e2])
                    - (other[e4235] * self[e12345])
                    - (other[e4315] * self[e435])
                    - (other[e1234] * self[e235]),
                (other[e35] * self[e423]) + (other[e41] * self[e125]) + (other[e12] * self[e1]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431])
                    - (other[e15] * self[e412])
                    - (other[e45] * self[e425])
                    - (other[e42] * self[e5])
                    - (other[e43] * self[e235])
                    - (other[e23] * self[e3])
                    - (other[e4315] * self[e12345])
                    - (other[e4125] * self[e415])
                    - (other[e1234] * self[e315]),
                (other[e15] * self[e431]) + (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412])
                    - (other[e25] * self[e423])
                    - (other[e45] * self[e435])
                    - (other[e41] * self[e315])
                    - (other[e43] * self[e5])
                    - (other[e31] * self[e1])
                    - (other[e4235] * self[e425])
                    - (other[e4125] * self[e12345])
                    - (other[e1234] * self[e125]),
                (other[e1234] * self[e12345])
                    - (other[e41] * self[e415])
                    - (other[e41] * self[e1])
                    - (other[e42] * self[e425])
                    - (other[e42] * self[e2])
                    - (other[e43] * self[e435])
                    - (other[e43] * self[e3])
                    - (other[e23] * self[e423])
                    - (other[e31] * self[e431])
                    - (other[e12] * self[e412])
                    - (other[e4235] * self[e423])
                    - (other[e4315] * self[e431])
                    - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * other.group3()),
            // e5
            (other[scalar] * self[e5])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e435] * self[e315]) + (other[e315] * self[e3]) + (other[e125] * self[e425])
                    - (other[e12345] * self[e235])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235]),
                (other[e1] * self[e125]) + (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e125] * self[e1])
                    - (other[e12345] * self[e315])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315]),
                (other[e2] * self[e235]) + (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415])
                    - (other[e12345] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e5] * self[e435])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125]),
                (other[e321] * self[e12345]) + (other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group3())
                + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]))
                - (Simd32x4::from(other[e315]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]))
                - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2])
                    - (other[e3] * self[e431])
                    - (other[e425] * self[e412])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3]),
                (other[e423] * self[e435]) + (other[e423] * self[e3])
                    - (other[e1] * self[e412])
                    - (other[e435] * self[e423])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1]),
                (other[e431] * self[e415]) + (other[e431] * self[e1])
                    - (other[e2] * self[e423])
                    - (other[e415] * self[e431])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2]),
            ]) + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(self[e321]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e3] * self[e2]) + (other[e435] * self[e425]) + (other[e412] * self[e315]) + (other[e125] * self[e431])
                    - (other[e2] * self[e3])
                    - (other[e425] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e315] * self[e412]),
                (other[e1] * self[e3]) + (other[e415] * self[e435]) + (other[e423] * self[e125]) + (other[e235] * self[e412])
                    - (other[e3] * self[e1])
                    - (other[e435] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e125] * self[e423]),
                (other[e2] * self[e1]) + (other[e425] * self[e415]) + (other[e431] * self[e235]) + (other[e315] * self[e423])
                    - (other[e1] * self[e2])
                    - (other[e415] * self[e425])
                    - (other[e423] * self[e315])
                    - (other[e235] * self[e431]),
            ]) - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group8()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e25] * self[e412])
                    + (other[e41] * self[e5])
                    + (other[e42] * self[e125])
                    + (other[e23] * self[e12345])
                    + (other[e31] * self[e435])
                    + (other[e4125] * self[e2])
                    + (other[e3215] * self[e423])
                    + (other[e1234] * self[e235])
                    - (other[e35] * self[e431])
                    - (other[e43] * self[e315])
                    - (other[e12] * self[e425])
                    - (other[e4235] * self[e321])
                    - (other[e4315] * self[e3]),
                (other[e35] * self[e423])
                    + (other[e42] * self[e5])
                    + (other[e43] * self[e235])
                    + (other[e31] * self[e12345])
                    + (other[e12] * self[e415])
                    + (other[e4235] * self[e3])
                    + (other[e3215] * self[e431])
                    + (other[e1234] * self[e315])
                    - (other[e15] * self[e412])
                    - (other[e41] * self[e125])
                    - (other[e23] * self[e435])
                    - (other[e4315] * self[e321])
                    - (other[e4125] * self[e1]),
                (other[e15] * self[e431])
                    + (other[e41] * self[e315])
                    + (other[e43] * self[e5])
                    + (other[e23] * self[e425])
                    + (other[e12] * self[e12345])
                    + (other[e4315] * self[e1])
                    + (other[e3215] * self[e412])
                    + (other[e1234] * self[e125])
                    - (other[e25] * self[e423])
                    - (other[e42] * self[e235])
                    - (other[e31] * self[e415])
                    - (other[e4235] * self[e2])
                    - (other[e4125] * self[e321]),
                (other[e41] * self[e235])
                    + (other[e42] * self[e315])
                    + (other[e43] * self[e125])
                    + (other[e4235] * self[e415])
                    + (other[e4315] * self[e425])
                    + (other[e4125] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e23] * self[e1])
                    - (other[e31] * self[e2])
                    - (other[e12] * self[e3])
                    - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e42] * self[e435]) + (other[e42] * self[e3]) + (other[e31] * self[e412]) + (other[e4315] * self[e412])
                    - (other[e43] * self[e425])
                    - (other[e43] * self[e2])
                    - (other[e12] * self[e431])
                    - (other[e4125] * self[e431]),
                (other[e43] * self[e415]) + (other[e43] * self[e1]) + (other[e12] * self[e423]) + (other[e4125] * self[e423])
                    - (other[e41] * self[e435])
                    - (other[e41] * self[e3])
                    - (other[e23] * self[e412])
                    - (other[e4235] * self[e412]),
                (other[e41] * self[e425]) + (other[e41] * self[e2]) + (other[e23] * self[e431]) + (other[e4235] * self[e431])
                    - (other[e42] * self[e415])
                    - (other[e42] * self[e1])
                    - (other[e31] * self[e423])
                    - (other[e4315] * self[e423]),
            ]) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e321]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group5()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e31] * self[e125]) + (other[e4125] * self[e315]) - (other[e12] * self[e315]) - (other[e4315] * self[e125]),
                (other[e12] * self[e235]) + (other[e4235] * self[e125]) - (other[e23] * self[e125]) - (other[e4125] * self[e235]),
                (other[e23] * self[e315]) + (other[e4315] * self[e235]) - (other[e31] * self[e235]) - (other[e4235] * self[e315]),
            ]) + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group5())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    + (other[e415] * self[e321])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e412] * self[e315])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235])
                    - (other[e435] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e125] * self[e431]),
                (other[e12345] * self[e2])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    + (other[e425] * self[e321])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e423] * self[e125])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315])
                    - (other[e415] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e235] * self[e412]),
                (other[e12345] * self[e3])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    + (other[e415] * self[e2])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e431] * self[e235])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125])
                    - (other[e425] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e315] * self[e423]),
                (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    + (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    - (other[e5] * self[e12345])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]])),
            // e1234
            (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e415])
                + (other[e423] * self[e1])
                + (other[e431] * self[e425])
                + (other[e431] * self[e2])
                + (other[e412] * self[e435])
                + (other[e412] * self[e3])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321]),
        );
    }
}
impl GeometricProduct<Plane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       48       64        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4315] * self[e412]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(self[e4]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) - (other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) - (other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) - (other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                -(other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       55       71        0
    //  no simd       64       80        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1] * self[e4]) + (other[e2] * self[e412]) - (other[e3] * self[e431]) - (other[e4] * self[e1]),
                (other[e2] * self[e4]) + (other[e3] * self[e423]) - (other[e1] * self[e412]) - (other[e4] * self[e2]),
                (other[e1] * self[e431]) + (other[e3] * self[e4]) - (other[e2] * self[e423]) - (other[e4] * self[e3]),
                (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]),
            ]) - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3] * self[e2]) - (other[e1] * self[e321]) - (other[e2] * self[e3]) - (other[e5] * self[e423]),
                (other[e1] * self[e3]) - (other[e2] * self[e321]) - (other[e3] * self[e1]) - (other[e5] * self[e431]),
                (other[e2] * self[e1]) - (other[e1] * self[e2]) - (other[e3] * self[e321]) - (other[e5] * self[e412]),
                (other[e5] * self[e4]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(other[e4]) * self.group2()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]) - (other[e4] * self[e12345]) - (other[e4] * self[e321]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e2] * self[e435]) - (other[e3] * self[e425]) - (other[e4] * self[e235]),
                (other[e2] * self[e12345]) + (other[e3] * self[e415]) - (other[e1] * self[e435]) - (other[e4] * self[e315]),
                (other[e1] * self[e425]) + (other[e3] * self[e12345]) - (other[e2] * self[e415]) - (other[e4] * self[e125]),
                (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e321]])),
        );
    }
}
impl GeometricProduct<Scalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       49       65        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4315] * self[e412]) + (other[e1234] * self[e1]) - (other[e4125] * self[e431]),
                (other[e4125] * self[e423]) + (other[e1234] * self[e2]) - (other[e4235] * self[e412]),
                (other[e4235] * self[e431]) + (other[e1234] * self[e3]) - (other[e4315] * self[e423]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                + (Simd32x4::from(self[e4]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) + (other[e1234] * self[e235]) - (other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                (other[e4235] * self[e3]) + (other[e1234] * self[e315]) - (other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                (other[e4315] * self[e1]) + (other[e1234] * self[e125]) - (other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e4235] * self[e125]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e4315] * self[e235]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                (other[e4235] * self[e235]) + (other[e4315] * self[e315]) + (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e12345]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]) - (other[e1234] * self[e235]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]) - (other[e1234] * self[e315]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]) - (other[e1234] * self[e125]),
                (other[e1234] * self[e12345]) + (other[e1234] * self[e321]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      192      208        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      204      220        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e412] * self[e2]) + (other[e1] * self[e4])
                    - (other[e431] * self[e435])
                    - (other[e431] * self[e3])
                    - (other[e12345] * self[e423])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431])
                    - (other[e4] * self[e1]),
                (other[e423] * self[e435]) + (other[e423] * self[e3]) + (other[e2] * self[e4])
                    - (other[e412] * self[e415])
                    - (other[e412] * self[e1])
                    - (other[e12345] * self[e431])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412])
                    - (other[e4] * self[e2]),
                (other[e431] * self[e415]) + (other[e431] * self[e1]) + (other[e3] * self[e4])
                    - (other[e423] * self[e425])
                    - (other[e423] * self[e2])
                    - (other[e12345] * self[e412])
                    - (other[e415] * self[e431])
                    - (other[e2] * self[e423])
                    - (other[e4] * self[e3]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e1] * self[e1])
                    + (other[e2] * self[e2])
                    + (other[e3] * self[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]]))
                - (Simd32x4::from(self[e12345]) * other.group0())
                - (Simd32x4::from(self[e321]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e321]]))
                - (Simd32x4::from(self[e4]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e125] * self[e431]) + (other[e3] * self[e2])
                    - (other[e431] * self[e125])
                    - (other[e12345] * self[e415])
                    - (other[e415] * self[e12345])
                    - (other[e425] * self[e435])
                    - (other[e321] * self[e1])
                    - (other[e235] * self[e4])
                    - (other[e315] * self[e412])
                    - (other[e5] * self[e423])
                    - (other[e1] * self[e321])
                    - (other[e2] * self[e3])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e235] * self[e412]) + (other[e1] * self[e3])
                    - (other[e412] * self[e235])
                    - (other[e12345] * self[e425])
                    - (other[e425] * self[e12345])
                    - (other[e435] * self[e415])
                    - (other[e321] * self[e2])
                    - (other[e315] * self[e4])
                    - (other[e125] * self[e423])
                    - (other[e5] * self[e431])
                    - (other[e2] * self[e321])
                    - (other[e3] * self[e1])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e315] * self[e423]) + (other[e2] * self[e1])
                    - (other[e423] * self[e315])
                    - (other[e12345] * self[e435])
                    - (other[e415] * self[e425])
                    - (other[e435] * self[e12345])
                    - (other[e321] * self[e3])
                    - (other[e235] * self[e431])
                    - (other[e125] * self[e4])
                    - (other[e5] * self[e412])
                    - (other[e1] * self[e2])
                    - (other[e3] * self[e321])
                    - (other[e4] * self[e125]),
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e12345] * self[e321])
                    + (other[e321] * self[e12345])
                    + (other[e5] * self[e4])
                    - (other[e415] * self[e1])
                    - (other[e425] * self[e2])
                    - (other[e435] * self[e3])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412])
                    - (other[e1] * self[e415])
                    - (other[e2] * self[e425])
                    - (other[e3] * self[e435]),
            ]) - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e4]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) + (other[e3] * self[e315])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) + (other[e1] * self[e125])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) + (other[e2] * self[e235])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e5] * self[e435])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                (other[e423] * self[e415])
                    + (other[e423] * self[e1])
                    + (other[e431] * self[e425])
                    + (other[e431] * self[e2])
                    + (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412])
                    - (other[e4] * self[e321]),
            ]) - (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e235], self[e315], self[e125], self[e4]]))
                - (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e4]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e12345] * self[e1])
                    + (other[e425] * self[e3])
                    + (other[e321] * self[e415])
                    + (other[e235] * self[e4])
                    + (other[e315] * self[e412])
                    + (other[e5] * self[e423])
                    + (other[e1] * self[e12345])
                    + (other[e2] * self[e435])
                    - (other[e431] * self[e125])
                    - (other[e435] * self[e2])
                    - (other[e125] * self[e431])
                    - (other[e3] * self[e425])
                    - (other[e4] * self[e235]),
                (other[e423] * self[e125])
                    + (other[e12345] * self[e2])
                    + (other[e435] * self[e1])
                    + (other[e321] * self[e425])
                    + (other[e315] * self[e4])
                    + (other[e125] * self[e423])
                    + (other[e5] * self[e431])
                    + (other[e2] * self[e12345])
                    + (other[e3] * self[e415])
                    - (other[e412] * self[e235])
                    - (other[e415] * self[e3])
                    - (other[e235] * self[e412])
                    - (other[e1] * self[e435])
                    - (other[e4] * self[e315]),
                (other[e431] * self[e235])
                    + (other[e12345] * self[e3])
                    + (other[e415] * self[e2])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e125] * self[e4])
                    + (other[e5] * self[e412])
                    + (other[e1] * self[e425])
                    + (other[e3] * self[e12345])
                    - (other[e423] * self[e315])
                    - (other[e425] * self[e1])
                    - (other[e315] * self[e423])
                    - (other[e2] * self[e415])
                    - (other[e4] * self[e125]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e235] * self[e415])
                    + (other[e315] * self[e425])
                    + (other[e125] * self[e435])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125])
                    - (other[e321] * self[e5])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e3])
                    - (other[e5] * self[e12345]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      168        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      174      190        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e12345] * other[e41])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e1] * other[e1234])
                    + (self[e3] * other[e42])
                    + (self[e4] * other[e4235])
                    - (self[e431] * other[e12])
                    - (self[e431] * other[e4125])
                    - (self[e425] * other[e43])
                    - (self[e2] * other[e43]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e12345] * other[e42])
                    + (self[e415] * other[e43])
                    + (self[e321] * other[e42])
                    + (self[e1] * other[e43])
                    + (self[e2] * other[e1234])
                    + (self[e4] * other[e4315])
                    - (self[e412] * other[e23])
                    - (self[e412] * other[e4235])
                    - (self[e435] * other[e41])
                    - (self[e3] * other[e41]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e12345] * other[e43])
                    + (self[e425] * other[e41])
                    + (self[e321] * other[e43])
                    + (self[e2] * other[e41])
                    + (self[e3] * other[e1234])
                    + (self[e4] * other[e4125])
                    - (self[e423] * other[e31])
                    - (self[e423] * other[e4315])
                    - (self[e415] * other[e42])
                    - (self[e1] * other[e42]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(other[scalar]) * self.group0())
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e415], self[e425], self[e435], self[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25])
                    + (self[e12345] * other[e23])
                    + (self[e435] * other[e31])
                    + (self[e235] * other[e1234])
                    + (self[e125] * other[e42])
                    + (self[e5] * other[e41])
                    + (self[e2] * other[e4125])
                    + (self[e4] * other[e15])
                    - (self[e431] * other[e35])
                    - (self[e425] * other[e12])
                    - (self[e321] * other[e4235])
                    - (self[e315] * other[e43])
                    - (self[e3] * other[e4315]),
                (self[e423] * other[e35])
                    + (self[e12345] * other[e31])
                    + (self[e415] * other[e12])
                    + (self[e235] * other[e43])
                    + (self[e315] * other[e1234])
                    + (self[e5] * other[e42])
                    + (self[e3] * other[e4235])
                    + (self[e4] * other[e25])
                    - (self[e412] * other[e15])
                    - (self[e435] * other[e23])
                    - (self[e321] * other[e4315])
                    - (self[e125] * other[e41])
                    - (self[e1] * other[e4125]),
                (self[e431] * other[e15])
                    + (self[e12345] * other[e12])
                    + (self[e425] * other[e23])
                    + (self[e315] * other[e41])
                    + (self[e125] * other[e1234])
                    + (self[e5] * other[e43])
                    + (self[e1] * other[e4315])
                    + (self[e4] * other[e35])
                    - (self[e423] * other[e25])
                    - (self[e415] * other[e31])
                    - (self[e321] * other[e4125])
                    - (self[e235] * other[e42])
                    - (self[e2] * other[e4235]),
                (self[e415] * other[e4235])
                    + (self[e425] * other[e4315])
                    + (self[e435] * other[e4125])
                    + (self[e235] * other[e41])
                    + (self[e315] * other[e42])
                    + (self[e125] * other[e43])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e5] * other[e1234])
                    - (self[e1] * other[e23])
                    - (self[e2] * other[e31])
                    - (self[e3] * other[e12]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e423], self[e431], self[e412], self[e4]]))
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]) + (self[e2] * other[e35]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]) + (self[e3] * other[e15]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]) + (self[e1] * other[e25]),
                (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from(self[e12345]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e3215]]))
                + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (Simd32x4::from(self[e5]) * Simd32x4::from([other[e23], other[e31], other[e12], other[scalar]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e31]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e5]) * Simd32x4::from([other[e4235], other[e4315], other[e4125], other[e45]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[e321], self[e435], self[e2], self[e415]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e3215]) * Simd32x4::from([self[e1], self[e2], self[e3], self[e321]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e315] * other[e43]) + (self[e3] * other[e31])
                    - (self[e431] * other[e35])
                    - (self[e12345] * other[e4235])
                    - (self[e415] * other[e45])
                    - (self[e435] * other[e4315])
                    - (self[e235] * other[e1234])
                    - (self[e125] * other[e42])
                    - (self[e5] * other[e41])
                    - (self[e2] * other[e12]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e125] * other[e41]) + (self[e1] * other[e12])
                    - (self[e412] * other[e15])
                    - (self[e12345] * other[e4315])
                    - (self[e415] * other[e4125])
                    - (self[e425] * other[e45])
                    - (self[e235] * other[e43])
                    - (self[e315] * other[e1234])
                    - (self[e5] * other[e42])
                    - (self[e3] * other[e23]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e235] * other[e42]) + (self[e2] * other[e23])
                    - (self[e423] * other[e25])
                    - (self[e12345] * other[e4125])
                    - (self[e425] * other[e4235])
                    - (self[e435] * other[e45])
                    - (self[e315] * other[e41])
                    - (self[e125] * other[e1234])
                    - (self[e5] * other[e43])
                    - (self[e1] * other[e31]),
                (self[e12345] * other[e1234])
                    - (self[e423] * other[e23])
                    - (self[e423] * other[e4235])
                    - (self[e431] * other[e31])
                    - (self[e431] * other[e4315])
                    - (self[e412] * other[e12])
                    - (self[e412] * other[e4125])
                    - (self[e415] * other[e41])
                    - (self[e425] * other[e42])
                    - (self[e435] * other[e43])
                    - (self[e1] * other[e41])
                    - (self[e2] * other[e42])
                    - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(self[e321]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                + (Simd32x4::from(self[e4]) * Simd32x4::from([other[e15], other[e25], other[e35], other[e45]]))
                + (Simd32x4::from(other[scalar]) * self.group3()),
        );
    }
}
impl std::ops::Div<geometric_product> for VersorOdd {
    type Output = geometric_product_partial<VersorOdd>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      140        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      133      149        0
    //  no simd      160      176        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[scalar] * self[e41])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[scalar] * self[e42])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[scalar] * self[e43])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[scalar]])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      180        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      179      195        0
    //  no simd      224      240        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e4] * self[e4235])
                    - (other[e1] * self[e1234]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e4] * self[e4315])
                    - (other[e2] * self[e1234]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e4] * self[e4125])
                    - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e4] * self[e15])
                    + (other[e3] * self[e4315])
                    + (other[e5] * self[e41])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e4] * self[e25])
                    + (other[e1] * self[e4125])
                    + (other[e5] * self[e42])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e4] * self[e35])
                    + (other[e2] * self[e4235])
                    + (other[e5] * self[e43])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e4] * self[e3215])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25])
                    + (other[e435] * self[e4315])
                    + (other[e321] * self[e23])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e4] * self[e15])
                    - (other[e3] * self[e31]),
                (other[e423] * self[e35])
                    + (other[e415] * self[e4125])
                    + (other[e321] * self[e31])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e4] * self[e25])
                    - (other[e1] * self[e12]),
                (other[e431] * self[e15])
                    + (other[e425] * self[e4235])
                    + (other[e321] * self[e12])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e1] * self[e31])
                    + (other[e5] * self[e43])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e4] * self[e35])
                    - (other[e2] * self[e23]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e4]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       18        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       24        0
    //  no simd       16       39        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[scalar] * self[e41],
                other[scalar] * self[e42],
                other[scalar] * self[e43],
                (other[e3215] * self[e1234]) + (other[scalar] * self[scalar]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3215] * self[e41], other[e3215] * self[e42], other[e3215] * self[e43], (other[e3215] * self[e1234]) * -1.0])
                + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                    + (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                    + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3()))
                .extend_to_4(other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e3215] * self[e41]) * -1.0,
                (other[e3215] * self[e42]) * -1.0,
                (other[e3215] * self[e43]) * -1.0,
                (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       53        0
    //    simd3        2        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       48       75        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e321] * self[e41],
                other[e321] * self[e42],
                other[e321] * self[e43],
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e125] * self[e42]) - (other[e321] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) - (other[e235] * self[e43]) - (other[e321] * self[e4315]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) - (other[e315] * self[e41]) - (other[e321] * self[e4125]),
                (other[e321] * self[scalar]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e315] * self[scalar]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[scalar]) + (other[e125] * self[e45])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e315] * self[e43]) - (other[e125] * self[e42]),
                    (other[e125] * self[e41]) - (other[e235] * self[e43]),
                    (other[e235] * self[e42]) - (other[e315] * self[e41]),
                ]) + (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                    + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      108        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       97      113        0
    //  no simd      112      128        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e3] * self[e4315]) + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e321] * self[e4235])
                    - (other[e1] * self[e45])
                    - (other[e2] * self[e4125]),
                (other[e125] * self[e41]) + (other[e1] * self[e4125]) + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e321] * self[e4315])
                    - (other[e2] * self[e45])
                    - (other[e3] * self[e4235]),
                (other[e235] * self[e42]) + (other[e2] * self[e4235]) + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e321] * self[e4125])
                    - (other[e1] * self[e4315])
                    - (other[e3] * self[e45]),
                (other[e321] * self[scalar])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e5]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e321] * self[e23])
                    + (other[e1] * self[scalar])
                    + (other[e2] * self[e12])
                    + (other[e5] * self[e41])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31]),
                (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e321] * self[e31])
                    + (other[e2] * self[scalar])
                    + (other[e3] * self[e23])
                    + (other[e5] * self[e42])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12]),
                (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e321] * self[e12])
                    + (other[e1] * self[e31])
                    + (other[e3] * self[scalar])
                    + (other[e5] * self[e43])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]) - (other[e321] * self[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e15] * self[e42]) + (other[e35] * self[e1234])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       94      110        0
    //  no simd      112      128        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) - (other[e12] * self[e42]),
                (other[e12] * self[e41]) - (other[e23] * self[e43]),
                (other[e23] * self[e42]) - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e3215] * self[e41])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e3215] * self[e42])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e3215] * self[e43])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e35] * self[e42])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e3215] * self[e41]),
                (other[e12] * self[e4235]) + (other[e15] * self[e43])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e3215] * self[e42]),
                (other[e23] * self[e4315]) + (other[e25] * self[e41])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       39       55        0
    //  no simd       48       64        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e1234]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      136        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      126      142        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e431] * self[e35]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215]) + (other[e412] * self[e15]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e412] * self[e3215]) + (other[e415] * self[e31]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      140        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      133      149        0
    //  no simd      160      176        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41])
                    - (other[e435] * self[e42]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42])
                    - (other[e415] * self[e43]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43])
                    - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * Simd32x4::from([other[e423], other[e431], other[e412], other[e12345]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(other[e321]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e425] * self[e12])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    + (other[e12345] * self[e23])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e435] * self[e23])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    + (other[e12345] * self[e31])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    + (other[e12345] * self[e12])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e12345] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e12345] * self[e4235]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e12345] * self[e4315]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41])
                    - (other[e12345] * self[e4125]),
                (other[e423] * self[e4235]) + (other[e431] * self[e4315]) + (other[e412] * self[e4125])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[e1234]) * other.group2()),
        );
    }
}
impl GeometricProduct<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      140        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      129      145        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[scalar]) + (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43])
                    - (other[e12] * self[e42]),
                (other[e41] * self[e4125]) + (other[e42] * self[scalar]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41])
                    - (other[e23] * self[e43]),
                (other[e41] * self[e31]) + (other[e42] * self[e4235]) + (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234])
                    - (other[e31] * self[e41]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      196        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      191      207        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[scalar])
                    + (other[e42] * self[e12])
                    + (other[e43] * self[e4315])
                    + (other[e31] * self[e43])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125])
                    + (other[e42] * self[scalar])
                    + (other[e43] * self[e23])
                    + (other[e12] * self[e41])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31])
                    + (other[e42] * self[e4235])
                    + (other[e43] * self[scalar])
                    + (other[e23] * self[e42])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
        );
    }
}
impl GeometricProduct<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       17        0
    //  no simd       16       36        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e12345] * self[e41],
                other[e12345] * self[e42],
                other[e12345] * self[e43],
                (other[e5] * self[e1234]) + (other[e12345] * self[scalar]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], (other[e12345] * self[e45]) * -1.0])
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]]))
                + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e1, e2, e3, e4
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())).extend_to_4(other[e12345]),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       50        0
    //    simd3        3        3        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       39       55        0
    //  no simd       48       67        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e45] * self[e41],
                other[e45] * self[e42],
                other[e45] * self[e43],
                (other[e45] * self[e45]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) - (other[e35] * self[e42]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) - (other[e15] * self[e43]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) - (other[e25] * self[e41]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([1.0, 1.0, 1.0, self[e1234]])
                * (Simd32x3::from([
                    (other[e25] * self[e12]) + (other[e25] * self[e4125]) - (other[e35] * self[e31]) - (other[e35] * self[e4315]),
                    (other[e35] * self[e23]) + (other[e35] * self[e4235]) - (other[e15] * self[e12]) - (other[e15] * self[e4125]),
                    (other[e15] * self[e31]) + (other[e15] * self[e4315]) - (other[e25] * self[e23]) - (other[e25] * self[e4235]),
                ]) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                    + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                    - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3()))
                .extend_to_4(other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) - (other[e15] * self[e1234]) - (other[e25] * self[e43]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) - (other[e25] * self[e1234]) - (other[e35] * self[e41]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) - (other[e15] * self[e42]) - (other[e35] * self[e1234]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      112        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      100      116        0
    //  no simd      112      128        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(self[e1234]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[scalar]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e45] * self[e15])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e45] * self[e25])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e45] * self[e35])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4315] * self[e12])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]) + (other[e4125] * self[e23])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]) + (other[e4235] * self[e31])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e425] * self[e1234]) + (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) + (other[e435] * self[e1234]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      100        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       91      107        0
    //  no simd      112      128        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e425] * self[e43]) - (other[e435] * self[e42]),
                (other[e435] * self[e41]) - (other[e415] * self[e43]),
                (other[e415] * self[e42]) - (other[e425] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e425] * self[e12]) + (other[e12345] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e435] * self[e31])
                    - (other[e125] * self[e42]),
                (other[e425] * self[scalar]) + (other[e435] * self[e23]) + (other[e12345] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e415] * self[e12])
                    - (other[e235] * self[e43]),
                (other[e415] * self[e31]) + (other[e435] * self[scalar]) + (other[e12345] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e425] * self[e23])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])
                    - (other[e12345] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e12345] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e435] * self[e15])
                    + (other[e12345] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e415] * self[e25])
                    + (other[e12345] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e45]) * other.group1())
                + (Simd32x4::from(self[e3215]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e315] * self[e43]) + (other[e5] * self[e41])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e12345] * self[e4235])
                    - (other[e125] * self[e42]),
                (other[e415] * self[e4125]) + (other[e125] * self[e41]) + (other[e5] * self[e42])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e12345] * self[e4315])
                    - (other[e235] * self[e43]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e5] * self[e43])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e12345] * self[e4125])
                    - (other[e315] * self[e41]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      270      302        0
    //    simd2       12       12        0
    //    simd3       42       42        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      339      371        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(self[scalar]) * other.group0())
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e412] * self[e25]) + (other[e315] * self[e43])
                    - (other[e12345] * self[e4235])
                    - (other[e3] * self[e31])
                    - (other[e415] * self[e45])
                    - (other[e425] * self[e4125])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e125] * self[e42]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e423] * self[e35]) + (other[e125] * self[e41])
                    - (other[e12345] * self[e4315])
                    - (other[e1] * self[e12])
                    - (other[e425] * self[e45])
                    - (other[e435] * self[e4235])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e235] * self[e43]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e431] * self[e15]) + (other[e235] * self[e42])
                    - (other[e12345] * self[e4125])
                    - (other[e2] * self[e23])
                    - (other[e415] * self[e4315])
                    - (other[e435] * self[e45])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e315] * self[e41]),
                (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    + (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e321] * self[e3215])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e31] * self[e35])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e12] * self[e15])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215]),
                (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e23] * self[e25])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4125] * self[e3215]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]]))
                + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e1234]]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]])),
            // e41, e42, e43
            Simd32x3::from([
                (other[e31] * self[e43]) + (other[e4315] * self[e43]) - (other[e12] * self[e42]) - (other[e4125] * self[e42]),
                (other[e12] * self[e41]) + (other[e4125] * self[e41]) - (other[e23] * self[e43]) - (other[e4235] * self[e43]),
                (other[e23] * self[e42]) + (other[e4235] * self[e42]) - (other[e31] * self[e41]) - (other[e4315] * self[e41]),
            ]) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group5())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3()),
            // e23, e31, e12
            Simd32x3::from([
                (other[e25] * self[e43]) + (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[e4315] * self[e4125])
                    - (other[e35] * self[e42])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e4125] * self[e4315]),
                (other[e35] * self[e41]) + (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[e4125] * self[e4235])
                    - (other[e15] * self[e43])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e4235] * self[e4125]),
                (other[e15] * self[e42]) + (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[e4235] * self[e4315])
                    - (other[e25] * self[e41])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e4315] * self[e4235]),
            ]) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e12345] * self[e23])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    + (other[e425] * self[e12])
                    + (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e235] * self[e1234])
                    + (other[e315] * self[e43])
                    - (other[e2] * self[e4125])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e412] * self[e25])
                    - (other[e125] * self[e42]),
                (other[e12345] * self[e31])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    + (other[e435] * self[e23])
                    + (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e315] * self[e1234])
                    + (other[e125] * self[e41])
                    - (other[e3] * self[e4235])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e423] * self[e35])
                    - (other[e235] * self[e43]),
                (other[e12345] * self[e12])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    + (other[e415] * self[e31])
                    + (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e235] * self[e42])
                    + (other[e125] * self[e1234])
                    - (other[e1] * self[e4315])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e431] * self[e15])
                    - (other[e315] * self[e41]),
                (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    + (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]]))
                + (Simd32x4::from(self[scalar]) * other.group6())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e423, e431, e412
            Simd32x3::from([
                (other[e3] * self[e42]) + (other[e425] * self[e43]),
                (other[e1] * self[e43]) + (other[e435] * self[e41]),
                (other[e2] * self[e41]) + (other[e415] * self[e42]),
            ]) + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()),
            // e235, e315, e125
            Simd32x3::from([
                (other[e2] * self[e35]) + (other[e425] * self[e35]) + (other[e315] * self[e12]) + (other[e315] * self[e4125])
                    - (other[e3] * self[e25])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e3] * self[e15]) + (other[e435] * self[e15]) + (other[e125] * self[e23]) + (other[e125] * self[e4235])
                    - (other[e1] * self[e35])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125]),
                (other[e1] * self[e25]) + (other[e415] * self[e25]) + (other[e235] * self[e31]) + (other[e235] * self[e4315])
                    - (other[e2] * self[e15])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235]),
            ]) + (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group2().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42])
                    + (other[e45] * self[e23])
                    + (other[e41] * self[e3215])
                    + (other[e42] * self[e35])
                    + (other[e31] * self[e4125])
                    + (other[e4315] * self[e12])
                    + (other[e1234] * self[e15])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e15] * self[e43])
                    + (other[e45] * self[e31])
                    + (other[e42] * self[e3215])
                    + (other[e43] * self[e15])
                    + (other[e12] * self[e4235])
                    + (other[e4125] * self[e23])
                    + (other[e1234] * self[e25])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e25] * self[e41])
                    + (other[e45] * self[e12])
                    + (other[e41] * self[e25])
                    + (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e4235] * self[e31])
                    + (other[e1234] * self[e35])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125])
                    - (other[e45] * self[e3215])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from(self[scalar]) * other.group9())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]])),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
    }
}
impl GeometricProduct<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       48       64        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]) - (other[e4235] * self[e3215]) - (other[e4315] * self[e35]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]) - (other[e4315] * self[e3215]) - (other[e4125] * self[e15]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]) - (other[e4235] * self[e25]) - (other[e4125] * self[e3215]),
                -(other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4315] * self[e12]) - (other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                (other[e4125] * self[e23]) - (other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                (other[e4235] * self[e31]) - (other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       46       62        0
    //  no simd       64       80        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) - (other[e1] * self[e1234]) - (other[e2] * self[e43]) - (other[e4] * self[e4235]),
                (other[e1] * self[e43]) - (other[e2] * self[e1234]) - (other[e3] * self[e41]) - (other[e4] * self[e4315]),
                (other[e2] * self[e41]) - (other[e1] * self[e42]) - (other[e3] * self[e1234]) - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                -(other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e1234]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e2] * self[e35]) - (other[e3] * self[e25]),
                (other[e2] * self[e3215]) + (other[e3] * self[e15]) - (other[e1] * self[e35]),
                (other[e1] * self[e25]) + (other[e3] * self[e3215]) - (other[e2] * self[e15]),
                -(other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e23], self[e31], self[e12], self[scalar]]))
                + (Simd32x4::from(other[e5]) * Simd32x4::from([self[e4235], self[e4315], self[e4125], self[e45]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                (other[e1] * self[e41]) + (other[e2] * self[e42]) + (other[e3] * self[e43]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                - (Simd32x4::from(other[e4]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e45]])),
        );
    }
}
impl GeometricProduct<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       52       68        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e4315] * self[e43]) - (other[e4125] * self[e42]) - (other[e1234] * self[e4235]),
                (other[e4125] * self[e41]) - (other[e4235] * self[e43]) - (other[e1234] * self[e4315]),
                (other[e4235] * self[e42]) - (other[e4315] * self[e41]) - (other[e1234] * self[e4125]),
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[e1234]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) - (other[e4125] * self[e4315]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) - (other[e4235] * self[e4125]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]) - (other[e4315] * self[e4235]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]) - (other[e4235] * self[e3215]) - (other[e4315] * self[e35]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]) - (other[e4315] * self[e3215]) - (other[e4125] * self[e15]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]) - (other[e4235] * self[e25]) - (other[e4125] * self[e3215]),
                (other[e1234] * self[scalar]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]) - (other[e1234] * self[e45]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4315] * self[e12]) + (other[e1234] * self[e15]) - (other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                (other[e4125] * self[e23]) + (other[e1234] * self[e25]) - (other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                (other[e4235] * self[e31]) + (other[e1234] * self[e35]) - (other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      164      180        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      183      199        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e12345] * self[e41]) + (other[e425] * self[e43]) + (other[e3] * self[e42])
                    - (other[e1] * self[e1234])
                    - (other[e4] * self[e4235]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e12345] * self[e42]) + (other[e435] * self[e41]) + (other[e1] * self[e43])
                    - (other[e2] * self[e1234])
                    - (other[e4] * self[e4315]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e12345] * self[e43]) + (other[e415] * self[e42]) + (other[e2] * self[e41])
                    - (other[e3] * self[e1234])
                    - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(other[e4]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e5]]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * Simd32x4::from([other[e435], other[e321], other[e1], other[e315]]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e3215])
                    + (other[e431] * self[e35])
                    + (other[e12345] * self[e23])
                    + (other[e425] * self[e12])
                    + (other[e315] * self[e43])
                    + (other[e5] * self[e41])
                    + (other[e3] * self[e4315])
                    + (other[e4] * self[e15])
                    - (other[e412] * self[e25])
                    - (other[e435] * self[e31])
                    - (other[e321] * self[e4235])
                    - (other[e125] * self[e42])
                    - (other[e2] * self[e4125]),
                (other[e431] * self[e3215])
                    + (other[e412] * self[e15])
                    + (other[e12345] * self[e31])
                    + (other[e435] * self[e23])
                    + (other[e125] * self[e41])
                    + (other[e5] * self[e42])
                    + (other[e1] * self[e4125])
                    + (other[e4] * self[e25])
                    - (other[e423] * self[e35])
                    - (other[e415] * self[e12])
                    - (other[e321] * self[e4315])
                    - (other[e235] * self[e43])
                    - (other[e3] * self[e4235]),
                (other[e423] * self[e25])
                    + (other[e412] * self[e3215])
                    + (other[e12345] * self[e12])
                    + (other[e415] * self[e31])
                    + (other[e235] * self[e42])
                    + (other[e5] * self[e43])
                    + (other[e2] * self[e4235])
                    + (other[e4] * self[e35])
                    - (other[e431] * self[e15])
                    - (other[e425] * self[e23])
                    - (other[e321] * self[e4125])
                    - (other[e315] * self[e41])
                    - (other[e1] * self[e4315]),
                (other[e423] * self[e15])
                    + (other[e431] * self[e25])
                    + (other[e412] * self[e35])
                    + (other[e415] * self[e4235])
                    + (other[e425] * self[e4315])
                    + (other[e435] * self[e4125])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e1] * self[e23])
                    - (other[e2] * self[e31])
                    - (other[e3] * self[e12])
                    - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e1234]) * other.group2())
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e1], other[e2], other[e3], other[e12345]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    - (other[e435] * self[e25])
                    - (other[e125] * self[e31])
                    - (other[e125] * self[e4315])
                    - (other[e3] * self[e25]),
                (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    - (other[e415] * self[e35])
                    - (other[e235] * self[e12])
                    - (other[e235] * self[e4125])
                    - (other[e1] * self[e35]),
                (other[e415] * self[e25])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    - (other[e425] * self[e15])
                    - (other[e315] * self[e23])
                    - (other[e315] * self[e4235])
                    - (other[e2] * self[e15]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e12345]) * Simd32x4::from([self[e15], self[e25], self[e35], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group2())
                + (Simd32x4::from(self[e45]) * other.group2())
                + (Simd32x4::from(self[e3215]) * other.group1()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e435] * self[e4315]) + (other[e321] * self[e23]) + (other[e315] * self[e43]) + (other[e5] * self[e41]) + (other[e2] * self[e12])
                    - (other[e423] * self[e3215])
                    - (other[e431] * self[e35])
                    - (other[e12345] * self[e4235])
                    - (other[e425] * self[e4125])
                    - (other[e125] * self[e42])
                    - (other[e3] * self[e31])
                    - (other[e4] * self[e15]),
                (other[e423] * self[e35]) + (other[e415] * self[e4125]) + (other[e321] * self[e31]) + (other[e125] * self[e41]) + (other[e5] * self[e42]) + (other[e3] * self[e23])
                    - (other[e431] * self[e3215])
                    - (other[e412] * self[e15])
                    - (other[e12345] * self[e4315])
                    - (other[e435] * self[e4235])
                    - (other[e235] * self[e43])
                    - (other[e1] * self[e12])
                    - (other[e4] * self[e25]),
                (other[e431] * self[e15]) + (other[e425] * self[e4235]) + (other[e321] * self[e12]) + (other[e235] * self[e42]) + (other[e5] * self[e43]) + (other[e1] * self[e31])
                    - (other[e423] * self[e25])
                    - (other[e412] * self[e3215])
                    - (other[e12345] * self[e4125])
                    - (other[e415] * self[e4315])
                    - (other[e315] * self[e41])
                    - (other[e2] * self[e23])
                    - (other[e4] * self[e35]),
                (other[e423] * self[e4235])
                    + (other[e431] * self[e4315])
                    + (other[e412] * self[e4125])
                    + (other[e1] * self[e41])
                    + (other[e2] * self[e42])
                    + (other[e3] * self[e43])
                    - (other[e423] * self[e23])
                    - (other[e431] * self[e31])
                    - (other[e412] * self[e12])
                    - (other[e415] * self[e41])
                    - (other[e425] * self[e42])
                    - (other[e435] * self[e43])
                    - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e235], other[e315], other[e125], other[e12345]]))
                - (Simd32x4::from(self[e45]) * Simd32x4::from([other[e415], other[e425], other[e435], other[e4]])),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      196        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      195      211        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12])
                    + (other[e43] * self[e4315])
                    + (other[scalar] * self[e41])
                    + (other[e31] * self[e43])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e4235])
                    - (other[e4125] * self[e42]),
                (other[e41] * self[e4125])
                    + (other[e43] * self[e23])
                    + (other[scalar] * self[e42])
                    + (other[e12] * self[e41])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41])
                    - (other[e23] * self[e43])
                    - (other[e1234] * self[e4315])
                    - (other[e4235] * self[e43]),
                (other[e41] * self[e31])
                    + (other[e42] * self[e4235])
                    + (other[scalar] * self[e43])
                    + (other[e23] * self[e42])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234])
                    - (other[e31] * self[e41])
                    - (other[e1234] * self[e4125])
                    - (other[e4315] * self[e41]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * Simd32x4::from([self[e41], self[e42], self[e43], self[e45]]))
                + (Simd32x4::from(other[e1234]) * Simd32x4::from([self[e23], self[e31], self[e12], self[e3215]]))
                + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from(self[e1234]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e45], self[e12], self[e4315], self[e15]]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e31])
                    - (other[e35] * self[e42])
                    - (other[e4125] * self[e4315]),
                (other[e43] * self[e15])
                    + (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e12])
                    - (other[e15] * self[e43])
                    - (other[e4235] * self[e4125]),
                (other[e41] * self[e25])
                    + (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e23])
                    - (other[e25] * self[e41])
                    - (other[e4315] * self[e4235]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43])
                    - (other[e41] * self[e15])
                    - (other[e42] * self[e25])
                    - (other[e43] * self[e35])
                    - (other[e23] * self[e4235])
                    - (other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from(self[e3215]) * Simd32x4::from([other[e41], other[e42], other[e43], other[e1234]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e12] * self[e25])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e31])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e23] * self[e35])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e12])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e31] * self[e15])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e23])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                    - (other[e41] * self[e23])
                    - (other[e42] * self[e31])
                    - (other[e43] * self[e12])
                    - (other[e23] * self[e41])
                    - (other[e31] * self[e42])
                    - (other[e12] * self[e43])
                    - (other[e1234] * self[e45])
                    - (other[e4235] * self[e41])
                    - (other[e4315] * self[e42])
                    - (other[e4125] * self[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2())
                + (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[scalar] * self[e4235])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[e1234] * self[e15])
                    + (other[e4315] * self[e12])
                    - (other[e43] * self[e25])
                    - (other[e12] * self[e4315])
                    - (other[e15] * self[e1234])
                    - (other[e25] * self[e43])
                    - (other[e4125] * self[e31])
                    - (other[e3215] * self[e41]),
                (other[e43] * self[e15])
                    + (other[scalar] * self[e4315])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[e1234] * self[e25])
                    + (other[e4125] * self[e23])
                    - (other[e41] * self[e35])
                    - (other[e23] * self[e4125])
                    - (other[e25] * self[e1234])
                    - (other[e35] * self[e41])
                    - (other[e4235] * self[e12])
                    - (other[e3215] * self[e42]),
                (other[e41] * self[e25])
                    + (other[scalar] * self[e4125])
                    + (other[e23] * self[e4315])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e31])
                    - (other[e42] * self[e15])
                    - (other[e31] * self[e4235])
                    - (other[e15] * self[e42])
                    - (other[e35] * self[e1234])
                    - (other[e4315] * self[e23])
                    - (other[e3215] * self[e43]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35])
                    - (other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other[e23], other[e31], other[e12], other[e3215]]))
                + (Simd32x4::from(self[e3215]) * other.group0()),
        );
    }
}
