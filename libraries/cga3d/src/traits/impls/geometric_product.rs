// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
impl InfixGeometricProduct for AntiScalar {}
impl GeometricProduct<AntiScalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e12345] * other[e12345] * -1.0));
    }
}
impl GeometricProduct<Circle> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12345] * other.group2()[0] * -1.0),
                (self[e12345] * other.group2()[1] * -1.0),
                (self[e12345] * other.group2()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<Dipole> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       23        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self[e12345] * other.group0()[0]), (self[e12345] * other.group0()[1]), (self[e12345] * other.group0()[2]), 0.0]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricProduct<DualNum> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[0] * -1.0)]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        5        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl GeometricProduct<Flector> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       12        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other.group1()[0] * -1.0),
                (self[e12345] * other.group1()[1] * -1.0),
                (self[e12345] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Line> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<Motor> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12345] * other.group1()[0] * -1.0),
                (self[e12345] * other.group1()[1] * -1.0),
                (self[e12345] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group1()[3] * -1.0)]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e35]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self[e12345] * other.group8()[3]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group5()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group6() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345])
                * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self[e12345] * other.group1()[3] * -1.0),
            // e12, e31, e23
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<Plane> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e5
            (self[e12345] * other.group0()[3]),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self[e12345] * other.group0()[3] * -1.0),
        );
    }
}
impl GeometricProduct<Scalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
    }
}
impl GeometricProduct<Sphere> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self[e12345] * other.group0()[3]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl InfixGeometricProduct for Circle {}
impl GeometricProduct<AntiScalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<Circle> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       57       73        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) - (self.group2()[0] * other.group1()[3]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group1()[2]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group1()[0]) - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       58        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       55       71        0
    //  no simd       94      110        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       90        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      134      150        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group2()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group3()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       23        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl GeometricProduct<FlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       26       40        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       37       53        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group2()[0] * other.group1()[0]),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Line> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Motor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       60        0
    //  no simd       64       84        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 0, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      154        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       14       14        0
    // Totals...
    // yes simd      177      205        0
    //  no simd      288      320        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    ((self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    (-(self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group4()[1]) + (self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    ((self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35]) - (self.group2()[0] * other.group4()[2]) + (self.group1()[2] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0])
                        + (self.group2()[0] * other.group4()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group1()[0] * other.group4()[0])
                        - (self.group0()[2] * other.group10()[0])
                        - (self.group0()[2] * other.group8()[2])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            (-(self.group2()[2] * other.group10()[0]) + (self.group2()[2] * other.group8()[2]) - (self.group2()[1] * other.group10()[1]) + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                - (swizzle!(self.group1(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group5()[1]) + (self.group2()[1] * other.group5()[2]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group5()[0]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group5()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    (-(self.group2()[2] * other.group5()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group5()[0])
                        + (self.group2()[0] * other.group5()[1])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[2] * other.group6()[2]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * other.group6()) - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[0] * other[e35])
                        - (self.group1()[3] * other.group8()[0])
                        - (self.group1()[1] * other.group10()[0])
                        + (self.group0()[2] * other.group3()[1])),
                    (-(self.group2()[2] * other.group4()[0]) + (self.group2()[1] * other[e35]) + (self.group2()[0] * other.group4()[2])
                        - (self.group1()[3] * other.group8()[1])
                        - (self.group1()[2] * other.group10()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0])
                        - (self.group2()[0] * other.group4()[1])
                        - (self.group1()[3] * other.group8()[2])
                        - (self.group1()[0] * other.group10()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    ((self.group2()[2] * other.group4()[2])
                        + (self.group2()[1] * other.group4()[1])
                        + (self.group2()[0] * other.group4()[0])
                        + (self.group1()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * other.group4()) + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1]) + (self.group2()[1] * other.group6()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group6()[2])
                        - (self.group1()[2] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group6()[0]) + (self.group2()[0] * other.group6()[1])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[2] * other.group1()[2])
                        + (self.group2()[1] * other.group5()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group7()[0])
                        + (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group2(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group7()[0], other[e1], other[e1]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group5()[0]) + (self.group1()[0] * other.group5()[1])),
                    ((self.group1()[2] * other.group5()[0]) - (self.group1()[0] * other.group5()[2])),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       28       43        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[0] * other.group0()[0])])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other[e2]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other[e2])),
                    (-(self.group1()[2] * other[e2]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       38       50        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other[e4315]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e4315]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e4315]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[0] * other.group0()[0])])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    (-(self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       81       97        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                + (swizzle!(other.group2(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])
                        - (self.group2()[0] * other.group3()[3])
                        - (self.group1()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        - (self.group2()[1] * other.group3()[3])
                        - (self.group2()[0] * other.group0()[2])
                        - (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group3()[3]) - (self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[1])
                        - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group3()[2])
                        + (self.group2()[1] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       87      103        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[0] * other.group3()[3])),
                    ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl InfixGeometricProduct for CircleRotor {}
impl GeometricProduct<AntiScalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[e12345] * -1.0),
                (self.group2()[1] * other[e12345] * -1.0),
                (self.group2()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<Circle> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group2()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       57        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       57       73        0
    //  no simd      105      121        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group2()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       70        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       64       80        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group2(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))
                - (swizzle!(self.group2(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[3] * other.group2()[2]) + (self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       73        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       80       96        0
    //  no simd      149      165        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group2()[3] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) - (self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 2, 1, 2) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]))
                + (swizzle!(self.group2(), 1, 0, 0, 1) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (self.group1()[2] * other.group2()[1]),
                    (self.group1()[0] * other.group2()[2]),
                    (self.group1()[1] * other.group2()[0]),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       20        0
    //  no simd        7       26        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group1()[3] * other.group0()[0]) - (self.group2()[3] * other.group0()[0])),
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       30       44        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       39       56        0
    //  no simd       72       89        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group2()[0] * other.group1()[0]),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
        );
    }
}
impl GeometricProduct<Line> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       62        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       50       66        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                (-(self.group2()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Motor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       52        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       62        0
    //  no simd       75       92        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 0, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      130        0
    //    simd2        1        1        0
    //    simd3       38       40        0
    //    simd4       25       25        0
    // Totals...
    // yes simd      168      196        0
    //  no simd      320      352        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group2()[3] * other.group0()[1])
                        + (self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    ((self.group2()[3] * other.group0()[0])
                        - (self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group8(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group4()[1]) - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[1] * other[e35]) - (self.group2()[0] * other.group4()[2]) + (self.group1()[2] * other.group8()[0]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0]) + (self.group1()[0] * other.group8()[1]) + (self.group0()[2] * other.group8()[3])
                        - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group1()[0] * other.group4()[0])
                        - (self.group0()[2] * other.group10()[0])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            ((self.group2()[3] * other.group8()[3]) - (self.group2()[2] * other.group10()[0]) + (self.group2()[2] * other.group8()[2]) - (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group5(), 2, 0, 1, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                - (swizzle!(self.group1(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group7()[0])
                        - (self.group2()[2] * other.group5()[1])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group7()[2])),
                    (-(self.group2()[3] * other.group7()[1])
                        - (self.group2()[1] * other.group5()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    (-(self.group2()[3] * other.group7()[2])
                        - (self.group2()[2] * other.group5()[3])
                        - (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group2()[3]) * other.group6())
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group3()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group8()[0]) - (self.group1()[1] * other.group10()[0]) + (self.group0()[2] * other.group3()[1])),
                    (-(self.group1()[3] * other.group8()[1]) - (self.group1()[2] * other.group10()[2]) + (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group8()[2]) - (self.group1()[0] * other.group10()[1]) + (self.group0()[1] * other.group3()[0])),
                    ((self.group1()[0] * other.group8()[0]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group2()[3]) * other.group4())
                + (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group5()[2]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other[e1]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[2]]))
                + (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group7()[1]) + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[0] * other.group6()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[1] * other.group6()[0]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other[e1]) - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group7()[0])
                        + (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group2()[3] * other.group1()[3]) - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group7()[0], other[e1], other[e1]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group5()[0]) + (self.group1()[0] * other.group5()[1])),
                    ((self.group1()[2] * other.group5()[0]) - (self.group1()[0] * other.group5()[2])),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       32       48        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 2) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]))])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        2        3        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       40       59        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (self.group1() * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[1] * other.group0()[2]),
                    (self.group2()[2] * other.group0()[0]),
                    (self.group2()[0] * other.group0()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]))),
        );
    }
}
impl GeometricProduct<Scalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e12345
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       22       34        0
    //  no simd       43       55        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other[e4315]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e4315]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e4315]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 2) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]))])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    (-(self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group2()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       82       98        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group2()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                + (swizzle!(other.group2(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[0] * other.group3()[1]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0]) + (self.group2()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       82       98        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) - (self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[0] * other.group3()[3])),
                    ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl InfixGeometricProduct for Dipole {}
impl GeometricProduct<AntiScalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[e12345])),
        );
    }
}
impl GeometricProduct<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       74        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       67       83        0
    //  no simd       94      110        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[3] * other.group2()[0]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[3] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[3] * other.group2()[2]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       90        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      134      150        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group3()[1]) - (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       21        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       35        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       25       43        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       46       62        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group1()[0]) - (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      112        0
    //    simd2        9       11        0
    //    simd3       36       40        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      156      180        0
    //  no simd      288      322        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0]) - (self.group2()[0] * other.group6()[2]) + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[1] * other.group6()[0]) + (self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group5()[3]) + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group1()[0] * other.group6()[0]) - (self.group0()[2] * other.group5()[2]) - (self.group0()[1] * other.group5()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group10()[1]) + (self.group2()[1] * other.group8()[2]) + (self.group1()[0] * other.group8()[3])),
                    ((self.group2()[2] * other.group8()[0]) + (self.group2()[0] * other.group10()[0]) + (self.group1()[1] * other.group8()[3])),
                    ((self.group2()[1] * other.group10()[2]) + (self.group2()[0] * other.group8()[1]) + (self.group1()[2] * other.group8()[3])),
                    (-(self.group1()[1] * other.group8()[1]) - (self.group1()[0] * other.group8()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * other.group4()) + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group6()[1]) - (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[2] * other.group5()[1])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[2] * other.group6()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group5()[2])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[1] * other.group6()[0]) - (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group5()[0])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[2] * other.group6()[2]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[3]) * other.group6()) + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group5()[1], other.group5()[3], other.group5()[3]]))
                + (swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[1], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 0, 0, 1) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group5()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[0] * other[e35]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group4()[0])
                        + (self.group2()[1] * other[e35])
                        + (self.group2()[0] * other.group4()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group10()[0]) - (self.group2()[1] * other.group10()[1]) + (self.group2()[1] * other.group8()[1])
                        - (self.group2()[0] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other[e35], other[e35], other.group4()[1]]))
                + (swizzle!(self.group2(), 1, 0, 0) * Simd32x3::from([other.group4()[0], other.group4()[2], other[e35]]))
                - (swizzle!(self.group2(), 0, 2, 1) * swizzle!(other.group4(), 1, 0, 2))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group8()[3], other.group3()[2], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group3()[0], other.group8()[3], other.group8()[3]]))),
        );
    }
}
impl GeometricProduct<Plane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       25       40        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       20       35        0
    //  no simd       35       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       33        0
    //    simd3        2        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       25       38        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    ((self.group2()[2] * other[e4315]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       84      100        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * other.group2())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group1()[2]) + (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       92        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       93      109        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group3()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[1] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group3()[1]) - (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixGeometricProduct for DipoleInversion {}
impl GeometricProduct<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       23        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345]), 0.0]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricProduct<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       86        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       86      102        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 3, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[2])
                        - (self.group1()[1] * other.group1()[2])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) + (self.group2()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) + (self.group2()[3] * other.group2()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[3] * other.group0()[2]) + (self.group2()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       85        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      149      165        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[0] * other.group2()[3]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[1] * other.group2()[3]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       86        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       86      102        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[1] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[1])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[2] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group1()[2] * other.group2()[1])),
                    (-(self.group3()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[2])
                        - (self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       85        0
    //    simd4       35       35        0
    // Totals...
    // yes simd      104      120        0
    //  no simd      209      225        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[3])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 1, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       19        0
    //  no simd       15       34        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group2()[3] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0]) * self.group1() * Simd32x4::from(other.group0()[1]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group1()[2] * other.group0()[0]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       43        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       30       48        0
    //  no simd       45       63        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    0.0,
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       65        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       62       79        0
    //  no simd      104      121        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group3()[2] * other.group1()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])
                        + (self.group2()[2] * other.group1()[2])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                ((self.group2()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1]) - (self.group1()[3] * other.group0()[1])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       56        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       57       72        0
    //  no simd      105      120        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group0()[0]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group3()[0] * other.group1()[2])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    0.0,
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      148        0
    //    simd2       11       11        0
    //    simd3       52       54        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      222      250        0
    //  no simd      448      480        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group3()[2] * other.group8()[2]) - (self.group3()[1] * other.group8()[1]) - (self.group3()[0] * other.group8()[0])
                        + (self.group1()[3] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group6()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group3()[3] * other.group6()[1]) - (self.group3()[1] * other.group0()[1]) + (self.group2()[2] * other.group6()[0])
                        - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group3()[3] * other.group6()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group3()[1] * other.group6()[1]) + (self.group3()[0] * other.group6()[0])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[1] * other.group5()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            ((self.group3()[3] * other.group5()[3]) + (self.group3()[3] * other.group0()[1])
                - (self.group3()[2] * other.group7()[2])
                - (self.group3()[1] * other.group7()[1])
                - (self.group3()[0] * other.group7()[0])
                - (self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                - (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group8()[3]]))
                - (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[2]]))
                - (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group8()[3])
                        + (self.group2()[2] * other.group10()[1])
                        + (self.group2()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group8()[3])),
                    ((self.group3()[1] * other.group8()[3])
                        + (self.group2()[2] * other.group8()[0])
                        + (self.group2()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group8()[3])
                        + (self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[2] * other.group8()[3])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 3) * Simd32x4::from([other.group5()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group5()[3]) - (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group1()[2] * other.group5()[0]) + (self.group1()[1] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group5()[1]) + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group5()[1]) + (self.group2()[2] * other.group1()[1])
                        - (self.group2()[1] * other.group5()[2])
                        - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group5()[0]) - (self.group2()[2] * other.group1()[0])
                        + (self.group2()[0] * other.group5()[2])
                        + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group5()[0]) + (self.group2()[1] * other.group1()[0])
                        - (self.group2()[0] * other.group5()[1])
                        - (self.group2()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group10()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group10()[2]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[1] * other.group10()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group3()[2] * other.group4()[2])
                + (self.group3()[1] * other.group4()[1])
                + (self.group3()[0] * other.group4()[0])
                + (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group8()[3], other.group3()[2], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group3()[0], other.group8()[3], other.group8()[3]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group8()[0]) - (self.group3()[0] * other.group8()[1])),
                    (-(self.group3()[2] * other.group8()[0]) + (self.group3()[0] * other.group8()[2])),
                    ((self.group3()[2] * other.group8()[1]) - (self.group3()[1] * other.group8()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       37        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       44       61        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group3()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       39        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       32       48        0
    //  no simd       59       75        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other[e2]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2]) + (self.group0()[0] * other[e2])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group3()[0] * other.group0()[1]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       31        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       29       43        0
    //  no simd       59       79        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group0())
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       40       40        0
    // Totals...
    // yes simd      104      120        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(self.group2(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group3()[3])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group3(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 1) * Simd32x4::from([other.group1()[2], other.group3()[1], other.group3()[2], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group2()[3])
                        + (self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4       38       38        0
    // Totals...
    // yes simd      110      126        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[3])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 1, 1, 3) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixGeometricProduct for DualNum {}
impl GeometricProduct<AntiScalar> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e12345] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e12345] * -1.0)]),
        );
    }
}
impl GeometricProduct<Circle> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       27        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricProduct<CircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       23        0
    //  no simd        7       29        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       25        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       22        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       15       30        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]))]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<Flector> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        4       16        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Line> for DualNum {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        3       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (-(Simd32x3::from(self.group0()[0]) * other.group0()) - (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricProduct<Motor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3]))]),
        );
    }
}
impl GeometricProduct<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       36        0
    //    simd3        3        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       46        0
    //  no simd       32       68        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other[e35]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group8()[1])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group0()[1] * other.group8()[2])),
                (self.group0()[1] * other[e35]),
            ]),
            // e5
            ((self.group0()[1] * other.group8()[3]) + (self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group7()[0]) - (self.group0()[0] * other.group5()[0])),
                    (-(self.group0()[1] * other.group7()[1]) - (self.group0()[0] * other.group5()[1])),
                    (-(self.group0()[1] * other.group7()[2]) - (self.group0()[0] * other.group5()[2])),
                    (self.group0()[1] * other.group5()[3]),
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group6() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group10()[2])),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group10()[1])),
                ((self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group10()[0])),
                (-(self.group0()[0] * other[e35]) - (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group0()[0]) * swizzle!(other.group10(), 2, 1, 0))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group0()[1]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[0]),
                    (self.group0()[1] * other.group1()[1]),
                    (self.group0()[1] * other.group1()[2]),
                    (-(self.group0()[1] * other[e1]) - (self.group0()[0] * other.group5()[3])),
                ])),
            // e1234
            (self.group0()[1] * other.group1()[3] * -1.0),
            // e12, e31, e23
            (-(Simd32x3::from(self.group0()[0]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))),
        );
    }
}
impl GeometricProduct<Plane> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricProduct<Scalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl GeometricProduct<Sphere> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricProduct<VersorEven> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       28        0
    //  no simd       16       40        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[0]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[0]) * other.group0())
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[0]),
                    (self.group0()[1] * other.group3()[1]),
                    (self.group0()[1] * other.group3()[2]),
                    (-(self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[3])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       16       32        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
    }
}
impl InfixGeometricProduct for FlatPoint {}
impl GeometricProduct<AntiScalar> for FlatPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        5        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl GeometricProduct<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       38        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       25       46        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       32       47        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       35        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       25       43        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group2()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       44        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       32       49        0
    //  no simd       47       64        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group3()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group3()[1]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[3] * other.group3()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group1()[1]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<FlatPoint> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<Flector> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Line> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       18        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Motor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       12       24        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd2        3        5        0
    //    simd3        6       11        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       52       76        0
    //  no simd      100      142        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group5()[0]) - (self.group0()[2] * other.group6()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group6()[2])),
                (-(self.group0()[3] * other.group5()[1]) + (self.group0()[2] * other.group6()[0])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group5()[2]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[0])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            ((self.group0()[3] * other[e1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[1] * other.group8()[2]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[2] * other.group8()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[0] * other.group10()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2]) + (self.group0()[0] * other.group8()[1])),
                    0.0,
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[0], other.group6()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group6()[1]]))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group6() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group5()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group5()[2])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group5()[0]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group5()[2])),
                    ((self.group0()[1] * other.group5()[0]) + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group5()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other[e35], other.group8()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[0], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group10()[1]) + (self.group0()[0] * other.group8()[0]) - (self.group0()[0] * other.group10()[2])),
                ])),
            // e1234
            (self.group0()[3] * other[e35] * -1.0),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))),
        );
    }
}
impl GeometricProduct<Plane> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricProduct<Scalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl GeometricProduct<Sphere> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       30       48        0
    //  no simd       48       72        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[0], other.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group0()[2])
                    - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricProduct<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       44        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       33       50        0
    //  no simd       51       68        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group1()[1]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl InfixGeometricProduct for Flector {}
impl GeometricProduct<AntiScalar> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       12        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other[e12345] * -1.0),
                (self.group1()[1] * other[e12345] * -1.0),
                (self.group1()[2] * other[e12345] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[1]) - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group1()[0]) - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       55        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       45       64        0
    //  no simd       72       91        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) * -1.0),
                    ((self.group1()[1] * other.group1()[3]) * -1.0),
                    ((self.group1()[2] * other.group1()[3]) * -1.0),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       46       62        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[3]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[0] * other.group2()[1]) + (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       56        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       60       72        0
    //  no simd      108      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[0] * other.group3()[0]) + (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[1] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[3] * other.group3()[1])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[2] * other.group1()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        4       16        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e235, e315, e125, e5
            ((self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]))
                + (self.group1() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1] * -1.0),
                (self.group1()[1] * other.group0()[1] * -1.0),
                (self.group1()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group1()[1])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group1()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       32        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       28       36        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       99        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      117      146        0
    //  no simd      224      257        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group8()[2]) - (self.group1()[1] * other.group8()[1]) - (self.group1()[0] * other.group8()[0])
                        + (self.group0()[3] * other.group3()[3])),
                    ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group6()[0])
                        - (self.group1()[2] * other.group5()[1])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group6()[1])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group6()[2])),
                    (-(self.group1()[3] * other.group6()[1]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group5()[2])
                        + (self.group0()[2] * other.group6()[0])
                        - (self.group0()[0] * other.group6()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[3] * other.group6()[2])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group5()[0])
                        - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group6()[1])
                        - (self.group0()[1] * other.group6()[0])),
                    ((self.group1()[1] * other.group6()[1]) + (self.group1()[0] * other.group6()[0])),
                ])),
            // e5
            ((self.group1()[3] * other.group5()[3]) + (self.group1()[3] * other.group0()[1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                - (self.group1()[0] * other.group7()[0])
                + (self.group0()[3] * other[e1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group8()[3])
                        + (self.group0()[2] * other.group10()[1])
                        + (self.group0()[1] * other.group8()[2])
                        + (self.group0()[0] * other.group0()[0])),
                    ((self.group1()[1] * other.group8()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[2] * other.group8()[0])
                        + (self.group0()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group10()[0])),
                    ((self.group1()[2] * other.group8()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group10()[2])
                        + (self.group0()[0] * other.group8()[1])),
                    ((self.group1()[0] * other.group10()[2]) * -1.0),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group4(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[0], other.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group5()[3]) - (self.group0()[1] * other.group6()[2])),
                    (-(self.group1()[0] * other.group1()[2]) - (self.group0()[2] * other.group6()[0])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group6()[1])),
                    ((self.group1()[0] * other.group5()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group6(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group5()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group5()[2])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group5()[0]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group5()[2])),
                    ((self.group0()[1] * other.group5()[0]) + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group5()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other[e35], other.group8()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[0], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group10()[1]) + (self.group1()[0] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group10()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group10()[2])),
                    (-(self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group10()[1])
                        + (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e1234
            ((self.group1()[2] * other.group4()[2]) + (self.group1()[1] * other.group4()[1]) - (self.group0()[3] * other[e35]) + (self.group1()[0] * other.group4()[0])),
            // e12, e31, e23
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group8()[0]) - (self.group1()[0] * other.group8()[1])),
                    (-(self.group1()[2] * other.group8()[0]) + (self.group1()[0] * other.group8()[2])),
                    ((self.group1()[2] * other.group8()[1]) - (self.group1()[1] * other.group8()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricProduct<Scalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[3] * other[e4315]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       59        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       58       77        0
    //  no simd      112      131        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) * -1.0),
                    ((self.group1()[1] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[0] * other.group3()[2]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[1] * other.group3()[0]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group0()[1])
                        - (self.group0()[0] * other.group3()[3])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[2])
                        - (self.group0()[1] * other.group3()[3])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[2] * other.group3()[3])
                        - (self.group0()[1] * other.group0()[0])),
                    (self.group1()[0] * other.group0()[0]),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       63        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       62       80        0
    //  no simd      113      131        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 0, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    (-(self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0]) + (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[1] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * other.group0()) - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl InfixGeometricProduct for Line {}
impl GeometricProduct<AntiScalar> for Line {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       12        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<Circle> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[0] * other.group1()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       62        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       50       66        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[3])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       56       72        0
    //  no simd       74       90        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group2()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group3()[0])
                    - (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<DualNum> for Line {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        3       12        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (-(self.group0() * Simd32x3::from(other.group0()[0])) - (self.group1() * Simd32x3::from(other.group0()[1]))),
        );
    }
}
impl GeometricProduct<FlatPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        8       22        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       24        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Line> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      117        0
    //    simd3       17       21        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      117      141        0
    //  no simd      160      192        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[2] * other.group6()[2])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])),
                (-(self.group1()[2] * other.group4()[2])
                    - (self.group1()[1] * other.group4()[1])
                    - (self.group1()[0] * other.group4()[0])
                    - (self.group0()[2] * other.group10()[0])
                    - (self.group0()[0] * other.group10()[2])
                    - (self.group0()[1] * other.group10()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group4()[1]) + (self.group1()[1] * other.group4()[2])
                    - (self.group1()[0] * other[e35])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group8()[2])),
                ((self.group1()[2] * other.group4()[0]) - (self.group1()[1] * other[e35]) - (self.group1()[0] * other.group4()[2]) + (self.group0()[2] * other.group8()[0])
                    - (self.group0()[0] * other.group8()[2])
                    - (self.group0()[1] * other.group3()[3])),
                (-(self.group1()[2] * other[e35]) - (self.group1()[1] * other.group4()[0]) + (self.group1()[0] * other.group4()[1]) - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[0] * other.group8()[1])
                    - (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group10()[0]) + (self.group1()[2] * other.group8()[2]) - (self.group1()[1] * other.group10()[1]) + (self.group1()[1] * other.group8()[1])
                - (self.group1()[0] * other.group10()[2])
                + (self.group1()[0] * other.group8()[0])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group5()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])
                        + (self.group0()[1] * other.group7()[2])),
                    ((self.group1()[2] * other.group5()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group5()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group5()[2])
                        + (self.group0()[2] * other.group7()[0])
                        - (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    (-(self.group1()[2] * other.group5()[3]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other[e1])
                        + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    ((self.group1()[2] * other.group6()[2]) + (self.group1()[1] * other.group6()[1]) + (self.group1()[0] * other.group6()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group6(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group4()[1]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[0] * other[e35])
                    + (self.group0()[2] * other.group10()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group10()[0])),
                (-(self.group1()[2] * other.group4()[0]) + (self.group1()[1] * other[e35]) + (self.group1()[0] * other.group4()[2]) - (self.group0()[2] * other.group10()[2])
                    + (self.group0()[0] * other.group10()[0])
                    + (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other[e35]) + (self.group1()[1] * other.group4()[0]) - (self.group1()[0] * other.group4()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group10()[1])
                    + (self.group0()[1] * other.group10()[2])),
                ((self.group1()[2] * other.group4()[2])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])),
            ]),
            // e423, e431, e412
            ((swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other[e35], other[e35], other.group4()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group8()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group8()[3], other.group8()[3], other.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group6()[1]) + (self.group1()[1] * other.group6()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group6()[2])
                        - (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group6()[0]) + (self.group1()[0] * other.group6()[1])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group1()[1] * other.group5()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group6()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group1(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group1(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group5()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group5()[1], other.group5()[0], other.group5()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group5()[0], other.group0()[1], other.group0()[1]]))),
        );
    }
}
impl GeometricProduct<Plane> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       13       25        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       16       36        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       16       34        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self.group0()[0] * other[e4315]), (self.group0()[1] * other[e4315]), (self.group0()[2] * other[e4315]), 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other[e4315]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other[e4315]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other[e4315]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       80       96        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group2()[2])),
                ((self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group2()[3])),
                (-(self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])),
                    (-(self.group1()[2] * other.group3()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[1] * other.group3()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       80       96        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group2()[3]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl InfixGeometricProduct for Motor {}
impl GeometricProduct<AntiScalar> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other[e12345] * -1.0),
                (self.group1()[1] * other[e12345] * -1.0),
                (self.group1()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[e12345] * -1.0)]),
        );
    }
}
impl GeometricProduct<Circle> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       55        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       62        0
    //  no simd       64       83        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group1()[2]) - (self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       55        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       48       64        0
    //  no simd       75       91        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0])),
                    (self.group1()[0] * other.group0()[0]),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       42       54        0
    //  no simd      108      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group3()[1])])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 2, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]))
                + (swizzle!(self.group1(), 1, 0, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group0()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])),
                    0.0,
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       16        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[3] * other.group0()[0]) - (self.group1()[3] * other.group0()[1]))]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       12       24        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (-(self.group1() * Simd32x4::from(other.group0()[3])) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Line> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       83        0
    //    simd3       22       24        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      106      133        0
    //  no simd      225      259        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group6()[2])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[0] * other.group6()[0])
                    - (self.group0()[3] * other.group0()[1])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])),
                ((self.group1()[3] * other[e35]) - (self.group1()[2] * other.group4()[2]) - (self.group1()[1] * other.group4()[1]) - (self.group1()[0] * other.group4()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group10()[0])
                    - (self.group0()[0] * other.group10()[2])
                    - (self.group0()[1] * other.group10()[1])),
            ]),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group4()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group3()[3], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[0], other.group4()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e35]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group4()[0]) - (self.group1()[2] * other.group4()[1]) + (self.group1()[1] * other.group4()[2]) - (self.group1()[0] * other[e35])),
                    (-(self.group1()[3] * other.group4()[1]) + (self.group1()[2] * other.group4()[0]) - (self.group1()[1] * other[e35]) - (self.group1()[0] * other.group4()[2])),
                    (-(self.group1()[3] * other.group4()[2]) - (self.group1()[2] * other[e35]) - (self.group1()[1] * other.group4()[0]) + (self.group1()[0] * other.group4()[1])),
                    0.0,
                ])),
            // e5
            (-(self.group1()[3] * other.group3()[3]) + (self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group10()[0]) + (self.group1()[2] * other.group8()[2])
                - (self.group1()[1] * other.group10()[1])
                + (self.group1()[1] * other.group8()[1])
                - (self.group1()[0] * other.group10()[2])
                + (self.group1()[0] * other.group8()[0])
                + (self.group0()[3] * other.group8()[3])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])),
                    (-(self.group1()[1] * other.group5()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group5()[2])
                        - (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    (-(self.group1()[2] * other.group5()[3])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group5()[0])
                        - (self.group0()[2] * other[e1])
                        - (self.group0()[1] * other.group7()[0])),
                    (self.group1()[0] * other.group6()[0]),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group3()[1]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group0()[2] * other.group3()[0]) + (self.group0()[0] * other.group3()[2])),
                    (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group5()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group7()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group7()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other[e1]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) * -1.0),
                    ((self.group1()[0] * other.group6()[2]) * -1.0),
                    ((self.group1()[1] * other.group6()[0]) * -1.0),
                    ((self.group1()[1] * other.group5()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group6()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group1()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group0()[0] * other.group5()[1]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[2] * other.group5()[0]) - (self.group0()[0] * other.group5()[2])),
                    (-(self.group0()[2] * other.group5()[1]) + (self.group0()[1] * other.group5()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       24       52        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group1(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricProduct<Scalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group1()[3] * other[e4315]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       58       80        0
    //  no simd      112      134        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[3]) * other.group0())
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group3()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(other.group3() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group2()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       41       53        0
    //  no simd      113      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[0] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[1] * other.group3()[0])),
                    0.0,
                ])),
        );
    }
}
impl InfixGeometricProduct for MultiVector {}
impl GeometricProduct<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (swizzle!(self.group0(), 1, 0) * Simd32x2::from(other[e12345]) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e35]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group8()[3] * other[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group5()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other[e12345] * -1.0),
            // e12, e31, e23
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricProduct<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      134        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      162      190        0
    //  no simd      288      320        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[0] * other.group1()[0])
                        + (self.group5()[1] * other.group1()[1])),
                    (-(self.group10()[2] * other.group1()[0])
                        - (self.group10()[1] * other.group1()[1])
                        - (self.group10()[0] * other.group1()[2])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group3()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) + (self[e35] * other.group2()[0]) - (self.group8()[3] * other.group0()[0]) + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        + (self.group3()[1] * other.group0()[2])
                        - (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3]) + (self[e35] * other.group2()[1]) - (self.group8()[3] * other.group0()[1]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[0] * other.group0()[2])
                        + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group1()[3]) + (self[e35] * other.group2()[2]) - (self.group8()[3] * other.group0()[2]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[0] * other.group1()[0])
                        - (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2]) + (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group1()[0], self.group6()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group5()[1], self.group6()[0]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group5()[0], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    ((self.group5()[3] * other.group2()[0]) + (self.group5()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group5()[3] * other.group2()[1]) + (self.group5()[2] * other.group2()[0]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group5()[3] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group1()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        - (self.group3()[1] * other.group0()[2])),
                    (-(self.group10()[0] * other.group1()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[1] * other.group1()[3]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])),
                    (-(self.group10()[2] * other.group1()[1]) + (self[e35] * other.group2()[2]) - (self.group8()[2] * other.group1()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group4()[2] * other.group2()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group2(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(self.group3()[3]) * other.group2())
                + (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group7()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[1])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group1()[3] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[2]) + (self.group5()[1] * other.group2()[1]) + (self.group5()[0] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group1()[0])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                + (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1)) + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group0(), 1, 0, 2))
                - (swizzle!(self.group6(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group2(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      128        0
    //    simd2        1        1        0
    //    simd3       36       38        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      166      194        0
    //  no simd      320      352        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[1] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[3])
                        + (self.group5()[0] * other.group1()[0])),
                    (-(self.group10()[2] * other.group1()[0])
                        - (self.group10()[1] * other.group1()[1])
                        - (self.group10()[0] * other.group1()[2])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e35]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group8()[3] * other.group0()[0]) - (self.group8()[0] * other.group2()[3])
                        + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        + (self.group3()[1] * other.group0()[2])
                        - (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3])
                        - (self.group8()[3] * other.group0()[1])
                        - (self.group8()[1] * other.group2()[3])
                        - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[0] * other.group0()[2])
                        + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group1()[3]) - (self.group8()[3] * other.group0()[2]) - (self.group8()[2] * other.group2()[3])
                        + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[0] * other.group1()[0])
                        - (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2])
                + (self.group8()[3] * other.group2()[3])
                + (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * other.group2())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[0]]))
                - (swizzle!(other.group2(), 0, 0, 2, 0) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group5()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group5()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group2()[3]) - (self.group10()[1] * other.group1()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[0] * other.group1()[3])
                        + (self.group4()[2] * other.group2()[1])),
                    ((self.group10()[1] * other.group2()[3]) - (self.group10()[0] * other.group1()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[1] * other.group1()[3])
                        + (self.group4()[0] * other.group2()[2])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group10()[0] * other.group2()[3]) + (self[e35] * other.group2()[2]) - (self.group8()[2] * other.group1()[3])
                        + (self.group4()[1] * other.group2()[0])),
                    (-(self.group4()[1] * other.group2()[1]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]))
                - (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group2()[1]) - (self.group8()[1] * other.group2()[2]) + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group1()[2])),
                    (-(self.group8()[2] * other.group2()[0]) + (self.group8()[0] * other.group2()[2]) - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group1()[2])),
                    ((self.group8()[1] * other.group2()[0]) - (self.group8()[0] * other.group2()[1]) + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[2]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self[e1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group7()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group5()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group5()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group1()[0])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                - (self.group1()[3] * other.group2()[3])
                + (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1)) + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group0(), 1, 0, 2))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      136        0
    //    simd2        9       11        0
    //    simd3       36       40        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      174      198        0
    //  no simd      288      322        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            ((other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[0] * other.group1()[0])
                        - (self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
            // e5
            (-(self.group7()[2] * other.group1()[2])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[0] * other.group2()[0])
                + (self.group1()[1] * other.group2()[1])),
            // e15, e25, e35, e45
            ((other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group8()[1]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group8()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group2()[2])
                        + (self.group10()[0] * other.group2()[1])
                        + (self.group8()[2] * other.group2()[1])
                        + (self.group3()[3] * other.group2()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[0])),
                    ((self.group10()[2] * other.group2()[2]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[0] * other.group2()[2])
                        + (self.group3()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[1] * other.group2()[0])
                        + (self.group8()[1] * other.group2()[0])
                        + (self.group3()[3] * other.group2()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group4()[2] * other.group2()[2]) + (self.group4()[1] * other.group2()[1]) + (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group5()[2] * other.group1()[1])
                        + (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group5()[0] * other.group1()[2])
                        + (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[1] * other.group1()[0])
                        + (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group7(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group2())
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group2(), 0, 0, 2) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group0()[1]]))
                + (swizzle!(other.group2(), 2, 1, 1) * Simd32x3::from([self.group1()[1], self.group0()[1], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self[e35] * other.group2()[0]) + (self.group8()[3] * other.group0()[0]) + (self.group8()[2] * other.group1()[1])
                        - (self.group4()[2] * other.group2()[1])
                        + (self.group4()[1] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3]) - (self[e35] * other.group2()[1])
                        + (self.group8()[3] * other.group0()[1])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group10()[0] * other.group1()[3]) - (self[e35] * other.group2()[2]) + (self.group8()[3] * other.group0()[2]) + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[1] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group2()[0])
                        - (self.group10()[1] * other.group2()[1])
                        - (self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group3()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group2(), 2, 1, 0))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                - (swizzle!(self.group4(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                + (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))),
        );
    }
}
impl GeometricProduct<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      158        0
    //    simd2       11       11        0
    //    simd3       54       56        0
    //    simd4       33       33        0
    // Totals...
    // yes simd      230      258        0
    //  no simd      448      480        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group3()[2]) - (self.group8()[1] * other.group3()[1]) - (self.group8()[0] * other.group3()[0])
                        + (self.group3()[3] * other.group1()[3])),
                    (-(self.group5()[3] * other.group1()[3])
                        + (self.group1()[2] * other.group3()[2])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[3]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2])
                        - (self.group7()[0] * other.group2()[3])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group6()[0] * other.group3()[3])
                        + (self.group5()[1] * other.group3()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0])
                        - (self.group7()[1] * other.group2()[3])
                        - (self.group7()[0] * other.group0()[2])
                        - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[1] * other.group3()[3])
                        + (self.group5()[2] * other.group3()[0])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[2] * other.group2()[3]) - (self.group7()[1] * other.group0()[0])
                        + (self.group7()[0] * other.group0()[1])
                        + (self.group6()[2] * other.group3()[3])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[0] * other.group3()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[1] * other.group3()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e5
            ((self.group7()[2] * other.group3()[2]) - (self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group3()[1]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[1] * other.group2()[1])
                + (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group2()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                + (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group2()[2])
                        + (self.group8()[0] * other.group3()[3])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group3()[1] * other.group3()[2])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[1] * other.group3()[3])
                        + (self.group3()[2] * other.group3()[0])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group3()[3])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[1] * other.group1()[1])
                        - (self.group8()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2])
                        + (self.group7()[0] * other.group2()[3])
                        + (self.group6()[2] * other.group2()[1])
                        - (self.group5()[3] * other.group3()[0])
                        + (self[e1] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0])
                        + (self.group7()[1] * other.group2()[3])
                        + (self.group7()[0] * other.group0()[2])
                        + (self.group6()[0] * other.group2()[2])
                        - (self.group5()[3] * other.group3()[1])
                        + (self[e1] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[2] * other.group2()[3]) + (self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1])
                        + (self.group6()[1] * other.group2()[0])
                        - (self.group5()[3] * other.group3()[2])
                        + (self[e1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self[e1] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group7(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]))
                + (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group5()[2] * other.group2()[0]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[3] * other.group0()[0])
                        + (self.group8()[2] * other.group1()[1])
                        + (self.group4()[1] * other.group2()[2])
                        - (self.group4()[0] * other.group3()[3])
                        + (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[3] * other.group0()[1])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[1] * other.group3()[3])
                        + (self.group3()[0] * other.group0()[2])),
                    (-(self.group10()[2] * other.group3()[1])
                        + (self.group10()[0] * other.group1()[3])
                        + (self.group8()[3] * other.group0()[2])
                        + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group3()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[3] * other.group2()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group3()[0]) - (self.group8()[0] * other.group3()[1])),
                    (-(self.group8()[2] * other.group3()[0]) + (self.group8()[0] * other.group3()[2])),
                    ((self.group8()[2] * other.group3()[1]) - (self.group8()[1] * other.group3()[2])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd3        3        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       17       41        0
    //  no simd       32       72        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self[e35] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[0] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                ((self.group4()[1] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                ((self.group4()[2] * other.group0()[0]) - (self.group8()[2] * other.group0()[1])),
                (self[e35] * other.group0()[1]),
            ]),
            // e5
            ((self.group8()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[0]) + (self.group3()[3] * other.group0()[0])),
            // e15, e25, e35, e45
            ((self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                    (-(self.group7()[1] * other.group0()[1]) - (self.group5()[1] * other.group0()[0])),
                    (-(self.group7()[2] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                    (self.group5()[3] * other.group0()[1]),
                ])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other.group0()[1]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e35]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(other.group0()[1])
                    * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[3]]))),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[0]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[1] * other.group0()[1]),
                    (self.group1()[2] * other.group0()[1]),
                    (-(self.group0()[1] * other.group0()[0]) - (self[e1] * other.group0()[1])),
                ])),
            // e1234
            (self.group1()[3] * other.group0()[1] * -1.0),
            // e12, e31, e23
            (-(Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl GeometricProduct<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       55        0
    //    simd2        3        5        0
    //    simd3        8       11        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       54       79        0
    //  no simd       97      130        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[2] * other.group0()[1]) - (self.group6()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group5()[0] * other.group0()[3])),
                (-(self.group6()[2] * other.group0()[0]) + (self.group6()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])
                    - (self.group5()[1] * other.group0()[3])),
                ((self.group6()[1] * other.group0()[0]) - (self.group6()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) - (self.group5()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e5
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0]) - (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e15, e25, e35, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                + (other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group8()[1] * other.group0()[2]) - (self.group3()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group8()[2] * other.group0()[0]) - (self.group3()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group8()[0] * other.group0()[1]) - (self.group3()[2] * other.group0()[3])),
                    0.0,
                ])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[1]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group6()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group6()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group0()[1] * other.group0()[3]) - (self.group6()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(self.group7() * Simd32x3::from(other.group0()[3])) - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group4()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group4()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2])
                        - (self.group8()[3] * other.group0()[3])
                        - (self.group8()[2] * other.group0()[2])
                        - (self.group8()[0] * other.group0()[0])
                        - (self.group8()[1] * other.group0()[1])),
                ])),
            // e1234
            (self[e35] * other.group0()[3]),
            // e12, e31, e23
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                + (swizzle!(self.group4(), 1, 0, 2) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))),
        );
    }
}
impl GeometricProduct<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      105        0
    //    simd2        4        4        0
    //    simd3       22       24        0
    //    simd4       18       18        0
    // Totals...
    // yes simd      122      151        0
    //  no simd      224      257        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group1()[2]) - (self.group8()[1] * other.group1()[1]) - (self.group8()[0] * other.group1()[0])
                        + (self.group3()[3] * other.group0()[3])),
                    (-(self.group5()[3] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group6()[1] * other.group0()[2]) + (self.group6()[0] * other.group1()[3]) + (self.group5()[1] * other.group1()[2])
                        - (self.group5()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])),
                    (-(self.group6()[2] * other.group0()[0]) + (self.group6()[1] * other.group1()[3]) + (self.group5()[2] * other.group1()[0])
                        - (self.group5()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])),
                    ((self.group6()[2] * other.group1()[3]) - (self.group6()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[3])
                        + (self.group5()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])),
                    ((self.group6()[0] * other.group1()[0]) * -1.0),
                ])),
            // e5
            ((self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group1()[3])
                - (self.group5()[2] * other.group0()[2])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[0] * other.group0()[0])
                - (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                + (self.group0()[1] * other.group1()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                + (other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group0()[2]) - (self.group8()[1] * other.group0()[2])
                        + (self.group8()[0] * other.group1()[3])
                        + (self.group3()[1] * other.group1()[2])
                        - (self.group3()[0] * other.group0()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group0()[0]) - (self.group8()[2] * other.group0()[0])
                        + (self.group8()[1] * other.group1()[3])
                        + (self.group3()[2] * other.group1()[0])
                        - (self.group3()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) + (self.group10()[0] * other.group1()[3]) + (self.group8()[2] * other.group1()[3])
                        - (self.group8()[0] * other.group0()[1])
                        - (self.group3()[2] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[1])),
                    (-(self.group10()[0] * other.group1()[2]) - (self[e35] * other.group1()[3])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group4(), 2, 0, 2) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group4(), 0, 1, 1) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group0()[1]) - (self.group5()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    ((self.group6()[0] * other.group0()[2]) - (self.group5()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group6()[1] * other.group0()[0]) - (self.group5()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[0] * other.group0()[0]) + (self.group5()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group7(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) - (self.group10()[1] * other.group1()[2]) + (self.group4()[1] * other.group0()[2])
                        - (self.group4()[0] * other.group1()[3])),
                    ((self.group10()[1] * other.group0()[3]) - (self.group10()[0] * other.group1()[0]) + (self.group4()[2] * other.group0()[0])
                        - (self.group4()[1] * other.group1()[3])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group10()[0] * other.group0()[3]) - (self.group4()[2] * other.group1()[3])
                        + (self.group4()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2])
                        - (self.group8()[3] * other.group0()[3])
                        - (self.group8()[2] * other.group0()[2])
                        - (self.group8()[1] * other.group0()[1])
                        - (self.group8()[0] * other.group0()[0])
                        + (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self[e35] * other.group0()[3]) - (self.group4()[2] * other.group1()[2]) - (self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group1()[3]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group1()[0]) - (self.group8()[0] * other.group1()[1])),
                    (-(self.group8()[2] * other.group1()[0]) + (self.group8()[0] * other.group1()[2])),
                    ((self.group8()[2] * other.group1()[1]) - (self.group8()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      109        0
    //    simd3       17       21        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      111      135        0
    //  no simd      160      192        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group6()[2] * other.group1()[2])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])),
                (-(self.group10()[2] * other.group0()[0])
                    - (self.group10()[1] * other.group0()[1])
                    - (self.group10()[0] * other.group0()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e35] * other.group1()[0]) - (self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2]) + (self.group4()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])
                    - (self.group4()[1] * other.group1()[2])),
                ((self[e35] * other.group1()[1]) + (self.group8()[2] * other.group0()[0])
                    - (self.group8()[0] * other.group0()[2])
                    - (self.group4()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])
                    + (self.group4()[0] * other.group1()[2])),
                ((self[e35] * other.group1()[2]) - (self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1]) + (self.group4()[1] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[2])
                    - (self.group4()[0] * other.group1()[1])),
                (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group10()[2] * other.group1()[0])
                - (self.group10()[1] * other.group1()[1])
                - (self.group10()[0] * other.group1()[2])
                - (self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                - (self.group3()[2] * other.group0()[2])
                - (self.group3()[0] * other.group0()[0])
                - (self.group3()[1] * other.group0()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group1()[0], self.group6()[1]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group5()[1], self.group6()[0]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group5()[0], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1])
                        + (self.group7()[1] * other.group0()[2])
                        + (self.group5()[3] * other.group1()[0])
                        + (self.group5()[1] * other.group1()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2])
                        + (self.group5()[3] * other.group1()[1])
                        + (self.group5()[2] * other.group1()[0])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[1] * other.group0()[0])
                        + (self.group7()[0] * other.group0()[1])
                        + (self.group5()[3] * other.group1()[2])
                        + (self.group5()[0] * other.group1()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group6()[2], self.group1()[3], self.group6()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group1()[3], self.group6()[0], self.group1()[3]]))
                + (swizzle!(self.group6(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group10()[1] * other.group0()[2])
                    + (self.group10()[0] * other.group0()[1])
                    + (self[e35] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group1()[2])),
                ((self.group10()[2] * other.group0()[2]) - (self.group10()[0] * other.group0()[0]) + (self[e35] * other.group1()[1]) - (self.group4()[2] * other.group1()[0])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group4()[0] * other.group1()[2])),
                (-(self.group10()[2] * other.group0()[1])
                    + (self.group10()[1] * other.group0()[0])
                    + (self[e35] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[0])
                    + (self.group0()[0] * other.group0()[2])
                    - (self.group4()[0] * other.group1()[1])),
                ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[0] * other.group0()[0])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * other.group0()) - (swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group4(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group1(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from(self.group8()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(self.group3()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group1())
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group5(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group1()[1]) - (self.group6()[1] * other.group1()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])),
                    (-(self.group6()[2] * other.group1()[0])
                        + (self.group6()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group6()[1] * other.group1()[0]) - (self.group6()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])),
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group5()[1] * other.group1()[1])
                        + (self.group5()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[0] * other.group0()[0]) + (self.group6()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group6(), 1, 0, 2) * swizzle!(other.group1(), 0, 2, 1)) + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group1(), 1, 0, 2))
                - (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group5()[1], self.group5()[0], self.group5()[2]]))
                + (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group5()[0], self.group5()[2], self.group5()[1]]))
                - (Simd32x3::from(self.group0()[1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group1(), 2, 1, 0))),
        );
    }
}
impl GeometricProduct<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       86        0
    //    simd3       20       22        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      111      134        0
    //  no simd      229      256        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group6()[2] * other.group1()[2])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
                (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2]) + (self[e35] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e35]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group4()[2]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group4()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group8()[1] * other.group0()[2]) + (self.group4()[2] * other.group1()[1]) - (self.group4()[1] * other.group1()[2])
                        + (self.group4()[0] * other.group1()[3])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group4()[2] * other.group1()[0])
                        + (self.group4()[1] * other.group1()[3])
                        + (self.group4()[0] * other.group1()[2])),
                    ((self.group8()[0] * other.group0()[1]) + (self.group4()[2] * other.group1()[3]) + (self.group4()[1] * other.group1()[0])
                        - (self.group4()[0] * other.group1()[1])),
                    0.0,
                ])),
            // e5
            (-(self.group10()[2] * other.group1()[0]) - (self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2]) + (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                + (self.group3()[3] * other.group1()[3])
                - (self.group3()[2] * other.group0()[2])
                - (self.group3()[1] * other.group0()[1])
                + (self.group0()[0] * other.group1()[3])
                - (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group5()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[0]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group5()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group5()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group5()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[1])),
                    0.0,
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 2, 0, 2) * Simd32x4::from([self.group10()[2], self.group10()[2], self.group10()[1], self.group8()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 1, 3, 3, 1) * Simd32x4::from([self.group10()[0], self.group10()[1], self.group10()[0], self.group8()[1]]))
                + (Simd32x4::from(self[e35]) * other.group1())
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                + Simd32x4::from([
                    ((self.group4()[2] * other.group1()[1]) + (self.group4()[0] * other.group1()[3])),
                    ((self.group4()[1] * other.group1()[3]) + (self.group4()[0] * other.group1()[2])),
                    ((self.group4()[2] * other.group1()[3]) + (self.group4()[1] * other.group1()[0])),
                    (-(self.group4()[1] * other.group1()[1]) - (self.group4()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group4(), 2, 0, 2) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))
                + (swizzle!(self.group4(), 0, 1, 1) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group1()[1]) - (self.group8()[1] * other.group1()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])),
                    (-(self.group8()[2] * other.group1()[0]) + (self.group8()[0] * other.group1()[2]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group8()[1] * other.group1()[0]) - (self.group8()[0] * other.group1()[1]) + (self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group6()[2], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 2, 0, 2) * Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group5()[1]]))
                + (swizzle!(other.group0(), 1, 2, 3, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[2], self.group7()[1]]))
                + (swizzle!(other.group0(), 3, 3, 0, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[1], self.group7()[0]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self[e1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group5()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) + (self.group6()[0] * other.group0()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[0]) + (self.group5()[0] * other.group0()[1])),
                    ((self.group5()[2] * other.group0()[0]) - (self.group5()[0] * other.group0()[2])),
                    (-(self.group5()[2] * other.group0()[1]) + (self.group5()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      334      360        0
    //    simd2       16       16        0
    //    simd3      114      116        0
    //    simd4       71       71        0
    // Totals...
    // yes simd      535      563        0
    //  no simd      992     1024        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group10()[2]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                + (Simd32x2::from(self[e35]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + (Simd32x2::from(self.group8()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group5()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                - (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group4()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group4()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group4()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(self.group0()[0]) * other.group0())
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group8()[2]) - (self.group8()[1] * other.group8()[1]) - (self.group8()[0] * other.group8()[0])
                        + (self.group7()[2] * other.group6()[2])
                        + (self.group7()[1] * other.group6()[1])
                        + (self.group7()[0] * other.group6()[0])
                        + (self.group6()[2] * other.group7()[2])
                        + (self.group6()[1] * other.group7()[1])
                        + (self.group6()[0] * other.group7()[0])
                        + (self.group5()[2] * other.group5()[2])
                        + (self.group5()[1] * other.group5()[1])
                        + (self.group5()[0] * other.group5()[0])
                        + (self.group3()[3] * other.group3()[3])
                        - (self[e1] * other.group1()[3])
                        - (self.group1()[3] * other[e1])
                        - (self.group0()[1] * other.group0()[1])),
                    (-(self.group5()[2] * other.group10()[0])
                        - (self.group5()[1] * other.group10()[1])
                        - (self.group5()[0] * other.group10()[2])
                        - (self.group4()[2] * other.group7()[2])
                        - (self.group4()[1] * other.group7()[1])
                        - (self.group4()[0] * other.group7()[0])
                        - (self.group3()[3] * other.group5()[3])
                        - (self.group3()[2] * other.group6()[2])
                        - (self.group3()[1] * other.group6()[1])
                        - (self.group3()[0] * other.group6()[0])
                        + (self[e1] * other[e35])
                        + (self.group1()[3] * other.group8()[3])
                        + (self.group1()[2] * other.group8()[2])
                        + (self.group1()[1] * other.group8()[1])
                        + (self.group1()[0] * other.group8()[0])
                        + (self.group0()[1] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                - (swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                - (swizzle!(other.group8(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group5()[3])
                        - (self.group8()[3] * other.group6()[0])
                        - (self.group8()[0] * other.group0()[1])
                        - (self.group7()[2] * other.group4()[1])
                        + (self.group7()[1] * other.group4()[2])
                        - (self.group7()[0] * other[e35])
                        - (self.group6()[1] * other.group3()[2])
                        + (self.group6()[0] * other.group8()[3])
                        + (self.group5()[1] * other.group8()[2])
                        + (self.group4()[2] * other.group7()[1])
                        - (self.group4()[1] * other.group7()[2])
                        + (self.group4()[0] * other[e1])
                        - (self.group3()[2] * other.group6()[1])
                        + (self.group3()[1] * other.group6()[2])
                        - (self.group3()[0] * other.group1()[3])
                        - (self[e1] * other.group4()[0])
                        + (self.group1()[2] * other.group10()[1])
                        + (self.group1()[0] * other.group0()[0])),
                    ((self.group10()[1] * other.group5()[3]) - (self.group8()[3] * other.group6()[1]) - (self.group8()[1] * other.group0()[1])
                        + (self.group7()[2] * other.group4()[0])
                        - (self.group7()[1] * other[e35])
                        - (self.group7()[0] * other.group4()[2])
                        - (self.group6()[2] * other.group3()[0])
                        + (self.group6()[1] * other.group8()[3])
                        + (self.group5()[2] * other.group8()[0])
                        - (self.group4()[2] * other.group7()[0])
                        + (self.group4()[1] * other[e1])
                        + (self.group4()[0] * other.group7()[2])
                        + (self.group3()[2] * other.group6()[0])
                        - (self.group3()[1] * other.group1()[3])
                        - (self.group3()[0] * other.group6()[2])
                        - (self[e1] * other.group4()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group10()[0])),
                    ((self.group10()[0] * other.group5()[3])
                        - (self.group8()[3] * other.group6()[2])
                        - (self.group8()[2] * other.group0()[1])
                        - (self.group7()[2] * other[e35])
                        - (self.group7()[1] * other.group4()[0])
                        + (self.group7()[0] * other.group4()[1])
                        + (self.group6()[2] * other.group8()[3])
                        - (self.group6()[0] * other.group3()[1])
                        + (self.group5()[0] * other.group8()[1])
                        + (self.group4()[2] * other[e1])
                        + (self.group4()[1] * other.group7()[0])
                        - (self.group4()[0] * other.group7()[1])
                        - (self.group3()[2] * other.group1()[3])
                        - (self.group3()[1] * other.group6()[0])
                        + (self.group3()[0] * other.group6()[1])
                        - (self[e1] * other.group4()[2])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group10()[2])),
                    (-(self.group10()[2] * other.group6()[0]) - (self.group10()[1] * other.group6()[1]) - (self.group10()[0] * other.group6()[2])
                        + (self.group8()[1] * other.group6()[1])
                        + (self.group8()[0] * other.group6()[0])
                        - (self.group6()[2] * other.group10()[0])
                        - (self.group6()[1] * other.group10()[1])
                        - (self.group6()[1] * other.group8()[1])
                        - (self.group6()[0] * other.group10()[2])
                        - (self.group6()[0] * other.group8()[0])
                        - (self.group5()[0] * other.group4()[0])
                        - (self.group4()[1] * other.group5()[1])
                        - (self.group4()[0] * other.group5()[0])
                        + (self.group4()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group4()[1])
                        - (self.group1()[0] * other.group4()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other[e35])),
                ])),
            // e5
            (-(self.group10()[2] * other.group7()[0]) - (self.group10()[1] * other.group7()[1]) - (self.group10()[0] * other.group7()[2])
                + (self.group8()[3] * other.group5()[3])
                + (self.group8()[3] * other.group0()[1])
                - (self.group8()[2] * other.group7()[2])
                - (self.group8()[1] * other.group7()[1])
                - (self.group8()[0] * other.group7()[0])
                - (self.group7()[2] * other.group10()[0])
                + (self.group7()[2] * other.group8()[2])
                - (self.group7()[1] * other.group10()[1])
                + (self.group7()[1] * other.group8()[1])
                - (self.group7()[0] * other.group10()[2])
                + (self.group7()[0] * other.group8()[0])
                - (self.group5()[3] * other.group8()[3])
                - (self.group5()[2] * other.group3()[2])
                - (self.group5()[1] * other.group3()[1])
                - (self.group5()[0] * other.group3()[0])
                + (self.group3()[3] * other[e1])
                - (self.group3()[2] * other.group5()[2])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[1] * other.group5()[1])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[0] * other.group5()[0])
                - (self.group3()[0] * other.group1()[0])
                - (self[e1] * other.group3()[3])
                + (self[e1] * other.group0()[0])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[0] * other.group3()[0])
                + (self.group0()[0] * other[e1])
                + (self.group0()[1] * other.group8()[3])),
            // e15, e25, e35, e45
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self.group8()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(other.group8(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[0]]))
                - (swizzle!(other.group5(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group5(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group5(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other.group1()[1]]))
                - (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other[e1], other.group7()[2], other.group7()[0], other.group1()[0]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[0]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group10()[1], other.group8()[0], other.group0()[0], other.group0()[0]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other[e1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[0]]))
                + (Simd32x4::from(self.group0()[0]) * other.group3())
                + Simd32x4::from([
                    ((self.group10()[2] * other.group8()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[0] * other.group8()[3])
                        + (self.group7()[1] * other.group1()[2])
                        - (self.group7()[0] * other.group0()[1])
                        + (self.group5()[1] * other.group7()[2])
                        + (self.group3()[1] * other.group8()[2])
                        + (self.group3()[0] * other.group0()[0])
                        - (self[e1] * other.group1()[0])
                        + (self.group1()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[0])),
                    ((self.group10()[1] * other.group8()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[1] * other.group8()[3])
                        + (self.group7()[2] * other.group1()[0])
                        - (self.group7()[1] * other.group0()[1])
                        + (self.group5()[2] * other.group7()[0])
                        + (self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        - (self[e1] * other.group1()[1])
                        + (self.group1()[0] * other.group7()[2])
                        - (self.group0()[1] * other.group7()[1])),
                    (-(self.group10()[2] * other.group3()[1]) + (self.group10()[0] * other.group8()[3]) + (self.group8()[2] * other.group8()[3])
                        - (self.group7()[2] * other.group0()[1])
                        + (self.group7()[0] * other.group1()[1])
                        + (self.group5()[0] * other.group7()[1])
                        + (self.group3()[1] * other.group10()[2])
                        + (self.group3()[0] * other.group8()[1])
                        - (self[e1] * other.group1()[2])
                        + (self.group1()[1] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group10()[1] * other.group8()[1])
                        - (self.group10()[0] * other.group8()[2])
                        - (self[e35] * other.group8()[3])
                        - (self.group8()[1] * other.group10()[1])
                        - (self.group8()[0] * other.group10()[2])
                        + (self.group7()[2] * other.group6()[2])
                        + (self.group7()[1] * other.group6()[1])
                        + (self.group7()[0] * other.group6()[0])
                        - (self.group6()[2] * other.group7()[2])
                        - (self.group6()[1] * other.group7()[1])
                        - (self.group6()[0] * other.group7()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other[e35], other.group4()[2], other.group4()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group4(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group4()[1], other[e35], other[e35]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group10(), 0, 2, 1))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group8()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group10()[2]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group8()[0]]))
                - (Simd32x3::from(self.group3()[3]) * other.group4())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group4())
                - (Simd32x3::from(self.group0()[1]) * other.group6())),
            // e415, e425, e435, e321
            ((swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[1]]))
                - (swizzle!(self.group8(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 0) * Simd32x4::from([self.group3()[3], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                - (swizzle!(self.group3(), 1, 3, 3, 3) * Simd32x4::from([other.group6()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group10()[0]]))
                + (swizzle!(other.group8(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (Simd32x4::from(self.group0()[0]) * other.group5())
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[1]) - (self.group10()[1] * other.group5()[2]) - (self.group8()[0] * other.group5()[3])
                        + (self.group7()[2] * other.group4()[1])
                        - (self.group7()[1] * other.group4()[2])
                        + (self.group7()[0] * other[e35])
                        + (self.group6()[2] * other.group3()[1])
                        - (self.group5()[3] * other.group8()[0])
                        - (self.group5()[1] * other.group10()[0])
                        + (self.group4()[2] * other.group7()[1])
                        - (self.group4()[1] * other.group7()[2])
                        + (self.group4()[0] * other[e1])
                        + (self[e1] * other.group4()[0])
                        + (self.group0()[1] * other.group10()[2])),
                    ((self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group5()[0]) - (self.group7()[2] * other.group4()[0])
                        + (self.group7()[1] * other[e35])
                        + (self.group7()[0] * other.group4()[2])
                        + (self.group6()[0] * other.group3()[2])
                        - (self.group5()[3] * other.group8()[1])
                        - (self.group5()[2] * other.group10()[2])
                        - (self.group4()[2] * other.group7()[0])
                        + (self.group4()[1] * other[e1])
                        + (self.group4()[0] * other.group7()[2])
                        - (self.group3()[2] * other.group6()[0])
                        + (self[e1] * other.group4()[1])
                        + (self.group0()[1] * other.group10()[1])),
                    (-(self.group10()[2] * other.group5()[1]) + (self.group10()[0] * other.group0()[1]) + (self.group7()[2] * other[e35]) + (self.group7()[1] * other.group4()[0])
                        - (self.group7()[0] * other.group4()[1])
                        + (self.group6()[1] * other.group3()[0])
                        - (self.group5()[3] * other.group8()[2])
                        - (self.group5()[0] * other.group10()[1])
                        + (self.group4()[2] * other[e1])
                        + (self.group4()[1] * other.group7()[0])
                        - (self.group4()[0] * other.group7()[1])
                        - (self.group3()[0] * other.group6()[1])
                        + (self[e1] * other.group4()[2])
                        + (self.group0()[1] * other.group10()[0])),
                    (-(self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2])
                        + (self.group7()[2] * other.group4()[2])
                        + (self.group7()[1] * other.group4()[1])
                        + (self.group7()[0] * other.group4()[0])
                        - (self.group6()[1] * other.group3()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group4()[2] * other.group7()[2])
                        - (self.group4()[1] * other.group7()[1])
                        - (self.group4()[0] * other.group7()[0])
                        + (self.group3()[0] * other.group6()[0])
                        - (self[e1] * other[e35])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[1] * other.group3()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group6()[2], other.group6()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group6(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group6()[1], other.group1()[3], other.group1()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * swizzle!(other.group10(), 0, 2, 1))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group8()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group10()[2]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group8()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group3()[3]) * other.group6())
                + (Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group6())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group7(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group7()[1], other[e1], other[e1]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * other.group7())
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e1]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group3()[2]) + (self.group3()[2] * other.group5()[1]) + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group5()[2])
                        - (self.group3()[1] * other.group1()[2])
                        - (self.group1()[2] * other.group3()[1])),
                    (-(self.group5()[2] * other.group3()[0]) - (self.group3()[2] * other.group5()[0]) - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group5()[2])
                        + (self.group3()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[0] * other.group3()[1]) + (self.group3()[1] * other.group5()[0]) + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group5()[1])
                        - (self.group3()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                + (Simd32x4::from(self.group8()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group8(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + (swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group7()[2]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                + (swizzle!(other.group5(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                + (Simd32x4::from(self.group0()[0]) * other.group8())
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group8()[2])
                        + (self.group8()[2] * other.group10()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group7()[2] * other.group6()[1])
                        + (self.group7()[1] * other.group6()[2])
                        - (self.group7()[0] * other.group1()[3])
                        + (self.group6()[2] * other.group7()[1])
                        - (self.group6()[1] * other.group7()[2])
                        - (self.group5()[1] * other.group1()[2])
                        + (self.group4()[1] * other.group3()[2])
                        - (self.group4()[0] * other.group8()[3])
                        + (self.group1()[3] * other.group7()[0])
                        + (self.group1()[0] * other.group0()[1])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group8()[0])
                        + (self.group8()[1] * other.group0()[0])
                        + (self.group8()[0] * other.group10()[0])
                        + (self.group7()[2] * other.group6()[0])
                        - (self.group7()[1] * other.group1()[3])
                        - (self.group7()[0] * other.group6()[2])
                        - (self.group6()[2] * other.group7()[0])
                        + (self.group6()[0] * other.group7()[2])
                        - (self.group5()[2] * other.group1()[0])
                        + (self.group4()[2] * other.group3()[0])
                        - (self.group4()[1] * other.group8()[3])
                        + (self.group1()[3] * other.group7()[1])
                        + (self.group1()[1] * other.group0()[1])),
                    (-(self.group10()[2] * other.group8()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group0()[0])
                        + (self.group8()[1] * other.group10()[2])
                        - (self.group7()[2] * other.group1()[3])
                        - (self.group7()[1] * other.group6()[0])
                        + (self.group7()[0] * other.group6()[1])
                        + (self.group6()[1] * other.group7()[0])
                        - (self.group6()[0] * other.group7()[1])
                        - (self.group5()[0] * other.group1()[1])
                        - (self.group4()[2] * other.group8()[3])
                        + (self.group4()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group7()[2])
                        + (self.group1()[2] * other.group0()[1])),
                    (-(self.group10()[0] * other.group3()[2])
                        - (self.group8()[2] * other.group3()[2])
                        - (self.group8()[1] * other.group3()[1])
                        - (self.group8()[0] * other.group3()[0])
                        + (self.group7()[1] * other.group1()[1])
                        + (self.group7()[0] * other.group5()[0])
                        + (self.group7()[0] * other.group1()[0])
                        + (self.group5()[0] * other.group7()[0])
                        - (self.group3()[1] * other.group10()[1])
                        - (self.group3()[0] * other.group10()[2])
                        - (self[e1] * other.group0()[1])
                        - (self.group1()[1] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[0])
                        - (self.group0()[1] * other[e1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group4()[0]) - (self.group10()[1] * other.group4()[1]) - (self.group10()[0] * other.group4()[2])
                + (self[e35] * other.group3()[3])
                + (self[e35] * other.group0()[0])
                + (self.group8()[2] * other.group4()[2])
                + (self.group8()[1] * other.group4()[1])
                + (self.group8()[0] * other.group4()[0])
                + (self.group6()[2] * other.group5()[2])
                - (self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group5()[1])
                - (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group5()[0])
                - (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group1()[3])
                + (self.group5()[2] * other.group6()[2])
                + (self.group5()[1] * other.group6()[1])
                + (self.group5()[0] * other.group6()[0])
                - (self.group4()[2] * other.group10()[0])
                - (self.group4()[2] * other.group8()[2])
                - (self.group4()[1] * other.group10()[1])
                - (self.group4()[1] * other.group8()[1])
                - (self.group4()[0] * other.group10()[2])
                - (self.group4()[0] * other.group8()[0])
                - (self.group3()[3] * other[e35])
                + (self.group1()[3] * other.group5()[3])
                - (self.group1()[3] * other.group0()[1])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[0] * other[e35])
                - (self.group0()[1] * other.group1()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * swizzle!(other.group10(), 1, 2, 0))
                + (swizzle!(self.group10(), 1, 2, 2) * Simd32x3::from([other.group10()[2], other.group10()[0], other.group0()[0]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[0], other.group0()[0], other.group10()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other[e1], other[e1], other.group7()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group7()[0], other.group7()[2], other[e1]]))
                + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group8()[3], other.group8()[3], other.group3()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group3()[0], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group10())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group8()[0]) - (self.group8()[0] * other.group8()[1]) - (self.group5()[1] * other.group5()[0])
                        + (self.group5()[0] * other.group5()[1])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group8()[2] * other.group8()[0]) + (self.group8()[0] * other.group8()[2]) + (self.group5()[2] * other.group5()[0])
                        - (self.group5()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])),
                    ((self.group8()[2] * other.group8()[1]) - (self.group8()[1] * other.group8()[2]) - (self.group5()[2] * other.group5()[1])
                        + (self.group5()[1] * other.group5()[2])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       51       78        0
    //  no simd       96      129        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group6()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                    ((self.group6()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                    ((self.group6()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                    ((self.group6()[1] * other.group0()[1]) * -1.0),
                ])),
            // e5
            ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group8()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group8()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group8()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                    (-(self[e35] * other.group0()[3]) - (self.group10()[0] * other.group0()[2])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    (-(self.group5()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group5()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group4()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group4()[2] * other.group0()[3])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       50        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       58       84        0
    //  no simd      128      164        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + Simd32x2::from([
                    (-(self[e1] * other.group0()[3]) - (self.group1()[3] * other[e2])),
                    ((self[e35] * other[e2]) + (self.group8()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group4()[0] * other[e2]) - (self.group3()[0] * other.group0()[3])),
                    ((self.group4()[1] * other[e2]) - (self.group3()[1] * other.group0()[3])),
                    ((self.group4()[2] * other[e2]) - (self.group3()[2] * other.group0()[3])),
                    ((self.group4()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[3])),
                ])),
            // e5
            ((self.group3()[3] * other[e2]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) + (self.group0()[0] * other[e2])
                - (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                - (swizzle!(self.group5(), 0, 1, 2, 1) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]))
                + (self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group5()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 3)
                    * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]))),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e35]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group8()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                    ((self.group8()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                    ((self.group8()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[2]) - (self.group8()[3] * other.group0()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other[e2]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + (swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group0(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group7()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                    (-(self.group7()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                    (-(self.group7()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                    ((self.group7()[0] * other.group0()[0]) - (self.group0()[1] * other[e2])),
                ])),
            // e1234
            (-(self.group6()[2] * other.group0()[2])
                - (self.group6()[1] * other.group0()[1])
                - (self.group6()[0] * other.group0()[0])
                - (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other[e2]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[scalar])),
            // e5
            (self[e1] * other[scalar]),
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other[scalar])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group5() * Simd32x4::from(other[scalar])),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group7() * Simd32x3::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group8() * Simd32x4::from(other[scalar])),
            // e1234
            (self[e35] * other[scalar]),
            // e12, e31, e23
            (self.group10() * Simd32x3::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       58        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       63       89        0
    //  no simd      128      160        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self.group8()[3], self[e1]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group6()[1]]))
                + (swizzle!(self.group5(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other[e4315]) + (self.group6()[0] * other.group0()[3])),
                    (-(self.group7()[1] * other[e4315]) + (self.group6()[1] * other.group0()[3])),
                    (-(self.group7()[2] * other[e4315]) + (self.group6()[2] * other.group0()[3])),
                    (-(self.group6()[0] * other.group0()[0]) + (self.group0()[1] * other[e4315])),
                ])),
            // e5
            ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (self.group8() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2]) - (self[e35] * other.group0()[3])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other[e4315]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    ((self.group7()[0] * other[e4315]) - (self.group5()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    ((self.group7()[1] * other[e4315]) - (self.group5()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    ((self.group7()[2] * other[e4315]) - (self.group5()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group5()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[3]) - (self[e1] * other[e4315])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + (swizzle!(self.group3(), 0, 1, 2, 1) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group4()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group4()[2] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[0] * other.group0()[0]) + (self.group0()[0] * other[e4315])
                - (self.group3()[3] * other[e4315])),
            // e12, e31, e23
            ((swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd2        4        4        0
    //    simd3       48       48        0
    //    simd4       45       45        0
    // Totals...
    // yes simd      245      277        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[1] * other.group1()[1])
                        + (self.group5()[0] * other.group1()[0])
                        - (self[e1] * other.group3()[3])
                        - (self.group1()[3] * other.group2()[3])
                        - (self.group0()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group1()[0]) - (self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2])
                        + (self[e35] * other.group2()[3])
                        + (self.group8()[3] * other.group3()[3])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group10()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group8()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) + (self.group4()[2] * other.group2()[1]) - (self.group4()[1] * other.group2()[2])
                        + (self.group4()[0] * other.group2()[3])
                        - (self.group3()[0] * other.group3()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[1] * other.group2()[3])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[1] * other.group3()[3])),
                    ((self.group10()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        - (self.group3()[2] * other.group3()[3])),
                    ((self.group8()[0] * other.group0()[0]) - (self.group4()[1] * other.group1()[1]) + (self.group4()[0] * other.group3()[0])
                        - (self.group4()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[3])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2])
                + (self.group8()[3] * other.group1()[3])
                + (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                + (self.group3()[3] * other.group2()[3])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[0] * other.group3()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 3, 3, 2) * Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group6()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[3]]))
                - (swizzle!(other.group2(), 3, 2, 0, 1) * Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group5()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (swizzle!(other.group2(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group7()[1] * other.group3()[2]) - (self.group7()[0] * other.group0()[3]) + (self.group1()[2] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group7()[2] * other.group3()[0]) - (self.group7()[1] * other.group0()[3]) + (self.group1()[1] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    (-(self.group7()[2] * other.group0()[3])
                        + (self.group7()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group5()[0] * other.group3()[0])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group0()[1]) + (self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])),
                    ((self.group5()[2] * other.group0()[0]) - (self.group5()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[1] * other.group0()[0]) + (self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (Simd32x4::from(self[e35]) * other.group2())
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (swizzle!(self.group8(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                - (swizzle!(other.group3(), 0, 2, 0, 0) * Simd32x4::from([self.group3()[3], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(self.group3(), 1, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group1()[2]) - (self.group8()[0] * other.group1()[3])
                        + (self.group4()[2] * other.group2()[1])
                        + (self.group4()[0] * other.group2()[3])),
                    (-(self.group10()[0] * other.group1()[0]) + (self.group4()[1] * other.group2()[3]) + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group4()[2] * other.group2()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group2()[1]) - (self.group8()[1] * other.group2()[2])
                        + (self.group3()[2] * other.group3()[1])
                        + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group3()[2])
                        - (self.group3()[1] * other.group1()[2])),
                    (-(self.group8()[2] * other.group2()[0]) + (self.group8()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group3()[0])
                        - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group3()[0] * other.group1()[2])),
                    ((self.group8()[1] * other.group2()[0]) - (self.group8()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group3()[1])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self[e1]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group6()[2], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[2]]))
                + (swizzle!(other.group2(), 3, 2, 0, 2) * Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[1]]))
                + (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[2]]))
                + Simd32x4::from([
                    ((self.group7()[1] * other.group0()[2]) - (self.group7()[0] * other.group3()[3]) - (self.group5()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group0()[3])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[1] * other.group3()[3]) - (self.group5()[2] * other.group3()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group0()[3])),
                    (-(self.group7()[2] * other.group3()[3]) + (self.group7()[0] * other.group0()[1]) - (self.group5()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group0()[3])),
                    ((self.group7()[1] * other.group3()[1]) + (self.group7()[0] * other.group3()[0]) + (self.group7()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            (-(self.group6()[2] * other.group3()[2]) + (self.group6()[2] * other.group1()[2]) - (self.group6()[1] * other.group3()[1]) + (self.group6()[1] * other.group1()[1])
                - (self.group6()[0] * other.group3()[0])
                + (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                + (self.group1()[3] * other.group1()[3])
                - (self.group1()[3] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                - (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group7(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group2()[3], other.group2()[3], other.group2()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[3]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1]) - (self.group1()[1] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2]) + (self.group1()[2] * other.group3()[0])
                        - (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2]) - (self.group1()[2] * other.group3()[1])
                        + (self.group1()[1] * other.group3()[2])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd2       12       12        0
    //    simd3       52       52        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      241      273        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (self.group0() * Simd32x2::from(other.group0()[3]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group3()[2]) - (self.group8()[1] * other.group3()[1]) - (self.group8()[0] * other.group3()[0])
                        + (self.group3()[3] * other.group1()[3])),
                    (-(self.group5()[3] * other.group1()[3])
                        + (self.group1()[2] * other.group3()[2])
                        + (self.group1()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[3]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group2()[3]) - (self.group6()[1] * other.group2()[2])
                        + (self.group6()[0] * other.group3()[3])
                        + (self.group5()[1] * other.group3()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])),
                    (-(self.group7()[1] * other.group2()[3]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[1] * other.group3()[3])
                        + (self.group5()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[2] * other.group2()[3]) + (self.group6()[2] * other.group3()[3]) - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[1] * other.group3()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e5
            ((self.group7()[2] * other.group3()[2]) - (self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group3()[1]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[1] * other.group2()[1])
                + (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group2()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group0()[3]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group2()[2])
                        + (self.group8()[0] * other.group3()[3])
                        + (self.group3()[1] * other.group3()[2])
                        + (self.group3()[0] * other.group0()[3])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[1] * other.group3()[3])
                        + (self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group3()[3])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[1] * other.group1()[1])
                        - (self.group8()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group7()[2]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group7()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[1] * other.group0()[2]) + (self.group7()[0] * other.group2()[3]) + (self.group6()[2] * other.group2()[1])
                        - (self.group5()[3] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[1] * other.group2()[3]) + (self.group6()[0] * other.group2()[2])
                        - (self.group5()[3] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[2] * other.group2()[3]) - (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group5()[3] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[0] * other.group0()[0])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self[e1] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group5()[2] * other.group0()[1]) - (self.group5()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])),
                    (-(self.group5()[2] * other.group0()[0]) + (self.group5()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group5()[1] * other.group0()[0]) - (self.group5()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            (-(Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group5()[2] * other.group2()[0]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                + (Simd32x4::from(self.group8()[3]) * other.group0())
                - (swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[2] * other.group1()[1])
                        + (self.group8()[0] * other.group0()[3])
                        + (self.group4()[1] * other.group2()[2])
                        - (self.group4()[0] * other.group3()[3])
                        + (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[1] * other.group0()[3])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[1] * other.group3()[3])
                        + (self.group3()[0] * other.group0()[2])),
                    (-(self.group10()[2] * other.group3()[1])
                        + (self.group10()[0] * other.group1()[3])
                        + (self.group8()[2] * other.group0()[3])
                        + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self[e35] * other.group0()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group3()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[3] * other.group2()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 2) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group3()[0]) - (self.group8()[0] * other.group3()[1]) + (self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group3()[0]) + (self.group8()[0] * other.group3()[2]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group3()[1]) - (self.group8()[1] * other.group3()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl InfixGeometricProduct for Plane {}
impl GeometricProduct<AntiScalar> for Plane {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other[e12345]),
        );
    }
}
impl GeometricProduct<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       13       31        0
    //  no simd       25       43        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       17       32        0
    //  no simd       32       47        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       25       44        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       48       61        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group3()[1]) * -1.0)])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                    + (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       18        0
    //  no simd       13       21        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       48        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       48       73        0
    //  no simd       96      133        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group6()[0]) - (self.group0()[2] * other.group5()[1]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[1]) - (self.group0()[0] * other.group5()[2]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            ((self.group0()[3] * other.group5()[3]) + (self.group0()[3] * other.group0()[1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group8()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group8()[3])),
                    ((self.group0()[2] * other.group8()[3]) + (self.group0()[1] * other.group3()[0])),
                    ((self.group0()[1] * other.group10()[1]) * -1.0),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group5()[1]]))),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[0] * other.group10()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group4()[2]) + (self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<RoundPoint> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       24        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            ((self.group0() * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
        );
    }
}
impl GeometricProduct<Scalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl GeometricProduct<Sphere> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[3] * other[e4315]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       24       38        0
    //  no simd       48       68        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       52       65        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group3()[1]) * -1.0)])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixGeometricProduct for RoundPoint {}
impl GeometricProduct<AntiScalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other[e12345] * -1.0),
        );
    }
}
impl GeometricProduct<Circle> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]))
                - Simd32x4::from([
                    (self[e2] * other.group0()[0]),
                    (self[e2] * other.group0()[1]),
                    (self[e2] * other.group0()[2]),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group1()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self[e2] * other.group1()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self[e2] * other.group1()[2]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       40       58        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]))
                - Simd32x4::from([
                    (self[e2] * other.group0()[0]),
                    (self[e2] * other.group0()[1]),
                    (self[e2] * other.group0()[2]),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) * -1.0),
                    ((self[e2] * other.group1()[1]) * -1.0),
                    ((self[e2] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       34        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) - (self.group0()[2] * other.group2()[1])),
                    ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])),
                    ((self[e2] * other.group1()[2]) - (self.group0()[1] * other.group2()[0])),
                    (-(self[e2] * other.group1()[3]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       31        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       59       79        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other.group2()[3]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[2] * other.group3()[0])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) - (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    ((self[e2] * other.group1()[2]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35, e1234
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricProduct<FlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl GeometricProduct<Flector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl GeometricProduct<Line> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       16       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self[e2] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self[e2] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Motor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       21       39        0
    //  no simd       24       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self[e2] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                (-(self[e2] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       62        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       64       92        0
    //  no simd      128      160        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + Simd32x2::from([
                    (-(self[e2] * other.group1()[3]) - (self.group0()[3] * other[e1])),
                    ((self[e2] * other[e35]) + (self.group0()[3] * other.group8()[3])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group4()[0]) + (self.group0()[0] * other.group0()[0])),
                    (-(self[e2] * other.group4()[1]) + (self.group0()[1] * other.group0()[0])),
                    (-(self[e2] * other.group4()[2]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
                ])),
            // e5
            (-(self[e2] * other.group3()[3])
                + (self[e2] * other.group0()[0])
                + (self.group0()[2] * other.group3()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other[e1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group1()[0]) + (self.group0()[0] * other[e1])),
                    (-(self[e2] * other.group1()[1]) + (self.group0()[1] * other[e1])),
                    (-(self[e2] * other.group1()[2]) + (self.group0()[1] * other.group7()[0])),
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[0], other.group10()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group4()[0]) + (self.group0()[1] * other.group8()[2])),
                    ((self[e2] * other.group4()[1]) + (self.group0()[2] * other.group8()[0])),
                    ((self[e2] * other.group4()[2]) + (self.group0()[0] * other.group8()[1])),
                    (-(self[e2] * other[e35]) - (self.group0()[1] * other.group10()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group3()[1]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) - (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group7()[0]) + (self.group0()[2] * other.group5()[1]) + (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[3] * other.group7()[1]) + (self.group0()[0] * other.group5()[2]) + (self.group0()[1] * other.group0()[1])),
                    ((self.group0()[3] * other.group7()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[1] * other.group5()[0])),
                    (-(self[e2] * other.group0()[1]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group5()[3]) - (self.group0()[3] * other.group0()[1])
                + (self.group0()[2] * other.group6()[2])
                + (self.group0()[0] * other.group6()[0])
                + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(Simd32x3::from(self[e2]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd        9       20        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self[e2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self[e2] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self[e2] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       17       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[3] * other[e2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self[e2] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self[e2] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self[e2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<Scalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[scalar])), /* e5 */ (self[e2] * other[scalar]));
    }
}
impl GeometricProduct<Sphere> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       14       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self[e2] * other[e4315]),
                ])),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self[e2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self[e2] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self[e2] * other.group0()[2])),
                ((self[e2] * other[e4315])
                    + (self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       64       84        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[0], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group3()[0]) - (self[e2] * other.group1()[0])),
                    (-(self[e2] * other.group3()[1]) - (self[e2] * other.group1()[1])),
                    (-(self[e2] * other.group3()[2]) - (self[e2] * other.group1()[2])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self[e2] * other.group0()[3]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       64       88        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other.group2()[3]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[2] * other.group3()[0])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[0], other.group0()[1]]))),
        );
    }
}
impl InfixGeometricProduct for Scalar {}
impl GeometricProduct<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[scalar] * other[e12345]));
    }
}
impl GeometricProduct<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl GeometricProduct<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl GeometricProduct<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl GeometricProduct<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl GeometricProduct<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (self[scalar] * other[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group5()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group6()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group8()),
            // e1234
            (self[scalar] * other[e35]),
            // e12, e31, e23
            (Simd32x3::from(self[scalar]) * other.group10()),
        );
    }
}
impl GeometricProduct<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl GeometricProduct<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()), /* e5 */ (self[scalar] * other[e2]));
    }
}
impl GeometricProduct<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other[scalar]));
    }
}
impl GeometricProduct<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e4315]),
        );
    }
}
impl GeometricProduct<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl GeometricProduct<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl InfixGeometricProduct for Sphere {}
impl GeometricProduct<AntiScalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group0()[3] * other[e12345]),
        );
    }
}
impl GeometricProduct<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       20       35        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[0] * other.group1()[3])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[3] * other.group0()[0])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[3] * other.group0()[1])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[3] * other.group0()[2])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       22       34        0
    //  no simd       43       55        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[0] * other.group1()[3])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       32        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       35       53        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self[e4315] * other.group2()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self[e4315] * other.group2()[1]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self[e4315] * other.group2()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group2()[2]) * -1.0),
                    ((self.group0()[2] * other.group2()[0]) * -1.0),
                    ((self.group0()[0] * other.group2()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self[e4315] * other.group2()[0]) + (self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e4315] * other.group2()[1]) + (self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e4315] * other.group2()[2]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       31        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       59       79        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self[e4315]) * other.group3())
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from([
                    (self[e4315] * other.group1()[0]),
                    (self[e4315] * other.group1()[1]),
                    (self[e4315] * other.group1()[2]),
                    (self.group0()[1] * other.group3()[1]),
                ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))),
            // e23, e31, e12, e45
            ((other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    (self.group0()[1] * other.group0()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricProduct<FlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self[e4315] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self[e4315] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self[e4315] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4315] * other.group0()[0] * -1.0),
                (self[e4315] * other.group0()[1] * -1.0),
                (self[e4315] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self[e4315] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self[e4315] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self[e4315] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self[e4315] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self[e4315] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                    + (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4315] * other.group0()[0] * -1.0),
                (self[e4315] * other.group0()[1] * -1.0),
                (self[e4315] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricProduct<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       16       30        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self[e4315] * other.group0()[0]), (self[e4315] * other.group0()[1]), (self[e4315] * other.group0()[2]), 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricProduct<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self[e4315] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self[e4315] * other.group1()[1]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self[e4315] * other.group1()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricProduct<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       46        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       57       81        0
    //  no simd      128      164        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self[e4315]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group6()[0]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[1]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[2]) - (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            ((self.group0()[3] * other.group5()[3]) + (self.group0()[3] * other.group0()[1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (other.group8() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[0]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group8()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group8()[3])),
                    ((self.group0()[2] * other.group8()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group10()[2]) - (self.group0()[1] * other.group10()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group5()[1]]))),
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(other.group3() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[0] * other.group10()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self[e4315] * other.group3()[3])
                + (self[e4315] * other.group0()[0])
                + (self.group0()[2] * other.group4()[2])
                + (self.group0()[0] * other.group4()[0])
                + (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(self.group0()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other.group0()[0]),
                (self[e4315] * other.group0()[1]),
                (self[e4315] * other.group0()[2]),
                ((self[e4315] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<RoundPoint> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e4315] * other[e2]),
                ])),
            // e235, e315, e125, e12345
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1234
            (self[e4315] * other[scalar]),
        );
    }
}
impl GeometricProduct<Sphere> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       17       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self[e4315]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group0()[3] * other[e4315]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
    }
}
impl GeometricProduct<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       64       84        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self[e4315] * other.group3()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self[e4315] * other.group3()[1]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self[e4315] * other.group3()[2]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e4315]) * other.group2())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       28       45        0
    //  no simd       64       84        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self[e4315]) * other.group3())
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from([
                    (self[e4315] * other.group1()[0]),
                    (self[e4315] * other.group1()[1]),
                    (self[e4315] * other.group1()[2]),
                    (self.group0()[1] * other.group3()[1]),
                ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))),
            // e23, e31, e12, e45
            ((other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    ((self[e4315] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixGeometricProduct for VersorEven {}
impl GeometricProduct<AntiScalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[e12345]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricProduct<Circle> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       81       97        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2])
                        - (self.group2()[3] * other.group1()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[0])
                        - (self.group2()[3] * other.group1()[1])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1])
                        - (self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       56        0
    //    simd4       29       31        0
    // Totals...
    // yes simd       73       87        0
    //  no simd      160      180        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[1] * other.group2()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[1])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[0]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group2(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
        );
    }
}
impl GeometricProduct<Dipole> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       92        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       93      109        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[3] * other.group1()[1]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1]) - (self.group2()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group3()[3] * other.group2()[2]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 2, 3) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (swizzle!(self.group2(), 0, 1, 0, 2) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group2()[3] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[3] * other.group1()[2])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       68        0
    //    simd4       42       43        0
    // Totals...
    // yes simd       98      111        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    (-(self.group3()[2] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    (-(self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 2, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]))
                + (swizzle!(self.group2(), 1, 0, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[3])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group1()[0])
                        - (self.group2()[3] * other.group0()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       33        0
    //  no simd       16       36        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (-(self.group0()[3] * other.group0()[1]) - (self.group3()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                (self.group3()[3] * other.group0()[1] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group0()[1]),
                    (self.group3()[1] * other.group0()[1]),
                    (self.group3()[2] * other.group0()[1]),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       24       37        0
    //  no simd       48       64        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group3()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group3()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group3()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricProduct<Flector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       47       62        0
    //  no simd      113      128        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[0] * other.group1()[2]) - (self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[1] * other.group1()[0]) - (self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group1()[1])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group1()[2])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group1()[0])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group0()[3] * other.group1()[3])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    0.0,
                ])),
        );
    }
}
impl GeometricProduct<Line> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])),
                ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1]) - (self.group0()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])
                        + (self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Motor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       47        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       55       68        0
    //  no simd      115      131        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * swizzle!(other.group0(), 1, 2, 3, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 3, 3, 1) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * swizzle!(other.group1(), 1, 2, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * swizzle!(other.group1(), 3, 3, 0, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]))),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group1()[3])
                        - (self.group2()[3] * other.group0()[0])
                        - (self.group2()[2] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[3]) + (self.group3()[0] * other.group1()[2])
                        - (self.group2()[3] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[2] * other.group1()[3]) + (self.group3()[1] * other.group1()[0])
                        - (self.group2()[3] * other.group0()[2])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group3()[0] * other.group1()[0]) - (self.group2()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      158        0
    //    simd2        4        4        0
    //    simd3       56       58        0
    //    simd4       43       43        0
    // Totals...
    // yes simd      235      263        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group3()[3] * other[e1]) - (self.group2()[3] * other.group1()[3])
                        + (self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        - (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    ((self.group3()[3] * other.group8()[3]) + (self.group2()[3] * other[e35])
                        - (self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        + (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group8()[3], other[e35]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[0]) - (self.group2()[3] * other.group4()[0]) - (self.group2()[2] * other.group4()[1])
                        + (self.group2()[1] * other.group4()[2])
                        - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[0] * other.group8()[3])),
                    ((self.group3()[0] * other.group10()[0]) - (self.group2()[3] * other.group4()[1]) + (self.group2()[2] * other.group4()[0])
                        - (self.group2()[1] * other[e35])
                        - (self.group2()[0] * other.group4()[2])
                        + (self.group1()[2] * other.group8()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[1] * other.group10()[2]) - (self.group2()[3] * other.group4()[2]) - (self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0])
                        + (self.group2()[0] * other.group4()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[1] * other.group4()[1])
                        - (self.group3()[0] * other.group4()[0])
                        - (self.group1()[0] * other.group4()[0])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            ((self.group3()[2] * other.group3()[2]) + (self.group3()[1] * other.group3()[1]) + (self.group3()[0] * other.group3()[0]) - (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group2()[2] * other.group10()[0])
                + (self.group2()[2] * other.group8()[2])
                - (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[1] * other.group3()[1])
                + (self.group0()[3] * other.group8()[3])
                - (self.group1()[0] * other.group3()[0])),
            // e15, e25, e35, e45
            ((swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other[e1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                - (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group5(), 1, 3, 3, 0) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other.group1()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other[e1], other.group7()[2], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other[e1]) - (self.group2()[0] * other.group5()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group7()[2])),
                    ((self.group3()[0] * other.group7()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    ((self.group3()[1] * other.group7()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[0] * other.group6()[0]) + (self.group0()[3] * other.group5()[3])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group6())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group10()[0]]))
                + (swizzle!(other.group8(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[1]]))
                + (swizzle!(other.group8(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group8()[0]) - (self.group1()[1] * other.group10()[0])
                        + (self.group0()[3] * other.group10()[2])
                        + (self.group0()[2] * other.group3()[1])),
                    (-(self.group1()[3] * other.group8()[1]) - (self.group1()[2] * other.group10()[2])
                        + (self.group0()[3] * other.group10()[1])
                        + (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group8()[2]) - (self.group1()[0] * other.group10()[1])
                        + (self.group0()[3] * other.group10()[0])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[1] * other.group8()[0]) - (self.group0()[0] * other.group8()[1])),
                ])),
            // e235, e315, e125
            (-(Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[2]]))
                + (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other[e1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group7()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])),
                    ((self.group3()[3] * other.group7()[1]) + (self.group3()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group6()[2])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group3()[3] * other.group7()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group6()[0])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group3()[1] * other.group7()[1]) - (self.group3()[0] * other.group7()[0])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group7()[1])
                        + (self.group1()[0] * other.group7()[0])),
                ])),
            // e1234
            ((self.group3()[3] * other.group5()[3]) - (self.group3()[3] * other.group0()[1])
                + (self.group3()[2] * other.group6()[2])
                + (self.group3()[1] * other.group6()[1])
                + (self.group3()[0] * other.group6()[0])
                - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                - (self.group0()[3] * other.group1()[3])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group3()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                - (Simd32x3::from(self.group2()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group7(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group7(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group1()[0]) + (self.group3()[0] * other.group1()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])),
                    ((self.group3()[2] * other.group1()[0]) - (self.group3()[0] * other.group1()[2]) + (self.group1()[2] * other.group5()[0])
                        - (self.group1()[0] * other.group5()[2])),
                    (-(self.group3()[2] * other.group1()[1]) + (self.group3()[1] * other.group1()[2]) - (self.group1()[2] * other.group5()[1])
                        + (self.group1()[1] * other.group5()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       48       68        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       25       39        0
    //  no simd       64       84        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group3(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (self.group3() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other[e2]) - (self.group1()[0] * other[e2]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other[e2]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other[e2])),
                    ((self.group3()[2] * other[e2]) - (self.group1()[2] * other[e2]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[3] * other[e2])),
                ])),
        );
    }
}
impl GeometricProduct<Scalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       25       39        0
    //  no simd       64       84        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    (-(self.group2()[3] * other[e4315]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + (self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group2()[0] * other[e4315]),
                    (self.group2()[1] * other[e4315]),
                    (self.group2()[2] * other[e4315]),
                    (self.group0()[1] * other.group0()[1]),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       45       45        0
    // Totals...
    // yes simd      105      121        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group3(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[0]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * swizzle!(other.group2(), 1, 2, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * swizzle!(other.group2(), 3, 3, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 2) * Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[2]]))
                - (other.group3() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    (-(self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) - (self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0]) + (self.group2()[0] * other.group3()[0]) + (self.group2()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group2()[3])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       56        0
    //    simd4       49       50        0
    // Totals...
    // yes simd       93      106        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]))
                + (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[3])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl InfixGeometricProduct for VersorOdd {}
impl GeometricProduct<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricProduct<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       84      100        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 3, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group1()[1] * other.group1()[2])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group1()[0])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group1()[0] * other.group1()[1])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) + (self.group2()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) + (self.group2()[3] * other.group2()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[2]) + (self.group2()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       88      104        0
    //  no simd      160      176        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group2()[3])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group2()[3])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[0] * other.group2()[3]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[1] * other.group2()[3]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       87      103        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group2()[3] * other.group2()[1])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[2])
                        - (self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4       38       38        0
    // Totals...
    // yes simd      110      126        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 1, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group3()[2])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl GeometricProduct<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       16       36        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0]) * self.group1() * Simd32x4::from(other.group0()[1]))),
            // e235, e315, e125, e5
            ((self.group3() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[1]),
                    (self.group2()[1] * other.group0()[1]),
                    (self.group2()[2] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[0]),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       33       47        0
    //  no simd       48       68        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[1])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       61        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       61       78        0
    //  no simd      112      129        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group1()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group1()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group3()[2] * other.group1()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + (swizzle!(self.group0(), 1, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl GeometricProduct<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                        - (self.group1()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1])
                        - (self.group1()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                        - (self.group1()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl GeometricProduct<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       52        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       56       71        0
    //  no simd      113      128        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * swizzle!(other.group0(), 1, 2, 3, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (swizzle!(other.group1(), 3, 2, 0, 3) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    0.0,
                ])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      146        0
    //    simd2       12       12        0
    //    simd3       53       54        0
    //    simd4       45       45        0
    // Totals...
    // yes simd      227      257        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group3()[2] * other.group8()[2]) - (self.group3()[1] * other.group8()[1]) - (self.group3()[0] * other.group8()[0])
                        + (self.group1()[3] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group6()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])),
                    (-(self.group3()[3] * other.group6()[1]) - (self.group3()[1] * other.group0()[1]) + (self.group2()[2] * other.group6()[0])
                        - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group5()[3])),
                    (-(self.group3()[3] * other.group6()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group5()[3])),
                    ((self.group3()[1] * other.group6()[1]) + (self.group3()[0] * other.group6()[0])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[1] * other.group5()[1])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            ((self.group3()[3] * other.group5()[3]) + (self.group3()[3] * other.group0()[1])
                - (self.group3()[2] * other.group7()[2])
                - (self.group3()[1] * other.group7()[1])
                - (self.group3()[0] * other.group7()[0])
                - (self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                + (self.group0()[3] * other[e1])
                - (self.group1()[0] * other.group7()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                - (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group8()[3]]))
                - (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[2]]))
                - (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 1, 0, 0) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + (swizzle!(other.group3(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group8()[3])
                        + (self.group2()[2] * other.group10()[1])
                        + (self.group2()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group8()[3])),
                    ((self.group3()[1] * other.group8()[3])
                        + (self.group2()[2] * other.group8()[0])
                        + (self.group2()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group8()[3])
                        + (self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[2] * other.group8()[3])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[1] * other.group8()[0]) - (self.group0()[0] * other.group8()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 3) * Simd32x4::from([other.group5()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group5())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group5()[3]) - (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group1()[2] * other.group5()[0])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group5()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group6())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group7(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group5()[1]) + (self.group2()[2] * other.group1()[1])
                        - (self.group2()[1] * other.group5()[2])
                        - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group5()[0]) - (self.group2()[2] * other.group1()[0])
                        + (self.group2()[0] * other.group5()[2])
                        + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group5()[0]) + (self.group2()[1] * other.group1()[0])
                        - (self.group2()[0] * other.group5()[1])
                        - (self.group2()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group8())
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group10()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group10()[2]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[1] * other.group10()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            ((self.group3()[2] * other.group4()[2])
                + (self.group3()[1] * other.group4()[1])
                + (self.group3()[0] * other.group4()[0])
                + (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                + (self.group0()[3] * other[e35])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group10())
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group8()[0]) - (self.group3()[0] * other.group8()[1]) - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[2] * other.group8()[0]) + (self.group3()[0] * other.group8()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group3()[2] * other.group8()[1]) - (self.group3()[1] * other.group8()[2]) + (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[2])),
                ])),
        );
    }
}
impl GeometricProduct<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       37        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       27       44        0
    //  no simd       48       65        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group3()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[3])),
                ])),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       64       84        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other[e2]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2]) + (self.group0()[0] * other[e2])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group3()[0] * other.group0()[1]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]])) + (self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group2()[1] * other.group0()[0])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]))),
        );
    }
}
impl GeometricProduct<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[scalar])),
        );
    }
}
impl GeometricProduct<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       31       45        0
    //  no simd       64       84        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group0())
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) + (self.group0()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[3])),
                ])),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4       47       47        0
    // Totals...
    // yes simd       99      115        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(self.group2(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group3(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 1) * Simd32x4::from([other.group1()[2], other.group3()[1], other.group3()[2], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(other.group2(), 3, 2, 0, 3) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group3()[1]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[0], other.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[2]) + (self.group1()[0] * other.group1()[3])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group0()[0]) - (self.group0()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4       42       42        0
    // Totals...
    // yes simd      114      130        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 1, 1, 3) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
