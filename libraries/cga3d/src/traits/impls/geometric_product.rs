// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        12      24       0
//  Average:        25      38       0
//  Maximum:       392     450       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        28      45       0
//  Average:        57      72       0
//  Maximum:       992    1024       0
impl std::ops::Div<geometric_product> for AntiCircleRotor {
    type Output = geometric_product_partial<AntiCircleRotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       58        0
    //    simd3        0        9        0
    //    simd4       17        9        0
    // Totals...
    // yes simd       54       76        0
    //  no simd      105      121        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zx().with_zw(self[scalar], self[scalar]) * other.group0().yzz().with_w(other[scalar]))
                + (self.group2().ww().with_zw(self[e31], self[e45]) * other.group0().xyx().with_w(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                + (self.group2().ww().with_zw(self[e31], other[e35]) * other.group1().xyx().with_w(self[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e41])
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       69        0
    //    simd3        0       12        0
    //    simd4       27       15        0
    // Totals...
    // yes simd       68       96        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().with_zw(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e15] * other[e423])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e25] * other[e431]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[scalar] * other[e415]),
                (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e25]]) * self.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e15]]) * self.group0().xxy().with_w(other[e423]))
                + (self.group2().zxyz() * other.group0().yzx().with_w(other[e412]))
                + (other.group1().yzxw() * self.group1().zxy().with_w(self[scalar]))
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e5]]) * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).with_w(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxy().with_w(self[scalar]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(self[e43] * other[e3])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e425])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e43] * other[e435])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e23] * other[e423])
                - (other.group2().www() * self.group2().xyz()).with_w(self[e31] * other[e431]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0().with_w(self[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(self[e45] * other[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().with_zw(other[e3215], (self[e45] * other[e3215]) + (self[scalar] * other[e3215]))
                * self.group0().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       20        0
    //    simd3        0        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       34       49        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().with_w(self[scalar])) + Simd32x3::from(0.0).with_w(-(self[e42] * other[e315]) - (self[e43] * other[e125]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e31] * other[e315]) - (self[e12] * other[e125]),
            ]) - (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       42        0
    //    simd3        0        2        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       37       54        0
    //  no simd       73       88        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e42] * other[e3],
                self[e43] * other[e1],
                self[e41] * other[e2],
                -(self[e43] * other[e125]) - (self[e45] * other[e321]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e43] * other[e315],
                self[e42] * other[e5],
                self[e43] * other[e5],
                -(self[e43] * other[e125]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e321]]) * self.group0().xxy().with_w(self[scalar]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e5]]) * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]) - (self[e42] * other[e125]) - (self[e31] * other[e3]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]) - (self[e43] * other[e235]) - (self[e12] * other[e1]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]) - (self[e41] * other[e315]) - (self[e23] * other[e2]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       44        0
    //    simd3        0        5        0
    //    simd4        7        2        0
    // Totals...
    // yes simd       30       51        0
    //  no simd       51       67        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e31],
                self[e41] * other[e12],
                self[e42] * other[e23],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e42] * other[e35]) - (self[e31] * other[e12]),
                -(self[e43] * other[e15]) - (self[e12] * other[e23]),
                -(self[e41] * other[e25]) - (self[e23] * other[e31]),
                0.0,
            ]) + (self.group1().zx().with_zw(self[scalar], other[e35]) * other.group0().yzz().with_w(self[e43]))
                + (self.group2().ww().with_zw(self[e31], other[e25]) * other.group0().xyx().with_w(self[e42]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e15]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                self[e43] * other[e12] * -1.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(self[e41] * other[e23])
                - (other.group1().zxy() * self.group1().yzx()).with_w(self[e42] * other[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e45] * other[e23]),
                (self[e43] * other[e15]) + (self[e45] * other[e31]),
                (self[e41] * other[e25]) + (self[e45] * other[e12]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e23]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd3        0        4        0
    //    simd4       12        8        0
    // Totals...
    // yes simd       40       57        0
    //  no simd       76       89        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e31],
                self[e42] * other[scalar],
                self[e43] * other[scalar],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) + (other.group0().wzxw() * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * other[e23]) - (self[e42] * other[e35]) - (self[e31] * other[e12]),
                (self[scalar] * other[e31]) - (self[e43] * other[e15]) - (self[e12] * other[e23]),
                (self[scalar] * other[e12]) - (self[e41] * other[e25]) - (self[e23] * other[e31]),
                0.0,
            ]) + (self.group1().zyzw() * other.group0().ywww())
                + (other.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (self.group1().xxy() * other.group0().wzx()).with_w(self[e43] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[scalar] * other[e25]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35]),
                self[e43] * other[e12] * -1.0,
            ]) - (other.group0().zxyy() * self.group2().yzx().with_w(self[e42]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            (other.group1().zxyw() * self.group0().yzx().with_w(self[e45]))
                + Simd32x3::from(0.0).with_w(-(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                + (self.group1().www() * other.group0().xyz()).with_w(self[scalar] * other[e3215])
                - (other.group1().ywwy() * self.group0().zyz().with_w(self[e31]))
                - (other.group1().wzxx() * self.group0().xxy().with_w(self[e23])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       17        0
    //    simd3        1        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        9       25        0
    //  no simd       29       47        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e41] * other[e5], self[e42] * other[e5], self[e43] * other[e5], -(self[e31] * other[e2]) - (self[e12] * other[e3])])
                - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([self[e25] * other[e3] * -1.0, self[e35] * other[e1] * -1.0, self[e15] * other[e2] * -1.0, self[e43] * other[e3]])
                + (other.group0().yzxy() * self.group2().zxy().with_w(self[e42]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * other[e1],
                self[scalar] * other[e2],
                self[scalar] * other[e3],
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e45]))
                + (other.group0().yzxw() * self.group1().zxy().with_w(self[scalar]))
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiCircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * self.group2(),
        );
    }
}
impl GeometricProduct<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       58        0
    //    simd3        0       12        0
    //    simd4       15        4        0
    // Totals...
    // yes simd       49       74        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (self.group0().xyx() * other.group1().wwy()).with_w(self[e41] * other[e235])
                - (self.group0().yzz() * other.group1().zxw()).with_w(self[e42] * other[e315])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e43] * other[e125])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e15] * other[e423]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group2().zxyy() * other.group0().yzx().with_w(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e423])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e35] * other[e412])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e235])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e425]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       64        0
    //    simd3        0       10        0
    //    simd4       17        7        0
    // Totals...
    // yes simd       54       81        0
    //  no simd      105      122        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e42] * other[e12345]) + (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e12345]]) * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().xyx() * other.group1().wwy()).with_w(self[e41] * other[e235])
                - (self.group0().yzz() * other.group1().zxw()).with_w(self[e42] * other[e315])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e43] * other[e125])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e45] * other[e12345] * -1.0])
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e35]]) * self.group1().xxy().with_w(other[e412]))
                + (self.group2().zxyy() * other.group0().yzx().with_w(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e423])
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e321])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[scalar] * other[e235]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e321])
                    + (self[e25] * other[e12345])
                    + (self[scalar] * other[e315]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e321])
                    + (self[e35] * other[e12345])
                    + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e425]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       57        0
    //    simd3        0       11        0
    //    simd4       15        5        0
    // Totals...
    // yes simd       49       73        0
    //  no simd       94      110        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[scalar] * other[e42]),
                (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e42] * other[e25])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e43] * other[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e15])
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e25])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e43] * other[e35])
                - (self.group2().yzxy() * other.group0().zxy().with_w(other[e42]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) - (other.group1().zxwz() * self.group2().yzz().with_w(self[e43]))
                - (other.group1().wwyy() * self.group2().xyx().with_w(self[e42]))
                - (other.group2().zxy() * self.group1().yzx()).with_w(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e45] * other[e23]) + (self[e35] * other[e42]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e45] * other[e31]) + (self[e15] * other[e43]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e25] * other[e41]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e31] * other[e25]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       74        0
    //    simd3        0       13        0
    //    simd4       26       13        0
    // Totals...
    // yes simd       71      100        0
    //  no simd      149      165        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e41] * other[e4125]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42]),
                (self[e42] * other[e4235]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e42] * other[e25])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e43] * other[e35])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e15] * other[e1234]) + (self[scalar] * other[e23]),
                (self[e45] * other[e4315]) + (self[e25] * other[e1234]) + (self[scalar] * other[e31]),
                (self[e45] * other[e4125]) + (self[e35] * other[e1234]) + (self[scalar] * other[e12]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (other.group1().yzxw() * self.group1().zxy().with_w(self[scalar]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e43] * other[e35])
                - (self.group2().yzxy() * other.group0().zxy().with_w(other[e42]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group1().xxy().with_w(self[scalar]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (other.group1().zw().with_zw(other[e4235], other[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e35]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e45] * other[e3215])
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e15] * other[e4235])
                + (self.group1().www() * other.group1().xyz()).with_w(self[scalar] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e12] * other[e35])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e15] * other[e23]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        7       32        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e45] * other[e12345] * -1.0),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1()) + (self.group2() * other.group0().yy().with_zw(other[e12345], other[e5])),
            // e1, e2, e3, e4
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        0        5        0
    //    simd4        6        3        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       33       48        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * other[e35] * -1.0,
                self[e43] * other[e15] * -1.0,
                self[e41] * other[e25] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[scalar]) * other.group0().xyz()).with_w(0.0)
                + (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group2().xyz()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricProduct<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd3        0        5        0
    //    simd4       16       11        0
    // Totals...
    // yes simd       31       45        0
    //  no simd       79       88        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e4315],
                self[e42] * other[e45],
                self[e43] * other[e45],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w((self[scalar] * other[e45]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                + (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35])
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[scalar] * other[e35]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e41] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group2().wwwz() * other.group1().xyzz())
                + Simd32x3::from(0.0).with_w(self[scalar] * other[e3215])
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e35])),
        );
    }
}
impl GeometricProduct<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       46        0
    //    simd3        0        6        0
    //    simd4        7        1        0
    // Totals...
    // yes simd       29       53        0
    //  no simd       50       68        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e41] * other[e435],
                self[e42] * other[e415],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[scalar] * other[e425]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[scalar] * other[e435]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[scalar] * other[e125]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e315], self[e41] * other[e125], self[e42] * other[e235], self[e43] * other[e435] * -1.0])
                - (other.group0() * self.group1().www()).with_w(self[e42] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       53        0
    //    simd3        0        4        0
    //    simd4       10        6        0
    // Totals...
    // yes simd       42       63        0
    //  no simd       72       89        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e42] * other[e12345],
                self[e43] * other[e12345],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (other.group0().wzxw() * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[scalar] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) - (other.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (self.group1().xxyw() * other.group1().wzxw())
                + (other.group1().ywww() * self.group1().zyz().with_w(self[scalar]))
                - (self.group1().yzxx() * other.group1().zxyx())
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]),
                self[e43] * other[e435] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       77        0
    //    simd2       10       10        0
    //    simd3       40       60        0
    //    simd4       35       19        0
    // Totals...
    // yes simd      125      166        0
    //  no simd      320      353        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0]) + (Simd32x2::from(self[scalar]) * other.group0())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxy().with_w(self[scalar]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (other.group7().zxy() * self.group2().yzx()).with_w(self[e43] * other[e3])
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e41] * other[e415])
                - (other.group7().yzx() * self.group2().zxy()).with_w(self[e42] * other[e425])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e435])
                - (self.group1().www() * other.group6().xyz()).with_w(self[e23] * other[e423])
                - (other.group1().www() * self.group2().xyz()).with_w(self[e31] * other[e431]),
            // e5
            (self[e45] * other[e5]) + (self[scalar] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[scalar] * other[e15]),
                (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e15] * other[e4315]) + (self[scalar] * other[e35]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e35]]) * self.group1().zyz().with_w(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e25]]) * self.group1().xxy().with_w(self[e42]))
                + (other.group3() * self.group1().www().with_w(self[scalar]))
                + (other.group5().yzx() * self.group2().zxy()).with_w(self[e41] * other[e15])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group2().xxy().with_w(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group2().zyz().with_w(self[e23]))
                - (self.group2().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e25] * other[e42]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group4().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group4().xyx())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().xxy() * self.group1().wzx())
                - (other.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().xyz())
                + (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group5().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group5().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group4().yzx() * self.group2().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[scalar] * other[e415]),
                (self[e23] * other[e435]) + (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e31] * other[e415]) + (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().with_w(other[e431]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().with_w(other[e412]))
                + (other.group0().yy().with_zw(other[e12345], other[e423]) * self.group1().xyz().with_w(self[e15]))
                + (other.group7().yzx() * self.group2().zxy()).with_w(self[scalar] * other[e321])
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e45] * other[e12345])
                - (other.group7().zxy() * self.group2().yzx()).with_w(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group7().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group7().xyx())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (other.group7().xxy() * self.group1().wzx())
                - (other.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group8().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e45]]) * other.group8())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (other.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group1().zyz().with_w(self[scalar]))
                + (other.group5() * self.group1().www()).with_w(self[e25] * other[e4315])
                + (self.group0().yzx() * other.group3().zxy()).with_w(self[e45] * other[e3215])
                + (other.group4().yzx() * self.group2().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e25]]) * self.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e15]]) * self.group0().xxy().with_w(other[e23]))
                - (self.group1().yzxx() * other.group9().zxy().with_w(other[e15]))
                - (self.group2().yzxz() * other.group4().zxy().with_w(other[e12])),
            // e1234
            (self[scalar] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       29       44        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[scalar] * other[e3215]),
            ]) + (self.group1().zxyw() * other.group0().yzxw())
                + (self.group2().wwwx() * other.group0().xyzx()),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd3        2        4        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       43       56        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyz().with_w(self[e41]))
                + (other.group0().yzxy() * self.group2().zxy().with_w(self[e42]))
                + Simd32x3::from(0.0).with_w((self[e43] * other[e3]) + (self[scalar] * other[e4]))
                - (other.group0().zxyw() * self.group2().yzx().with_w(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([self[scalar] * other[e1], self[scalar] * other[e2], self[scalar] * other[e3], self[e35] * other[e3] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e45]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[scalar] * other[e5])
                - (self.group2().xyzy() * other.group0().wwwy())
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<Scalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       27        0
    //    simd3        2        4        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       40       55        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e25] * other[e4125],
                self[e35] * other[e4235],
                self[e15] * other[e4315],
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) + (other.group0().www() * self.group1().xyz()).with_w(self[scalar] * other[e1234])
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e35] * other[e4125]) + (self[scalar] * other[e3215]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().xyzx())
                + (self.group1().zxyw() * other.group0().yzxw())
                + (self.group2().wwwy() * other.group0().xyzy()),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       75        0
    //    simd3        0       11        0
    //    simd4       28       17        0
    // Totals...
    // yes simd       76      103        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412]),
                -(self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e2], other[e12345]]) * self.group0().xxx().with_w(self[scalar]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().with_zw(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e425])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[scalar] * other[e415]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group1().zyz().with_w(self[scalar]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e25] * other[e431])
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e43] * other[e125])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e23] * other[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[scalar] * other[e235]),
                (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[scalar] * other[e315]),
                (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[scalar] * other[e125]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (self.group1().xxyw() * other.group2().wzxw())
                + (other.group2().ywww() * self.group1().zyz().with_w(self[scalar]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).with_w(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[scalar] * other[e1]),
                (self[e35] * other[e423]) + (self[scalar] * other[e2]),
                (self[e15] * other[e431]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group1().zyz().with_w(self[scalar]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e42] * other[e2])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group2().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group2().xxy().with_w(self[e23]))
                - (other.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e42] * other[e425]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       73        0
    //    simd3        0        9        0
    //    simd4       28       19        0
    // Totals...
    // yes simd       76      101        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e42] * other[scalar]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42]),
                (self[e43] * other[scalar]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[scalar]]) * self.group0().xxy().with_w(self[scalar]))
                - (self.group1().wwwx() * other.group0().xyz().with_w(other[e23]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[scalar] * other[e23]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[scalar] * other[e31]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[scalar] * other[e12]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * other.group3().xyz()).with_w(self[scalar] * other[e45])
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e4315]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e4235])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e12] * other[e4125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15]),
                (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[scalar] * other[e25]),
                (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group1().xxy().with_w(self[scalar]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (other.group1().zw().with_zw(other[e4235], other[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group2().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e45] * other[e3215])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e35] * other[e4125])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * other.group3().zxy().with_w(other[e35]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiDipoleInversion {
    type Output = geometric_product_partial<AntiDipoleInversion>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       65        0
    //    simd3        0        8        0
    //    simd4       27       19        0
    // Totals...
    // yes simd       68       92        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e42] * self[e315])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[scalar] * self[e415]),
                (other[e25] * self[e4]) + (other[scalar] * self[e425]),
                (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (self.group1().zxyw() * other.group1().yzx().with_w(other[scalar]))
                + (self.group2().zx().with_zw(self[e5], self[e315]) * other.group0().yzz().with_w(other[e42]))
                + (self.group3().ww().with_zw(self[e315], self[e235]) * other.group0().xyx().with_w(other[e41]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e43] * self[e125])
                - (other.group1().wwwx() * self.group3().xyzx())
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[scalar] * self[e235],
                other[scalar] * self[e315],
                other[scalar] * self[e125],
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxxz())
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * other.group2().zzyw())
                + (self.group2().zx().with_zw(self[e5], self[e2]) * other.group1().yzz().with_w(other[e25]))
                + (self.group3().ww().with_zw(self[e315], self[e1]) * other.group1().xyx().with_w(other[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().with_w(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * other.group2().xxx().with_w(other[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[scalar] * self[e1]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[scalar] * self[e2]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (self.group2().yzxw() * other.group0().zxy().with_w(other[e45]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[scalar] * self[e4])
                - (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                - (self.group2().zx().with_zw(self[e5], self[e1]) * other.group0().yzz().with_w(other[e41]))
                - (self.group3().ww().with_zw(self[e315], self[e415]) * other.group0().xyx().with_w(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd3        0       10        0
    //    simd4       44       35        0
    // Totals...
    // yes simd       77      100        0
    //  no simd      209      225        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e4] * self[e1]) - (other[e3] * self[e431]),
                -(other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e4] * self[e2]) - (other[e1] * self[e412]),
                -(other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e4] * self[e435]) - (other[e4] * self[e3]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e125]]) * self.group0().xxx().with_w(other[e412]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e315]]) * self.group0().zzz().with_w(self[e431]))
                + (other.group1().zw().with_zw(other[e1], other[e235]) * self.group0().yyy().with_w(self[e423]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e431] * self[e315])
                + (self.group2().www() * other.group3().xyz()).with_w(other[e125] * self[e412])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321]))
                - (self.group1().zx().with_zw(self[e2], self[e5]) * other.group0().yzx().with_w(other[e4]))
                - (self.group3().zx().with_zw(self[e321], self[e4]) * other.group0().yzz().with_w(other[e5])),
            // e23, e31, e12, e45
            (other.group3().zxyw() * self.group3().yzx().with_w(self[e4]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], self[e1]]) * self.group0().zyz().with_w(other[e415]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e125]]) * self.group0().xxy().with_w(self[e412]))
                - (other.group2() * self.group2().www().with_w(self[e5]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (other.group3().xyxy() * self.group1().ww().with_zw(self[e2], self[e425]))
                - (other.group3().yzzz() * self.group3().zx().with_zw(self[e321], self[e435]))
                - (self.group2().zx().with_zw(self[e5], other[e315]) * other.group0().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], other[e235]) * other.group0().xyx().with_w(self[e423]))
                - (other.group2().www() * self.group2().xyz()).with_w(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e125] * self[e415]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e315] * self[e1]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().with_w(other[e431]))
                + (self.group3().xyzz() * other.group3().www().with_w(other[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * other.group2().xxx().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).with_w(other[e412] * self[e435])
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e321]]) * other.group2().yxxw())
                - (self.group2().zx().with_zw(self[e5], other[e2]) * other.group1().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], other[e1]) * other.group1().xyx().with_w(self[e423]))
                - (other.group1().www() * self.group2().xyz()).with_w(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e125]]) * self.group0().zyz().with_w(other[e435]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e315]]) * self.group0().xxy().with_w(other[e425]))
                + (other.group3().yzxy() * self.group1().zxy().with_w(self[e315]))
                + (self.group1().xyzz() * other.group1().www().with_w(other[e125]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group2().wwwx() * other.group2().xyz().with_w(other[e1]))
                + (self.group1().ww().with_zw(self[e2], self[e415]) * other.group1().xyx().with_w(other[e235]))
                + (self.group3().zx().with_zw(self[e321], self[e425]) * other.group1().yzz().with_w(other[e315]))
                - (self.group3().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group2().zx().with_zw(self[e5], self[e1]) * other.group0().yzz().with_w(other[e235]))
                - (self.group3().ww().with_zw(self[e315], self[e5]) * other.group0().xyx().with_w(other[e321]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e315] * self[e2]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       11        0
    //  no simd       15       30        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group0().with_w(self[e4]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e4])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([self[e235] * other[scalar], self[e315] * other[scalar], self[e125] * other[scalar], 0.0])
                + (other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group1().xyz().with_w(self[e5]))
                - (Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group3().xyz())).with_w(self[e4] * other[scalar]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        5        6        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       17       25        0
    //  no simd       48       61        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) - (self[e321] * other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e431] * other[e125], self[e412] * other[e235], self[e423] * other[e315], 0.0])
                - (other.group0().xyzy() * self.group2().www().with_w(self[e431]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) + (self.group1().yzx() * other.group0().zxy()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group2().xyz())
                - (self.group1().zxy() * other.group0().yzx())
                - (self.group3().yzx() * other.group0().zxy()))
            .with_w(self[e4] * other[e321]),
            // e4235, e4315, e4125, e3215
            (self.group1().xyzy() * other.group0().wwwy())
                + (other.group0().xyzz() * self.group2().www().with_w(self[e435]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w(-(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd3        0        6        0
    //    simd4       22       16        0
    // Totals...
    // yes simd       46       60        0
    //  no simd      112      120        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w((self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]))
                + (self.group2().www() * other.group1().xyz()).with_w(self[e412] * other[e125])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e321] * other[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e3], self[e3] * other[e1], self[e1] * other[e2], 0.0]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group3().xxy().with_w(self[e425]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group3().zyz().with_w(self[e435]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e412] * other[e125])
                - (self.group2().www() * other.group0().xyz()).with_w(self[e415] * other[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e1]),
                (self[e321] * other[e315]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e2]),
                (self[e321] * other[e125]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (other.group0().zxyw() * self.group1().yzx().with_w(self[e4]))
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group1().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group1().xxy().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwx() * other.group0().xyz().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e3] * other[e125]) - (self[e5] * other[e321]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e2] * other[e315]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       48        0
    //    simd3        0        5        0
    //    simd4       12        7        0
    // Totals...
    // yes simd       38       60        0
    //  no simd       74       91        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]),
                (self[e423] * other[e12]) + (self[e4] * other[e31]),
                (self[e431] * other[e23]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]),
                -(self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e2] * other[e35],
                self[e415] * other[e35],
                self[e1] * other[e25],
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group1().yxx().with_w(other[e35]))
                + (self.group2().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e25]))
                + (self.group3().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzz().with_w(other[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().with_w(other[e12]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * other.group1().xxx().with_w(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                self[e412] * other[e12] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e23])
                - (other.group0().zxy() * self.group3().yzx()).with_w(self[e431] * other[e31]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       58        0
    //    simd3        0        9        0
    //    simd4       18        9        0
    // Totals...
    // yes simd       50       76        0
    //  no simd      104      121        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]),
                (self[e431] * other[scalar]) + (self[e4] * other[e31]),
                (self[e412] * other[scalar]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) + (self.group0().xxy() * other.group0().wzx()).with_w(self[e4] * other[e3215])
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e4] * other[e25]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e4] * other[e35]),
                -(self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (other.group1().ywww() * self.group0().zyz().with_w(self[e4]))
                + (self.group0().xxy() * other.group1().wzx()).with_w(self[e321] * other[scalar])
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (other.group0().ywww() * self.group2().zyz().with_w(self[e5]))
                + (other.group1().ywwy() * self.group1().zyz().with_w(self[e2]))
                + (other.group1().wzxx() * self.group1().xxy().with_w(self[e1]))
                + (self.group2().xxy() * other.group0().wzx()).with_w(self[e3] * other[e35])
                - (self.group1().yzxx() * other.group1().zxyx())
                - (self.group1().wwwy() * other.group1().xyzy())
                - (other.group1().wzxw() * self.group3().xxy().with_w(self[e321]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e435] * other[e35])
                - (self.group3().zyz() * other.group1().yww()).with_w(self[e235] * other[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e431] * other[e3215]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e412] * other[e3215]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e412] * other[e12] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).with_w(self[e4] * other[scalar])
                - (other.group0().zxyy() * self.group3().yzx().with_w(self[e431]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e23]),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       48       63        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(self[e3] * other[e3])
                - (other.group0().zxyw() * self.group0().yzx().with_w(self[e4])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group3().yzx().with_w(self[e4]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().yzxz() * self.group3().zxy().with_w(self[e435]))
                - (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]),
                0.0,
            ]) - (other.group0().xyzz() * self.group3().www().with_w(self[e412]))
                - (other.group0().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (other.group0().wwwx() * self.group1().xyz().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e3] * -1.0,
                self[e435] * other[e1] * -1.0,
                self[e415] * other[e2] * -1.0,
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e321]))
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiDipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       51        0
    //    simd3        0       13        0
    //    simd4       26       15        0
    // Totals...
    // yes simd       56       79        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e3] * other[e431]),
                -(self[e415] * other[e412]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]),
                -(self[e425] * other[e423]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e125])
                + (other.group0().zxy() * self.group3().yzx()).with_w(self[e235] * other[e423])
                - (other.group1().yzxw() * self.group0().zxy().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group2().yzxy() * other.group0().zxy().with_w(other[e431]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e412])
                - (self.group3().xyzz() * other.group1().wwwz())
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e2]))
                - (self.group2().zx().with_zw(self[e5], other[e125]) * other.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], other[e315]) * other.group0().xyx().with_w(self[e431]))
                - (other.group2() * self.group2().www()).with_w(self[e1] * other[e415])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e423] * other[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e235] * other[e321]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]) + (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], other[e435]]) * other.group2().zzz().with_w(self[e412]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], other[e425]]) * other.group2().yyy().with_w(self[e431]))
                + (self.group1().wz().with_zw(self[e2], other[e415]) * other.group2().xxx().with_w(self[e423]))
                + (self.group2().yzx() * other.group1().zxy()).with_w(self[e415] * other[e423]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyzy() * self.group1().www().with_w(self[e315]))
                + (other.group1().yzxz() * self.group3().zxy().with_w(self[e125]))
                + (other.group1().wwwx() * self.group1().xyz().with_w(self[e235]))
                + (other.group2() * self.group2().www()).with_w(self[e435] * other[e125])
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e235])
                + (other.group0().zxy() * self.group2().yzx()).with_w(self[e425] * other[e315])
                - (self.group3().yzxw() * other.group1().zxyw())
                - (self.group2().zx().with_zw(self[e5], self[e3]) * other.group0().yzz().with_w(other[e125]))
                - (self.group3().ww().with_zw(self[e315], self[e2]) * other.group0().xyx().with_w(other[e315]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e1] * other[e235]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       64        0
    //    simd3        0       11        0
    //    simd4       29       18        0
    // Totals...
    // yes simd       62       93        0
    //  no simd      149      169        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e3] * other[e431]),
                -(self[e431] * other[e12345]) - (self[e415] * other[e412]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e125])
                + (other.group0().zxy() * self.group3().yzx()).with_w(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxy().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1] * other[e321] * -1.0, self[e2] * other[e321] * -1.0, self[e3] * other[e321] * -1.0, self[e321] * other[e12345]])
                + (self.group2().yzxy() * other.group0().zxy().with_w(other[e431]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e425]]) * self.group1().zyz().with_w(self[e2]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e415]]) * self.group1().xxy().with_w(self[e1]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zx().with_zw(self[e5], other[e125]) * other.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], other[e315]) * other.group0().xyx().with_w(self[e431]))
                - (self.group2().www() * other.group2().xyz()).with_w(self[e3] * other[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]) + (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e431] * other[e425])
                + (self.group3().zxy() * other.group2().yzx()).with_w(self[e415] * other[e423])
                - (other.group2().yzxw() * self.group1().zxy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e3] * other[e425], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345] * -1.0])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group3().xxy().with_w(self[e125]))
                + (self.group1().xyzz() * other.group1().www().with_w(other[e125]))
                + (self.group2().wwwy() * other.group2().xyz().with_w(other[e425]))
                + (other.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(self[e425] * other[e315])
                - (self.group3().yzxw() * other.group1().zxyw())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group2().zx().with_zw(self[e5], other[e125]) * other.group0().yzz().with_w(self[e3]))
                - (self.group3().ww().with_zw(self[e315], other[e315]) * other.group0().xyx().with_w(self[e2])),
        );
    }
}
impl GeometricProduct<Dipole> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       66        0
    //    simd3        0       12        0
    //    simd4       24       12        0
    // Totals...
    // yes simd       62       90        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e3] * other[e42]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e1] * other[e43]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e2] * other[e41]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e25])
                - (other.group0().zxy() * self.group3().yzx()).with_w(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e415] * other[e12]) + (self[e4] * other[e25]),
                (self[e425] * other[e23]) + (self[e4] * other[e35]),
                -(self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (self.group2().zx().with_zw(self[e5], self[e125]) * other.group0().yzz().with_w(other[e43]))
                + (self.group3().ww().with_zw(self[e315], self[e315]) * other.group0().xyx().with_w(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e41])
                - (self.group3().xyzx() * other.group1().wwwx())
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e5] * other[e23],
                self[e5] * other[e31],
                self[e5] * other[e12],
                -(self[e125] * other[e12]) - (self[e5] * other[e45]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e1]]) * other.group2().yxx().with_w(other[e15]))
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e2]]) * other.group2().zzy().with_w(other[e25]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e3] * other[e35])
                - (Simd32x4::from(other[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (self.group2().xyxx() * other.group1().wwyx())
                - (self.group2().yzzy() * other.group1().zxwy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e4] * other[e45])
                - (self.group2().zx().with_zw(self[e5], other[e12]) * other.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], other[e31]) * other.group0().xyx().with_w(self[e431]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e1] * other[e41])
                - (other.group1().www() * self.group1().xyz()).with_w(self[e415] * other[e41]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd3        0       13        0
    //    simd4       44       32        0
    // Totals...
    // yes simd       77      104        0
    //  no simd      209      226        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]),
                (self[e425] * other[e1234]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]) + (self[e3] * other[e1234]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e31], other[e4125], other[e4235], other[e4235]]) * self.group0().zxy().with_w(self[e1]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (self.group1().zx().with_zw(self[e2], other[e1234]) * other.group0().yzx().with_w(self[e5]))
                + (self.group0().xxy() * other.group1().wzx()).with_w(self[e4] * other[e3215])
                + (other.group0().xyx() * self.group1().wwy()).with_w(self[e3] * other[e4125])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35])
                - (other.group0().zxy() * self.group3().yzx()).with_w(self[e235] * other[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from(self[e4]) * other.group2().xyz().with_w(other[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().with_w(other[e41]))
                + (self.group1().zxyy() * other.group1().yzx().with_w(other[e4315]))
                + (self.group2().zx().with_zw(self[e5], other[e4235]) * other.group0().yzz().with_w(self[e415]))
                + (self.group3().ww().with_zw(self[e315], self[e125]) * other.group0().xyx().with_w(other[e43]))
                + (other.group2().www() * self.group2().xyz()).with_w(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group3().zyzz())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e31], other[e4235], other[e23], other[e15]]) * self.group2().zzy().with_w(self[e1]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxy() * other.group2().zxyy())
                + (self.group3().wwwz() * other.group1().xyz().with_w(other[e35]))
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e45]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e12]]) * self.group3().zyz().with_w(self[e125]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e31]]) * self.group3().xxy().with_w(self[e315]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().with_zw(other[e4235], other[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group2().zx().with_zw(self[e5], other[e31]) * other.group0().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], other[e4235]) * other.group0().xyx().with_w(self[e423]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e415] * other[e41])
                - (other.group2().www() * self.group2().xyz()).with_w(self[e412] * other[e4125]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd3        2        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       14       36        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().with_zw(other[e12345], other[e5]) * self.group0().with_w(self[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e415] * other[e12345]),
                -(self[e431] * other[e5]) - (self[e425] * other[e12345]),
                -(self[e412] * other[e5]) - (self[e435] * other[e12345]),
                (self[e321] * other[e12345]) + (self[e4] * other[e5]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group3().xyz()) - (Simd32x3::from(other[e5]) * self.group1().xyz()) - (Simd32x3::from(other[e12345]) * self.group2().xyz()))
                .with_w(self[e4] * other[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1] * other[e12345], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e321])),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd3        3        4        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       17       27        0
    //  no simd       47       62        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]),
                self[e412] * other[e35] * -1.0,
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e235, e315, e125, e5
            (self.group3().yzxy() * other.group0().zxyy()) + (other.group0().yzxx() * self.group1().zxy().with_w(self[e1])) + Simd32x3::from(0.0).with_w(self[e3] * other[e35])
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy())
                - (self.group3().zxyw() * other.group0().yzxw())
                - (other.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[e4] * other[e45]),
        );
    }
}
impl GeometricProduct<Flector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        0        4        0
    //    simd4       24       20        0
    // Totals...
    // yes simd       37       55        0
    //  no simd      109      123        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxy().with_w(self[e4]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().with_w(self[e1]))
                + (other.group1().xyzy() * self.group2().www().with_w(self[e2]))
                + Simd32x3::from(0.0).with_w((self[e3] * other[e4125]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3] * other[e4315] * -1.0, self[e2] * other[e45] * -1.0, self[e3] * other[e45] * -1.0, 0.0])
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (other.group1().zxyw() * self.group3().yzx().with_w(self[e4]))
                + (self.group2().www() * other.group0().xyz()).with_w(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group3().xxy().with_w(self[e412]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group2().yzxz() * other.group1().zxyz())
                + (self.group3().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group2().xxy().with_w(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group2().zyz().with_w(self[e321]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group3().xxyw())
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e4] * other[e15]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e4] * other[e25]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e4] * other[e35]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxy().with_w(self[e4]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e4235]),
        );
    }
}
impl GeometricProduct<Line> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       46        0
    //    simd3        0        8        0
    //    simd4       13        5        0
    // Totals...
    // yes simd       39       59        0
    //  no simd       78       90        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e4] * other[e415]),
                -(self[e423] * other[e435]) - (self[e4] * other[e425]),
                -(self[e431] * other[e415]) - (self[e4] * other[e435]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (other.group1() * self.group2().www()).with_w(self[e412] * other[e125])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) - (self[e435] * other[e315]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e321] * other[e125]) - (self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], other[e435]]) * other.group1().yyy().with_w(self[e412]))
                + (self.group1().wz().with_zw(self[e2], other[e425]) * other.group1().xxx().with_w(self[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(self[e423] * other[e415]),
            // e4235, e4315, e4125, e3215
            (self.group1().ww().with_zw(self[e2], self[e315]) * other.group0().xyx().with_w(other[e425]))
                + (self.group3().zx().with_zw(self[e321], self[e125]) * other.group0().yzz().with_w(other[e435]))
                + Simd32x3::from(0.0).with_w((self[e425] * other[e315]) + (self[e435] * other[e125]) - (self[e3] * other[e125]))
                + (other.group1() * self.group2().www()).with_w(self[e415] * other[e235])
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e235] * other[e415])
                - (self.group3().yzxy() * other.group0().zxy().with_w(other[e315]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e1] * other[e235]),
        );
    }
}
impl GeometricProduct<Motor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       46        0
    //    simd3        0        9        0
    //    simd4       21       12        0
    // Totals...
    // yes simd       48       67        0
    //  no simd      111      121        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e4] * other[e415]),
                -(self[e431] * other[e12345]) - (self[e4] * other[e425]),
                -(self[e412] * other[e12345]) - (self[e4] * other[e435]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235])
                - (self.group0().xxy() * other.group0().wzx()).with_w(self[e4] * other[e5]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * other[e435] * -1.0)
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5])
                - (other.group0().ywwx() * self.group1().zyz().with_w(self[e1]))
                - (other.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).with_w(self[e412] * other[e125])
                - (self.group2().www() * other.group1().xyz()).with_w(self[e2] * other[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                0.0,
            ]) + (other.group0().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e425])
                - (self.group1().xxy() * other.group1().wzx()).with_w(self[e4] * other[e12345]),
            // e4235, e4315, e4125, e3215
            (other.group1() * self.group2().www().with_w(self[e321]))
                + (self.group1().wwwz() * other.group0().xyz().with_w(other[e125]))
                + (other.group0().ywwy() * self.group3().zyz().with_w(self[e315]))
                + (other.group0().wzxx() * self.group3().xxy().with_w(self[e235]))
                + (other.group1().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (other.group1().wzxx() * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e125] * other[e435]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]))
                - (self.group3().yzxy() * other.group0().zxy().with_w(other[e315]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       98        0
    //    simd2        6        6        0
    //    simd3       56       73        0
    //    simd4       52       39        0
    // Totals...
    // yes simd      174      216        0
    //  no simd      448      485        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e5] * other[e4]),
                (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e423], other[e3215]]) * self.group2().xw())
                - (Simd32x2::from([other[e5], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3().xyz().with_w(self[e4]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e415]]) * self.group2().xyz().with_w(other[e41]))
                - (self.group2().zx().with_zw(self[e5], other[e31]) * other.group4().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], other[e4235]) * other.group4().xyx().with_w(self[e423]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e423] * other[e23])
                - (other.group5().zxy() * self.group3().yzx()).with_w(self[e431] * other[e4315]),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e1] * other[e5], self[e2] * other[e5], self[e3] * other[e5], self[e5] * other[e4] * -1.0])
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group8().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group8().yyy().with_w(other[e423]))
                + (self.group2().yzxw() * other.group6().zxy().with_w(other[e5]))
                + (self.group1().wz().with_zw(self[e2], self[e321]) * other.group8().xxx().with_w(other[e12345]))
                + (self.group2().yzx() * other.group1().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([self[e435], self[e3], self[e425], other[e315]]) * other.group8().yxx().with_w(self[e431]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], other[e125]]) * other.group8().zzy().with_w(self[e412]))
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e3]]) * self.group2().zxy().with_w(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().with_w(self[e425]))
                - (self.group3().wwwy() * other.group1().xyz().with_w(other[e425]))
                - (self.group3().wwwz() * other.group6().xyzz())
                - (other.group6().ywwx() * self.group2().zyz().with_w(self[e1]))
                - (other.group0().yy().with_zw(other[e12345], self[e423]) * self.group2().xyz().with_w(other[e235])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group3().yzx())
                - (Simd32x3::from(self[e4]) * other.group6().xyz())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from([self[e435], self[e415], self[e2]]) * other.group7().yzx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy())
                + (other.group7().zxy() * self.group2().yzx())
                + (self.group1().yzx() * other.group6().zxy())
                + (self.group3().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(other[e12345]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group2().xyz())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group3().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group3().xxy())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from(self[e4]) * other.group3().xyz().with_w(other[e3215]))
                + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().with_w(other[e41]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().xyz().with_w(self[e435]))
                + (self.group2().zx().with_zw(self[e5], other[e4235]) * other.group4().yzz().with_w(self[e415]))
                + (self.group3().ww().with_zw(self[e315], self[e125]) * other.group4().xyx().with_w(other[e43]))
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e425] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e2]]) * self.group3().xxy().with_w(other[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e3]]) * self.group3().zyz().with_w(other[e12]))
                - (other.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group4().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35])
                - (self.group1().www() * other.group9().xyz()).with_w(self[e1] * other[e23]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(self[e4]) * other.group9().xyz())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group3().xyz())
                + (Simd32x3::from([self[e435], self[e415], self[e2]]) * other.group4().yzx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2().xyz())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                + (self.group2().yzx() * other.group9().zxy())
                + (self.group3().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group3().zyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group2().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group3().xxy())
                - (other.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e2] * other[e435] * -1.0, self[e3] * other[e415] * -1.0, self[e1] * other[e425] * -1.0, self[e125] * other[e435]])
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e425]]) * self.group0().xxy().with_w(other[e315]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group1().xxy().with_w(self[e235]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e435]]) * self.group0().zyz().with_w(other[e125]))
                + (other.group6().xyzy() * self.group1().www().with_w(self[e315]))
                + (other.group0().yy().with_zw(other[e12345], other[e235]) * self.group3().xyz().with_w(self[e415]))
                + (other.group8() * self.group2().www()).with_w(self[e235] * other[e1])
                + (other.group7().zxy() * self.group2().yzx()).with_w(self[e321] * other[e5])
                + (self.group3().zxy() * other.group6().yzx()).with_w(self[e125] * other[e3])
                - (self.group2().zx().with_zw(self[e5], self[e2]) * other.group7().yzz().with_w(other[e315]))
                - (self.group3().ww().with_zw(self[e315], self[e1]) * other.group7().xyx().with_w(other[e235]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e5] * other[e12345])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e3] * other[e125])
                - (other.group1().www() * self.group2().xyz()).with_w(self[e5] * other[e321]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e4] * other[e321])
                + (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e4] * other[e12345]),
        );
    }
}
impl GeometricProduct<Plane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       39        0
    //  no simd       44       63        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e4125] * -1.0,
                self[e412] * other[e4235] * -1.0,
                self[e423] * other[e4315] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (other.group0().xyzx() * self.group2().www().with_w(self[e1]))
                + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                -(self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                -(self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e435] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group3().yzx().with_w(self[e425]))
                + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e125] * other[e4125],
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e235]))
                - (other.group0().yzxw() * self.group2().zxy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e423])),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       25        0
    //    simd3        0        2        0
    //    simd4       13       12        0
    // Totals...
    // yes simd       20       39        0
    //  no simd       59       79        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1] * other[e4] * -1.0, self[e2] * other[e4] * -1.0, self[e3] * other[e4] * -1.0, self[e3] * other[e3]])
                + (other.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1]))
                - (Simd32x4::from(other[e4]) * self.group1().xyz().with_w(self[e5]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5]),
            // e23, e31, e12, e45
            (self.group3().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5])
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e415]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (self.group3().zxyw() * other.group0().yzxw())
                - (other.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]),
                self[e321] * other[e4] * -1.0,
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyz().with_w(self[e423]))
                - (other.group0().xyzz() * self.group3().www().with_w(self[e412]))
                - (other.group0().yzxy() * self.group2().zxy().with_w(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e321]))
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<Scalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       28        0
    //    simd3        0        2        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       17       42        0
    //  no simd       59       82        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e4125] * -1.0,
                self[e412] * other[e4235] * -1.0,
                self[e423] * other[e4315] * -1.0,
                self[e5] * other[e1234],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group1().xyz().with_w(self[e1]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group3().xyzz())
                + (other.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3] * other[e4315] * -1.0, self[e1] * other[e4125] * -1.0, self[e2] * other[e4235] * -1.0, self[e4] * other[e3215]])
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e425]))
                + (other.group0().zxyz() * self.group3().yzx().with_w(self[e435]))
                + (other.group0().wwwx() * self.group0().with_w(self[e415]))
                - (self.group1().www() * other.group0().xyz()).with_w(self[e5] * other[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e125] * other[e4125],
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e235]))
                - (other.group0().yzxw() * self.group2().zxy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e412] * other[e4125] * -1.0])
                + (self.group0() * other.group0().www()).with_w(self[e321] * other[e1234])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e431]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e423])),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       68        0
    //    simd3        0       14        0
    //    simd4       48       34        0
    // Totals...
    // yes simd       80      116        0
    //  no simd      224      246        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e1] * other[e4]) - (self[e3] * other[e431]),
                -(self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]) - (self[e2] * other[e4]),
                -(self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]) - (self[e3] * other[e4]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().with_zw(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group2().www() * other.group3().xyz()).with_w(self[e425] * other[e425])
                + (self.group3().yzx() * other.group0().zxy()).with_w(self[e435] * other[e435])
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().with_w(self[e321]))
                - (Simd32x4::from([other[e425], other[e1], other[e12345], other[e4]]) * self.group0().zzz().with_w(self[e5]))
                - (Simd32x4::from([other[e3], other[e12345], other[e415], other[e5]]) * self.group0().yyy().with_w(self[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e5] * other[e423] * -1.0, self[e5] * other[e431] * -1.0, self[e5] * other[e412] * -1.0, self[e4] * other[e5]])
                + (self.group2().yzxy() * other.group0().zxyy())
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e235] * other[e423])
                + (self.group3().yzx() * other.group3().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e415]]) * self.group2().zyz().with_w(self[e1]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e435]]) * self.group3().xxyz())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group3().zyzw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group2().xxy().with_w(self[e435]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group2().www() * other.group2().xyz()).with_w(self[e2] * other[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e431] * other[e425])
                + (self.group2().yzx() * other.group3().zxy()).with_w(self[e415] * other[e423])
                + (self.group3().xxy() * other.group2().wzx()).with_w(self[e425] * other[e431])
                + (self.group3().zyz() * other.group2().yww()).with_w(self[e435] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e12345]]) * self.group2().zyzw())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group2().xxy().with_w(self[e321]))
                - (self.group1().xxy() * other.group2().wzx()).with_w(self[e423] * other[e1])
                - (self.group1().zyz() * other.group2().yww()).with_w(self[e431] * other[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e5] * other[e423] * -1.0, self[e5] * other[e431] * -1.0, self[e5] * other[e412] * -1.0, self[e125] * other[e3]])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e2]]) * self.group3().xxy().with_w(self[e315]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e435]]) * self.group3().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e1]))
                + (self.group2().wwwy() * other.group2().xyz().with_w(other[e425]))
                + (other.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (other.group2().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (other.group2().wzxx() * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e12345]]) * self.group2().zyz().with_w(self[e5]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e125]]) * self.group2().xxy().with_w(self[e3]))
                - (self.group3().yzxw() * other.group1().zxyw())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e2] * other[e315]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       59        0
    //    simd3        0       10        0
    //    simd4       47       38        0
    // Totals...
    // yes simd       83      107        0
    //  no simd      224      241        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]),
                (self[e425] * other[e1234]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]) + (self[e2] * other[e41]) + (self[e3] * other[e1234]),
                -(self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e3215]]) * self.group0().xxy().with_w(self[e4]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e1]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e1234]]) * self.group1().xxy().with_w(self[e5]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group0().zyz().with_w(self[e3]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e412] * other[e35])
                - (self.group3().yzx() * other.group0().zxy()).with_w(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e5] * other[e41], self[e5] * other[e42], self[e5] * other[e43], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwz() * other.group2().xyz().with_w(other[e43]))
                + (other.group3().zxyw() * self.group3().yzx().with_w(self[e4]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group3().zyzz())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group1().xyz().with_w(other[scalar]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e25]]) * self.group2().zzz().with_w(self[e2]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e15]]) * self.group2().yyy().with_w(self[e1]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxz() * other.group2().zxyz())
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e45]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e12]]) * self.group3().zyz().with_w(self[e125]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e31]]) * self.group3().xxy().with_w(self[e315]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().with_zw(other[e4235], other[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[scalar]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e4] * other[e45])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group1().zyz().with_w(self[e431]))
                - (other.group0().xyzx() * self.group3().www().with_w(self[e415]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e412] * other[e4125]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiDualNum {
    type Output = geometric_product_partial<AntiDualNum>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        7       23        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0().with_w(other[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(other[e45] * self[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().with_zw(self[e3215], (other[scalar] * self[e3215]) - (other[e45] * self[e3215])) * other.group0().with_w(1.0),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        4       15        0
    //  no simd       15       31        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[scalar], self[e3215]) * other.group0().with_w(other[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e415] * self[scalar], other[e425] * self[scalar], other[e435] * self[scalar], other[e4] * self[e3215] * -1.0])
                + (self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().with_w(other[e321])),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235] * self[scalar], other[e315] * self[scalar], other[e125] * self[scalar], 0.0])
                + (Simd32x4::from(self[e3215]) * other.group1())
                + (other.group3() * self.group0().xx().with_zw(self[e3215], self[scalar])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group0())).with_w(other[e4] * self[scalar]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([(other[e3215] * self[scalar]) + (other[scalar] * self[e3215]), other[scalar] * self[scalar]]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e3215] * other[e321]),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group0().xyz())).with_w(self[scalar] * other[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0]) * self.group0().yy().with_zw(self[scalar], (self[e3215] * other[e321]) + (self[scalar] * other[e5])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[e12345]) * self.group0());
    }
}
impl GeometricProduct<Circle> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       24        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        7       31        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0().with_w(other[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e321]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group1()) + (other.group2() * self.group0().yy().with_zw(self[scalar], self[e3215])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       24        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       14       31        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[scalar], self[e3215]) * other.group0().with_w(other[e1234]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e1234])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()))
                .with_w(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[scalar] * other[e4235], self[scalar] * other[e4315], self[scalar] * other[e4125], self[e3215] * other[e45] * -1.0])
                + (self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().with_w(other[e3215])),
        );
    }
}
impl GeometricProduct<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(self[e3215] * other[e12345]) + (self[scalar] * other[e5]), self[scalar] * other[e12345]]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0),
        );
    }
}
impl GeometricProduct<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * other.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group1().xyz())).with_w(self[scalar] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0]) * self.group0().yy().with_zw(self[scalar], (self[scalar] * other[e3215]) - (self[e3215] * other[e45])),
        );
    }
}
impl GeometricProduct<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       18        0
    //    simd2        1        2        0
    //    simd3        4        9        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       36       69        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]])) + (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group1().xyz()) - (Simd32x3::from(self[e3215]) * other.group7())).with_w(self[scalar] * other[e4]),
            // e5
            (self[e3215] * other[e12345]) + (self[e3215] * other[e321]) + (self[scalar] * other[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e3215] * other[e4235] * -1.0, self[e3215] * other[e4315] * -1.0, self[e3215] * other[e4125] * -1.0, 0.0])
                + (Simd32x4::from(self[e3215]) * other.group5().with_w(other[e1234]))
                + (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group4()) + (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e3215] * other[e4] * -1.0])
                + (self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group7().with_w(other[e321])),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[e3215]) * other.group6().xyz()) + (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * other.group4().with_w(other[scalar]))
                + (Simd32x4::from(self[scalar]) * other.group9())
                + Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0),
            // e1234
            self[scalar] * other[e1234],
        );
    }
}
impl GeometricProduct<Plane> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e3215] * other[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e5
            self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().xyz().with_w(other[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234]),
            // e15, e25, e35, e1234
            self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       15        0
    //  no simd       16       34        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0]) * self.group0().yy().with_zw(self[scalar], (self[e3215] * other[e4]) + (self[scalar] * other[e12345])),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e3215] * other[e4] * -1.0])
                + (self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().xyz().with_w(other[e321])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e12345]))
                + (Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e321]))
                + (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(self[scalar] * other[e4]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        2        3        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       19       34        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().with_zw(self[scalar], (self[e3215] * other[e1234]) + (self[scalar] * other[scalar])),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e1234])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()))
                .with_w(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group3()) + Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiFlatPoint {
    type Output = geometric_product_partial<AntiFlatPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd3        0        3        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       32       48        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e43] * self[e315] * -1.0,
                other[e41] * self[e125] * -1.0,
                other[e42] * self[e235] * -1.0,
                (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]),
                0.0,
            ]) - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().xyz().with_w(other[e12])),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().xyz()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd3        5        6        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       25       39        0
    //  no simd       44       66        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) - (other[e321] * self[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e1] * self[e321]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e2] * self[e321]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e3] * self[e321]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().xyz()) + (other.group1().zxy() * self.group0().yzx()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (other.group1().yzx() * self.group0().zxy())
                - (other.group3().yzx() * self.group0().zxy()))
            .with_w(other[e4] * self[e321] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]),
                (other[e435] * self[e125]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (other.group1().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(other[e3215] * self[e321] * -1.0),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        3        8        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(other[e321] * self[e321] * -1.0),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]),
                -(self[e235] * other[e3]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e125] * other[e321]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e2])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e321]) * other.group1()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0]) * other.group0().with_w(-(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12])),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0().xxy() * other.group0().wzx()) + (self.group0().zyz() * other.group0().yww())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[e321] * other[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e23], other[e31], other[e12], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        6       25        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e125] * other[e2] * -1.0,
                self[e235] * other[e3] * -1.0,
                self[e315] * other[e1] * -1.0,
                (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiFlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<Circle> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd3        0        5        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       10       29        0
    //  no simd       28       51        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group2()).with_w(0.0) + (self.group0().yzx() * other.group1().zxy()).with_w(0.0)
                - (self.group0().xxy() * other.group1().wzx()).with_w(0.0)
                - (self.group0().zyz() * other.group1().yww()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                self[e125] * other[e435],
            ]) + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e415]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       21        0
    //    simd3        0        6        0
    //    simd4        7        4        0
    // Totals...
    // yes simd       12       31        0
    //  no simd       33       55        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group2().xyz()).with_w(0.0) + (self.group0().yzx() * other.group1().zxy()).with_w(0.0)
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group0().zyz()).with_w(0.0)
                - (Simd32x3::from([other[e12345], other[e321], other[e321]]) * self.group0().xyz()).with_w(0.0)
                - (self.group0().xxy() * other.group1().wzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                self[e125] * other[e435],
            ]) + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e415]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       10       24        0
    //  no simd       28       44        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e315] * other[e43] * -1.0,
                self[e125] * other[e41] * -1.0,
                self[e235] * other[e42] * -1.0,
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e125] * other[e31], self[e235] * other[e12], self[e315] * other[e23], 0.0])
                - (self.group0().xyxy() * other.group1().wwyy())
                - (self.group0().yzzz() * other.group1().zxwz())
                - (other.group2() * self.group0().www()).with_w(self[e235] * other[e23]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().xyz()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd3        3        5        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       17       27        0
    //  no simd       47       61        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                self[e125] * other[e43],
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group2().www() * self.group0().xyz()).with_w(self[e315] * other[e42]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group0().yxxx())
                + Simd32x3::from(0.0).with_w(self[e125] * other[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().xyz().with_w(other[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(self[e321] * other[e1234]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e321] * other[e5]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        3        8        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(self[e321] * other[e45] * -1.0),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e321]) * other.group0().xyz()) - (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<Flector> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e321] * other[e15]),
                -(self[e315] * other[e45]) - (self[e321] * other[e25]),
                -(self[e125] * other[e45]) - (self[e321] * other[e35]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricProduct<Line> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e321]) * other.group1()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0]) * other.group0().with_w((self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])),
        );
    }
}
impl GeometricProduct<Motor> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e321]) * other.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (self.group0().xxy() * other.group0().wzx())
                - (self.group0().zyz() * other.group0().yww()))
            .with_w(self[e321] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]) + (self[e321] * other[e5])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       51        0
    //    simd2        1        1        0
    //    simd3       12       21        0
    //    simd4        7        4        0
    // Totals...
    // yes simd       50       77        0
    //  no simd       96      132        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (Simd32x2::from([other[e321], other[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group5()) + (other.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group4().yzx() * self.group0().zxy()))
            .with_w(self[e321] * other[e1234]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e12345]) - (self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]) - (self[e125] * other[e321]),
                self[e125] * other[e412],
            ]) + (Simd32x4::from(self[e321]) * other.group8().with_w(other[e12345]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e235] * other[e423])
                + (self.group0().yzx() * other.group6().zxy()).with_w(self[e315] * other[e431]),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (other.group7().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e235]]) * self.group0().xyz().with_w(other[e41]))
                + (self.group0().zxyw() * other.group4().yzx().with_w(other[scalar])),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group0().xyz()) + (other.group5().yzx() * self.group0().zxy()) + (self.group0().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (other.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]) + (self[e321] * other[e5]),
            ]) + (self.group0().wwwx() * other.group6().xyzx())
                + (other.group7().zxy() * self.group0().yzx()).with_w(self[e235] * other[e1]),
            // e1234
            self[e321] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       22        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * other.group0().zxyx()) + Simd32x3::from(0.0).with_w((self[e315] * other[e4315]) + (self[e125] * other[e4125]))
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        9       26        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e321]) * other.group0().xyz()) - (Simd32x3::from(other[e4]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        9       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * other.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e321] * other[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        6        7        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       27       41        0
    //  no simd       48       70        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]) - (self[e321] * other[e1]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]) - (self[e321] * other[e2]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]) - (self[e321] * other[e3]),
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().xyz()) + (self.group0().yzx() * other.group1().zxy()) + (self.group0().yzx() * other.group3().zxy())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group0().xxy())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group0().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group0().zyz()))
            .with_w(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e425]) + (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e1])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       18       27        0
    //  no simd       48       65        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxyx()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().xyz().with_w(other[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz())
                - (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy()))
            .with_w(self[e321] * other[e1234]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiFlector {
    type Output = geometric_product_partial<AntiFlector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       31       42        0
    //  no simd       76       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e3]),
                (other[e42] * self[e321]) + (other[e43] * self[e1]),
                (other[e41] * self[e2]) + (other[e43] * self[e321]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zx().with_zw(self[e5], self[e315]) * other.group0().yzz().with_w(other[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * other.group0().xyx().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w((other[e43] * self[e125]) + (other[scalar] * self[e321]) - (other[e12] * self[e3]))
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group0().xyz().with_w(self[e5]))
                + (other.group2().zxyz() * self.group1().yzxz())
                + (self.group0().zx().with_zw(self[e5], self[e2]) * other.group1().yzz().with_w(other[e25]))
                + (self.group1().ww().with_zw(self[e315], self[e1]) * other.group1().xyx().with_w(other[e15]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().ww().with_zw(self[e2], self[e125]) * other.group2().xyx().with_w(other[e12]))
                - (self.group1().zx().with_zw(self[e321], self[e5]) * other.group2().yzz().with_w(other[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3]),
                0.0,
            ]) - (self.group1().yzxz() * other.group1().zxy().with_w(other[e43]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e41])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       46        0
    //    simd3        0        3        0
    //    simd4       20       17        0
    // Totals...
    // yes simd       48       66        0
    //  no simd      108      123        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4] * self[e1] * -1.0,
                other[e4] * self[e2] * -1.0,
                other[e4] * self[e3] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                - (self.group0().ww().with_zw(self[e2], self[e321]) * other.group0().xyx().with_w(other[e321]))
                - (self.group1().zx().with_zw(self[e321], self[e5]) * other.group0().yzz().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e2] * self[e3]),
                -(other[e2] * self[e321]) - (other[e3] * self[e1]),
                -(other[e1] * self[e2]) - (other[e3] * self[e321]),
                other[e412] * self[e125],
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group3().zxy() * self.group1().yzx()).with_w(other[e431] * self[e315])
                - (Simd32x4::from(other[e4]) * self.group0().xyz().with_w(self[e5]))
                - (other.group1().wwwz() * self.group1().xyzz())
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e425]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e2]) * other.group2().xyx().with_w(other[e431]))
                + (self.group1().zx().with_zw(self[e321], self[e3]) * other.group2().yzz().with_w(other[e412]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e423] * self[e1])
                - (self.group1().ww().with_zw(self[e315], self[e321]) * other.group1().xyx().with_w(other[e4])),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxy() * self.group0().ww().with_zw(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group1().zx().with_zw(self[e321], self[e125]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]))
                - (other.group2().wwwz() * self.group0().xyz().with_w(self[e3]))
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (self.group0().zx().with_zw(self[e5], self[e1]) * other.group0().yzz().with_w(other[e235]))
                - (self.group1().ww().with_zw(self[e315], self[e5]) * other.group0().xyx().with_w(other[e321])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[scalar]) * self.group0().xyz()) - (Simd32x3::from(other[e3215]) * self.group1().xyz())).with_w(other[scalar] * self[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[scalar] * self[e5]) - (other[e3215] * self[e321])),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]),
                (other[e235] * self[e2]) + (other[e125] * self[e321]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e2])),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e2] * self[e3]),
                -(other[e2] * self[e321]) - (other[e3] * self[e1]),
                -(other[e1] * self[e2]) - (other[e3] * self[e321]),
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e321])),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[e321]))
                + (other.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().with_zw(self[e2], self[e235]) * other.group0().xyx().with_w(other[e1]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * other.group0().yzz().with_w(other[e2]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e2]))
                - (self.group0().zx().with_zw(self[e5], self[e5]) * other.group1().yzz().with_w(other[e321]))
                - (self.group1().ww().with_zw(self[e315], self[e3]) * other.group1().xyx().with_w(other[e125])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       14        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       14       20        0
    //  no simd       32       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]),
                0.0,
            ]) - (self.group0().ww().with_zw(self[e2], self[e2]) * other.group1().xyx().with_w(other[e31]))
                - (self.group1().zx().with_zw(self[e321], self[e3]) * other.group1().yzz().with_w(other[e12]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e1] * other[e23]),
            // e1, e2, e3, e5
            (self.group0().ww().with_zw(self[e2], self[e1]) * other.group0().xyx().with_w(other[e15]))
                + (self.group1().zx().with_zw(self[e321], self[e2]) * other.group0().yzz().with_w(other[e25]))
                + Simd32x3::from(0.0).with_w((self[e3] * other[e35]) - (self[e315] * other[e31]) - (self[e125] * other[e12]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e235] * other[e23]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       18        0
    //    simd3        0        2        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       20       26        0
    //  no simd       44       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e3] * other[e25]),
                (self[e315] * other[scalar]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e2] * other[e3215]),
                (self[e125] * other[scalar]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e3] * other[e3215]),
                0.0,
            ]) + (self.group0().xxyw() * other.group0().wzxw())
                - (self.group1().xxyz() * other.group1().wzx().with_w(other[e12]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group0().www() * other.group1().xyz()).with_w(self[e2] * other[e31]),
            // e1, e2, e3, e5
            (self.group1().xxyy() * other.group0().wzx().with_w(other[e25]))
                + (self.group1().zyzz() * other.group0().yww().with_w(other[e35]))
                + Simd32x3::from(0.0).with_w((self[e5] * other[scalar]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e1] * other[e15])
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e321] * other[e1]) - (self[e3] * other[e2]),
                -(self[e321] * other[e2]) - (self[e1] * other[e3]),
                -(self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (self.group1().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e5] * other[e1]),
                -(self[e235] * other[e3]) - (self[e5] * other[e2]),
                -(self[e315] * other[e1]) - (self[e5] * other[e3]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e315])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd3        0        4        0
    //    simd4       15       11        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       71       84        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e1] * other[e412] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(self[e235] * other[e423])
                - (self.group0().ww().with_zw(self[e2], other[e321]) * other.group0().xyx().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])) + Simd32x3::from(0.0).with_w((self[e315] * other[e431]) + (self[e125] * other[e412]))
                - (self.group1().xyzz() * other.group1().wwwz())
                - (self.group0().zx().with_zw(self[e5], other[e425]) * other.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], other[e415]) * other.group0().xyx().with_w(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e1]) * other.group2().xyx().with_w(other[e423]))
                + (self.group1().zx().with_zw(self[e321], self[e2]) * other.group2().yzz().with_w(other[e431]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e3] * other[e412]),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * other.group1().xyzy())
                + (other.group1().yzxz() * self.group1().zxy().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(self[e5] * other[e321] * -1.0)
                + (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e415])
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e315]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e235]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e3] * other[e125]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd3        0        5        0
    //    simd4       15       10        0
    // Totals...
    // yes simd       31       51        0
    //  no simd       76       91        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e1] * other[e412] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(self[e235] * other[e423])
                - (self.group0().ww().with_zw(self[e2], other[e321]) * other.group0().xyx().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * other.group0().zxy().with_w(other[e423]))
                + Simd32x3::from(0.0).with_w((self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]))
                - (self.group1().xyzz() * other.group1().wwwz())
                - (self.group0().zx().with_zw(self[e5], other[e425]) * other.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], other[e415]) * other.group0().xyx().with_w(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e1] * other[e423])
                + (self.group0().www() * other.group2().xyz()).with_w(self[e2] * other[e431])
                + (self.group1().zxy() * other.group2().yzx()).with_w(self[e3] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e2] * other[e12345],
                self[e3] * other[e12345],
                -(self[e5] * other[e321]) - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group1().xxy().with_w(self[e125]))
                + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e415])
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group0().zx().with_zw(self[e5], other[e315]) * other.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], other[e235]) * other.group0().xyx().with_w(self[e1])),
        );
    }
}
impl GeometricProduct<Dipole> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        0        5        0
    //    simd4       14       10        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       68       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(self[e235] * other[e41]),
            // e415, e425, e435, e321
            (self.group0().zx().with_zw(self[e5], self[e315]) * other.group0().yzz().with_w(other[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * other.group0().xyx().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w((self[e125] * other[e43]) - (self[e3] * other[e12]))
                - (self.group1().xyzy() * other.group1().wwwy())
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (self.group1().yzxx() * other.group2().zxy().with_w(other[e15]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e2] * other[e25])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e3] * other[e35])
                - (self.group0().xyxz() * other.group1().wwyz())
                - (other.group1().zxww() * self.group0().yzz().with_w(self[e5]))
                - (self.group0().ww().with_zw(self[e2], other[e23]) * other.group2().xyx().with_w(self[e235]))
                - (self.group1().zx().with_zw(self[e321], other[e31]) * other.group2().yzz().with_w(self[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]),
                0.0,
            ]) - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e41]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e3] * other[e43]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        0        7        0
    //    simd4       24       17        0
    // Totals...
    // yes simd       37       55        0
    //  no simd      109      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().xyzz() * other.group2().www().with_w(other[e4125]))
                + (self.group0().ww().with_zw(self[e2], other[e4235]) * other.group0().xyx().with_w(self[e1]))
                + (self.group1().zx().with_zw(self[e321], other[e4315]) * other.group0().yzz().with_w(self[e2]))
                + Simd32x3::from(0.0).with_w((self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e235] * other[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], 0.0])
                + (self.group0().zx().with_zw(self[e5], self[e315]) * other.group0().yzz().with_w(other[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * other.group0().xyx().with_w(other[e41]))
                + (other.group2().www() * self.group0().xyz()).with_w(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e1] * other[e23])
                - (self.group0().www() * other.group3().xyz()).with_w(self[e2] * other[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group0().yxxx())
                + (self.group1().wwwx() * other.group1().xyz().with_w(other[e15]))
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e125] * other[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().xyz().with_w(other[e3215]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                0.0,
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(self[e321] * other[e1234])
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e41]))
                - (other.group2().www() * self.group0().xyz()).with_w(self[e3] * other[e43]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) - (Simd32x3::from(other[e12345]) * self.group0().xyz())).with_w(self[e321] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0]) * other.group0().yy().with_zw(other[e12345], (self[e321] * other[e5]) - (self[e5] * other[e12345])),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * other[e15]) - (self[e3] * other[e25]),
                -(self[e321] * other[e25]) - (self[e1] * other[e35]),
                -(self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group1().yzxx() * other.group0().zxyx())
                - (Simd32x4::from(other[e45]) * self.group0().xyz().with_w(self[e5])),
        );
    }
}
impl GeometricProduct<Flector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e3] * other[e4315]),
                -(self[e1] * other[e4125]) - (self[e2] * other[e45]),
                -(self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().yzxx() * other.group1().zxyx())
                - (Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * other[e15]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e321] * other[e25]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e321] * other[e35]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e125] * other[e4125]) + (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e315] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e45]]) * self.group0().zyz().with_w(self[e5])),
        );
    }
}
impl GeometricProduct<Line> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       14       18        0
    //  no simd       32       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235]),
                0.0,
            ]) - (self.group1().yzxz() * other.group1().zxy().with_w(other[e435]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e425]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group0().xyx().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            (self.group0().ww().with_zw(self[e2], self[e235]) * other.group0().xyx().with_w(other[e415]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * other.group0().yzz().with_w(other[e425]))
                + Simd32x3::from(0.0).with_w((self[e125] * other[e435]) - (self[e2] * other[e315]) - (self[e3] * other[e125]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Motor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e5] * other[e415]),
                (self[e321] * other[e315]) + (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e5] * other[e425]),
                (self[e321] * other[e125]) + (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().yzxw() * other.group0().zxyw())
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e435]))
                - (other.group0().ywwy() * self.group0().zyz().with_w(self[e2]))
                - (other.group0().wzxx() * self.group0().xxy().with_w(self[e1])),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwx() * other.group0().xyzx())
                + (other.group0().ywwz() * self.group1().zyz().with_w(self[e125]))
                + (other.group0().wzxy() * self.group1().xxy().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w((self[e321] * other[e5]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       61        0
    //    simd2        4        4        0
    //    simd3       24       37        0
    //    simd4       27       19        0
    // Totals...
    // yes simd       96      121        0
    //  no simd      229      256        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e5] * other[e4]),
                (self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from([other[e321], other[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e235] * other[e1234]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e315] * other[e1234]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e125] * other[e1234]),
                0.0,
            ]) + (other.group0().xx().with_zw(other[scalar], self[e321]) * self.group1().xyz().with_w(other[e1234]))
                - (self.group1().yzxz() * other.group5().zxy().with_w(other[e43]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * other.group4().yzz().with_w(other[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * other.group4().xyx().with_w(other[e41])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) - (self[e125] * other[e425]) - (self[e5] * other[e1]) - (self[e5] * other[e415]),
                (self[e2] * other[e5]) - (self[e315] * other[e321]) - (self[e5] * other[e2]) - (self[e5] * other[e425]),
                (self[e3] * other[e5]) - (self[e125] * other[e321]) - (self[e5] * other[e3]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e321]) * other.group8().xyx().with_w(other[e12345]))
                + (self.group1().zx().with_zw(self[e321], self[e235]) * other.group8().yzz().with_w(other[e423]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e315] * other[e431])
                + (self.group0().yzx() * other.group6().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e4]]) * self.group0().zxy().with_w(self[e5]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e435]]) * self.group0().xxy().with_w(self[e3]))
                - (other.group0().yy().with_zw(other[e12345], self[e1]) * self.group0().xyz().with_w(other[e415]))
                - (other.group8().zxy() * self.group1().yzx()).with_w(self[e2] * other[e425]),
            // e41, e42, e43
            (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz()),
            // e23, e31, e12
            (other.group7().zxy() * self.group0().yzx()) + (self.group1().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group1().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e315]]) * self.group0().xyz().with_w(other[e42]))
                + (self.group0().zx().with_zw(self[e5], self[e235]) * other.group4().yzz().with_w(other[e41]))
                + (self.group1().ww().with_zw(self[e315], self[e321]) * other.group4().xyx().with_w(other[scalar]))
                + (self.group1().yzx() * other.group9().zxy()).with_w(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e3]]) * self.group1().xxy().with_w(other[e12]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (other.group4().zxy() * self.group0().yzx()).with_w(self[e1] * other[e23])
                - (self.group0().www() * other.group9().xyz()).with_w(self[e2] * other[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (self.group0().yzx() * other.group9().zxy())
                + (self.group1().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (other.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * other.group6().xyz().with_w(other[e2]))
                + (other.group6().yzxy() * self.group1().zxy().with_w(self[e315]))
                + (other.group0().yy().with_zw(other[e12345], self[e235]) * self.group1().xyz().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((self[e125] * other[e3]) + (self[e125] * other[e435]) + (self[e321] * other[e5]) - (self[e5] * other[e321]))
                + (other.group7().zxy() * self.group0().yzx()).with_w(self[e235] * other[e415])
                - (self.group0().zx().with_zw(self[e5], self[e1]) * other.group7().yzz().with_w(other[e235]))
                - (self.group1().ww().with_zw(self[e315], self[e5]) * other.group7().xyx().with_w(other[e12345]))
                - (self.group1().yzx() * other.group6().zxy()).with_w(self[e3] * other[e125])
                - (other.group1().www() * self.group0().xyz()).with_w(self[e2] * other[e315]),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                -(self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                -(self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       12        0
    //    simd3        6        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       24       52        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e5] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       46        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e1234]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (self.group0().zxyw() * other.group0().yzxw()),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        5        0
    //    simd4       21       16        0
    // Totals...
    // yes simd       53       73        0
    //  no simd      116      131        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e2] * other[e4] * -1.0,
                self[e3] * other[e4] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (other.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                - (Simd32x4::from(self[e321]) * other.group0().xyz().with_w(other[e321]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group1().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e3] * other[e2]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e315] * other[e431])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e425]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxyw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e415]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group0().www() * other.group3().xyz()).with_w(self[e3] * other[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e1] * other[e423])
                + (self.group0().yzx() * other.group3().zxy()).with_w(self[e2] * other[e431])
                + (self.group0().www() * other.group2().xyz()).with_w(self[e3] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e4]]) * self.group0().xxyw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e12345], other[e435], other[e415], other[e425]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group1().zyz().with_w(self[e315]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((self[e125] * other[e435]) + (self[e125] * other[e3]) + (self[e321] * other[e5]) - (self[e5] * other[e321]))
                - (Simd32x4::from(self[e5]) * other.group0())
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e315]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e235]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd3        0        4        0
    //    simd4       25       22        0
    // Totals...
    // yes simd       41       54        0
    //  no simd      116      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group1().xxyy())
                + Simd32x3::from(0.0).with_w((self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e1] * other[e4235])
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e235])),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxyx())
                + (other.group0() * self.group1().www().with_w(self[e321]))
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e1] * other[e23])
                - (self.group0().www() * other.group3().xyz()).with_w(self[e2] * other[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (self.group1().yzxx() * other.group2().zxyx())
                + (self.group1().wwwy() * other.group1().xyz().with_w(other[e25]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().xyz().with_w(other[e3215]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e5] * other[e41]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e5] * other[e42]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e5] * other[e43]),
                0.0,
            ]) + (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e43])),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiLine {
    type Output = geometric_product_partial<AntiLine>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       51       67        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e42] * self[e12],
                other[e43] * self[e23],
                other[e41] * self[e31],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[scalar] * self[e12]),
                other[e43] * self[e35] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e15])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(other[e41] * self[e23])
                - (self.group1().xyx() * other.group1().wwy()).with_w(other[e42] * self[e31])
                - (self.group1().yzz() * other.group1().zxw()).with_w(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e23]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       54        0
    //    simd3        0       11        0
    //    simd4       12        1        0
    // Totals...
    // yes simd       42       66        0
    //  no simd       78       91        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]),
                (other[e423] * self[e31]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e3] * self[e12] * -1.0)
                + (self.group1() * other.group2().www()).with_w(other[e412] * self[e35])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                + (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e25])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e1] * self[e23])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e2] * self[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) - (other.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(other[e315] * self[e31])
                - (self.group1().yzx() * other.group3().zxy()).with_w(other[e125] * self[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31]),
                0.0,
            ]) - (self.group1() * other.group2().www()).with_w(other[e412] * self[e12])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e23])
                - (self.group0().yzx() * other.group3().zxy()).with_w(other[e431] * self[e31]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(other[e321]) * self.group1()).with_w(0.0) + (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0]) * self.group0().with_w(-(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12])),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd3        0        2        0
    //    simd4        3        1        0
    // Totals...
    // yes simd       19       30        0
    //  no simd       28       37        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                other[e3] * self[e12] * -1.0,
            ]) - (other.group1().zxyy() * self.group1().yzx().with_w(self[e31]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e1] * self[e23]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(other[e235] * self[e23]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        3        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       27        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e31] * self[e12],
                other[e12] * self[e23],
                other[e23] * self[e31],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e23]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e15])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e25] * other[e23]) + (self[e35] * other[scalar]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e25]),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       13       21        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (other.group0().zxyx() * self.group1().yzx().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], -(self[e25] * other[e2]) - (self[e35] * other[e3])])
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        );
    }
}
impl GeometricProduct<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       42        0
    //    simd3        0        6        0
    //    simd4        6        0        0
    // Totals...
    // yes simd       26       48        0
    //  no simd       44       60        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[e31] * other[e423],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                self[e35] * other[e412],
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e423])
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e25] * other[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e235])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (self.group1().zxy() * other.group0().yzx()).with_w(self[e23] * other[e423]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       42        0
    //    simd3        0        4        0
    //    simd4        7        3        0
    // Totals...
    // yes simd       30       49        0
    //  no simd       51       66        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[e31] * other[e423],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e431]]) * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e423]]) * self.group0().xxy().with_w(self[e15]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e35] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (other.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (self.group1().zxy() * other.group0().yzx()).with_w(self[e23] * other[e423]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       40        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       24       47        0
    //  no simd       45       61        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12] * other[e42],
                self[e23] * other[e43],
                self[e31] * other[e41],
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]),
                self[e35] * other[e43] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e15] * other[e41])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e15] * other[e12]),
                (self[e31] * other[e15]) + (self[e25] * other[e23]),
                0.0,
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e41])
                - (self.group1().xyx() * other.group1().wwy()).with_w(self[e31] * other[e42])
                - (self.group1().yzz() * other.group1().zxw()).with_w(self[e12] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group1().yzx() * other.group0().zxy()).with_w(self[e23] * other[e15]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       52        0
    //    simd3        0        6        0
    //    simd4       11        5        0
    // Totals...
    // yes simd       42       63        0
    //  no simd       75       90        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e4235])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) - (self[e35] * other[e45]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (other.group1().zw().with_zw(other[e4235], other[e43]) * self.group1().yyy().with_w(self[e12]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e25]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e23] * other[e15])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e25]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group1()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0]) * self.group0().with_w(-(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35])),
        );
    }
}
impl GeometricProduct<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       14        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       14       20        0
    //  no simd       32       36        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e4125]) - (self[e31] * other[e25]) - (self[e12] * other[e35]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e15]),
        );
    }
}
impl GeometricProduct<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        3        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       27        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e12] * other[e425],
                self[e23] * other[e435],
                self[e31] * other[e415],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e235])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
        );
    }
}
impl GeometricProduct<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       57        0
    //    simd2        5        6        0
    //    simd3       17       28        0
    //    simd4       17       10        0
    // Totals...
    // yes simd       71      101        0
    //  no simd      161      193        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                0.0,
            ]) - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e423]),
            // e5
            -(self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar]),
                -(self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4315]]) * self.group1().xxx().with_w(self[e31]))
                - (Simd32x4::from([other[e12], other[e45], other[e4235], other[e4125]]) * self.group1().yyy().with_w(self[e12]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e41]]) * self.group1().zzz().with_w(self[e15]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e23] * other[e4235]),
            // e41, e42, e43
            (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz()) + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * other.group4().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group1().xxy())
                + (self.group0().zxy() * other.group5().yzx())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group1().yzx() * other.group4().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e35] * other[e431], self[e25] * other[e4], self[e35] * other[e4], self[e12] * other[e3] * -1.0])
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (other.group0().yy().with_zw(other[e12345], self[e15]) * self.group0().with_w(other[e423]))
                + (self.group0().zxy() * other.group6().yzx()).with_w(self[e25] * other[e431])
                - (self.group0().yzx() * other.group6().zxy()).with_w(self[e23] * other[e1])
                - (self.group1().yzx() * other.group7().zxy()).with_w(self[e31] * other[e2]),
            // e423, e431, e412
            (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy()) + (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz())
                - (self.group0().yzx() * other.group7().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group1().zxy())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                + (self.group1().zyz() * other.group6().yww())
                - (self.group0().yzx() * other.group8().zxy())
                - (self.group1().yzx() * other.group1().zxy())
                - (self.group1().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().with_w(self[e35]))
                - (self.group0().yzx() * other.group9().zxy()).with_w(self[e23] * other[e15])
                - (self.group1().yzx() * other.group4().zxy()).with_w(self[e31] * other[e25]),
            // e1234
            -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
    }
}
impl GeometricProduct<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       13       24        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        4        0
    //    simd4        4        3        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       18       32        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0]) * self.group1().with_w(-(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(other[e5]) * self.group0()).with_w(0.0) + (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], self[e35] * other[e3] * -1.0])
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e15]))
                - (other.group0().wwwy() * self.group1().with_w(self[e25])),
        );
    }
}
impl GeometricProduct<Scalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        0        4        0
    //    simd4        4        3        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       18       34        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group0()).with_w(0.0) + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                self[e35] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().with_w(self[e25]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd3        0        6        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       45       67        0
    //  no simd       81       97        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e23] * other[e4]) + (self[e12] * other[e431]),
                (self[e23] * other[e412]) + (self[e31] * other[e4]),
                (self[e31] * other[e423]) + (self[e12] * other[e4]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e35] * other[e431], self[e25] * other[e4], self[e35] * other[e4], self[e12] * other[e3] * -1.0])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e423]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e431]]) * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxy().with_w(self[e35]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e1])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) - (other.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                0.0,
            ]) - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e23] * other[e423]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       58        0
    //    simd3        0        6        0
    //    simd4       11        5        0
    // Totals...
    // yes simd       48       69        0
    //  no simd       81       96        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e4235])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e35] * other[e45]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (other.group1().zw().with_zw(other[e4235], other[e43]) * self.group1().yyy().with_w(self[e12]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e25]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e23] * other[e15])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e25]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiMotor {
    type Output = geometric_product_partial<AntiMotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       54        0
    //    simd3        0        5        0
    //    simd4       10        5        0
    // Totals...
    // yes simd       43       64        0
    //  no simd       73       89        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e42] * self[e12],
                other[e43] * self[e23],
                other[e43] * self[scalar],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (self.group0().wwyw() * other.group0().xyx().with_w(other[scalar]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e43] * self[e15]) + (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e43] * self[e3215]) + (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[scalar] * self[e12]),
                other[e43] * self[e35] * -1.0,
            ]) + (other.group0().xyx() * self.group1().wwy()).with_w(other[e45] * self[scalar])
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]),
                (other[e43] * self[e3215]) + (other[e45] * self[e12]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (self.group1().wwyw() * other.group0().xyx().with_w(other[scalar]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       61        0
    //    simd3        0        9        0
    //    simd4       17        8        0
    // Totals...
    // yes simd       54       78        0
    //  no simd      105      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]),
                (other[e412] * self[scalar]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) + (other.group0().xyx() * self.group0().wwy()).with_w(other[e4] * self[e3215])
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4] * self[e15], other[e4] * self[e25], other[e4] * self[e35], -(other[e2] * self[e31]) - (other[e3] * self[e12])])
                + (other.group1().yzzw() * self.group0().zxww())
                + (self.group1().zxwy() * other.group0().yzz().with_w(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e423]))
                + (other.group1().xyx() * self.group0().wwy()).with_w(other[e412] * self[e35])
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e1]))
                - (self.group1().yzxw() * other.group0().zxy().with_w(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e315] * self[e12])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23]),
                (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e125] * self[e23])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e125] * self[scalar])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group1().wwyw())
                + (other.group1().yzz() * self.group1().zxw()).with_w(other[e5] * self[scalar])
                - (other.group1().zxyx() * self.group1().yzxx())
                - (self.group1().yzxz() * other.group3().zxy().with_w(other[e435]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e1] * self[scalar]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e2] * self[scalar]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e3] * self[scalar]) - (other[e2] * self[e23]),
                0.0,
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e4] * self[scalar])
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e23])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e31])
                - (other.group2().www() * self.group1().xyz()).with_w(other[e412] * self[e12]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e321]) * self.group1().xyz()) + (other.group0().xyx() * self.group0().wwy()) + (other.group0().yzz() * self.group0().zxw())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e321] * self[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e23], self[e31], self[e12], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e321] * self[e3215]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12])),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       49        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e125] * self[scalar]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]),
                other[e3] * self[e12] * -1.0,
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e31]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e2] * self[e12],
                other[e3] * self[e23],
                other[e3] * self[scalar],
                -(other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * self.group0().xyz().with_w(self[e3215]))
                + (other.group1().xyxw() * self.group0().wwyw())
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (self.group1().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e12] * self[scalar]) + (other[scalar] * self[e12]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[scalar] * self[e15]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[e3215] * self[e23]),
                (other[scalar] * self[e25]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[e3215] * self[e31]),
                (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[e3215] * self[e12]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (other.group0().xyxw() * self.group1().wwyw())
                + (other.group0().yzz() * self.group1().zxw()).with_w(other[e3215] * self[scalar])
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) + (self[e3215] * other[e1]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) + (self[e3215] * other[e2]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[e3215] * other[e3]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (other.group0().zxyx() * self.group1().yzx().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * other[e1],
                self[scalar] * other[e2],
                self[scalar] * other[e3],
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzxw())
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
    }
}
impl GeometricProduct<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       47        0
    //    simd3        0        6        0
    //    simd4       10        4        0
    // Totals...
    // yes simd       35       57        0
    //  no simd       65       81        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group1().zxwy() * other.group0().yzz().with_w(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e423]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e35] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e3215] * other[e425]),
                (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (other.group2().xyx() * self.group0().wwy()).with_w(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                self[e12] * other[e412] * -1.0,
            ]) - (other.group0().xyx() * self.group1().wwy()).with_w(self[e23] * other[e423])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e31] * other[e431]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       47        0
    //    simd3        0        6        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       37       59        0
    //  no simd       73       89        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[scalar] * other[e412],
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (other.group0().xyx() * self.group0().wwy()).with_w(self[scalar] * other[e12345])
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * other[e415]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[scalar] * other[e425]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[scalar] * other[e435]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group0().zyzw())
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e35]]) * self.group0().xxy().with_w(other[e412]))
                + (self.group1().zxwy() * other.group0().yzz().with_w(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345]) + (self[e3215] * other[e425]),
                (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (other.group2() * self.group0().www().with_w(self[e3215]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                self[e12] * other[e412] * -1.0,
            ]) - (other.group0().xyx() * self.group1().wwy()).with_w(self[e23] * other[e423])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e31] * other[e431]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd3        0        6        0
    //    simd4        8        2        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       65       81        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[scalar] * other[e23]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[scalar] * other[e31]) + (self[e15] * other[e43]),
                (self[e31] * other[e23]) + (self[scalar] * other[e12]) + (self[e3215] * other[e43]),
                self[e35] * other[e43] * -1.0,
            ]) + (other.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * other[e45])
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e35] * other[e31]) + (self[e3215] * other[e23]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e3215] * other[e31]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) + (self[e25] * other[e23]) + (self[e3215] * other[e12]),
                0.0,
            ]) - (self.group0().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (self.group1().xyx() * other.group1().wwy()).with_w(self[e31] * other[e42])
                - (self.group1().yzz() * other.group1().zxw()).with_w(self[e12] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(self[e23] * other[e15]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       65        0
    //    simd3        0        9        0
    //    simd4       16        7        0
    // Totals...
    // yes simd       57       81        0
    //  no simd      105      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group0().xyx() * self.group0().wwy()).with_w(self[e3215] * other[e1234])
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[scalar] * other[e23]) + (self[e15] * other[e1234]),
                (self[e23] * other[e12]) + (self[scalar] * other[e31]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[scalar] * other[e12]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e35] * other[e43]),
            ]) + (other.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * other[e45])
                + (other.group0().yzz() * self.group1().zxw()).with_w(self[e3215] * other[e1234])
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e3215] * other[e31])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e31], self[e31]]) * self.group1().xxx().with_w(other[e42]))
                - (other.group1().zw().with_zw(other[e4235], self[e12]) * self.group1().yyy().with_w(other[e43]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) + (self[e15] * other[e1234]),
                (self[scalar] * other[e4315]) + (self[e25] * other[e1234]),
                (self[scalar] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group0().xxy().with_w(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group0().zyz().with_w(self[e35]))
                + (other.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * other[e3215])
                + (other.group0().yzz() * self.group1().zxw()).with_w(self[e15] * other[e4235])
                - (self.group0().yzxy() * other.group3().zxy().with_w(other[e25]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e23] * other[e15]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * other.group0().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[scalar] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w(-(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45])),
        );
    }
}
impl GeometricProduct<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e4235])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().with_w(self[e15]))
                + (other.group1().xyzy() * self.group0().www().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e4125]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(self[e25] * other[e425]),
        );
    }
}
impl GeometricProduct<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e31] * other[e12345]) + (self[scalar] * other[e425]),
                (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xxyw() * other.group0().wzxw())
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[scalar] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]) + (self[e3215] * other[e425]),
                (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (self.group0().xxyw() * other.group1().wzxw())
                + (self.group0().zyz() * other.group1().yww()).with_w(self[e3215] * other[e12345])
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       70        0
    //    simd2        7        8        0
    //    simd3       24       37        0
    //    simd4       24       15        0
    // Totals...
    // yes simd       98      130        0
    //  no simd      225      257        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[scalar] * other[e1]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[scalar] * other[e2]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[scalar] * other[e3]) - (self[e35] * other[e4]),
                0.0,
            ]) + (other.group7().zxy() * self.group1().yzx()).with_w(self[scalar] * other[e4])
                - (other.group7().xyx() * self.group1().wwy()).with_w(self[e23] * other[e423])
                - (other.group7().yzz() * self.group1().zxw()).with_w(self[e31] * other[e431])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e12] * other[e412]),
            // e5
            (self[scalar] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) + (self[e3215] * other[e12]),
                self[e12] * other[e4125] * -1.0,
            ]) + (other.group0().xx().with_zw(other[scalar], self[scalar]) * self.group1().xyz().with_w(other[e45]))
                + (other.group5().xyx() * self.group1().wwy()).with_w(self[e3215] * other[e1234])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group1().xxy().with_w(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group1().zyz().with_w(self[e23]))
                - (self.group1().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (other.group9().xyzy() * self.group1().www().with_w(self[e31]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e25] * other[e42]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().xyx() * self.group0().wwy()) + (other.group4().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (other.group4().xyx() * self.group1().wwy())
                + (other.group4().yzz() * self.group1().zxw())
                + (other.group5().xyx() * self.group0().wwy())
                + (other.group5().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group5().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * other[e415]) + (self[e15] * other[e4]),
                (self[scalar] * other[e425]) + (self[e25] * other[e4]),
                (self[scalar] * other[e435]) + (self[e35] * other[e4]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (self.group0().zxyw() * other.group6().yzxw())
                + (self.group1().zxwz() * other.group7().yzz().with_w(other[e412]))
                + (self.group1().wwyy() * other.group7().xyx().with_w(other[e431]))
                + (other.group0().yy().with_zw(other[e12345], other[e423]) * self.group0().xyz().with_w(self[e15]))
                - (self.group0().yzxy() * other.group6().zxy().with_w(other[e2]))
                - (other.group7().zxy() * self.group1().yzx()).with_w(self[e23] * other[e1]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().xyx() * self.group0().wwy()) + (other.group7().yzz() * self.group0().zxw())
                - (other.group7().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group0().xyz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group1().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                + (other.group8().xyx() * self.group0().wwy())
                + (other.group8().yzz() * self.group0().zxw())
                + (self.group1().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group0().yzx())
                - (self.group1().yzx() * other.group1().zxy())
                - (self.group1().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + (self.group1().wwyw() * other.group4().xyx().with_w(other[scalar]))
                + (other.group9().xyzz() * self.group0().www().with_w(self[e35]))
                + (other.group4().yzz() * self.group1().zxw()).with_w(self[scalar] * other[e3215])
                - (self.group1().yzxx() * other.group4().zxy().with_w(other[e23]))
                - (self.group0().yzx() * other.group9().zxy()).with_w(self[e25] * other[e31]),
            // e1234
            (self[scalar] * other[e1234]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
    }
}
impl GeometricProduct<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        4        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       20       32        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                self[e12] * other[e4125] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().with_w(self[e31]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group0().zxyw() * other.group0().yzxw())
                + (other.group0().xyzx() * self.group0().www().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       41        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * self.group0().xyz().with_w(self[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w(-(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0())
                - (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group0().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[scalar] * other[e4]),
        );
    }
}
impl GeometricProduct<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd3        3        4        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       24       44        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                self[e35] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().xyzy())
                + (self.group0().zxyw() * other.group0().yzxw())
                + (other.group0().xyzx() * self.group0().www().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       58        0
    //    simd3        0        6        0
    //    simd4       19       13        0
    // Totals...
    // yes simd       56       77        0
    //  no simd      113      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[scalar] * other[e423],
                self[scalar] * other[e431],
                self[scalar] * other[e412],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e35] * other[e431]) + (self[e3215] * other[e423]),
                (self[e25] * other[e4]) + (self[e3215] * other[e431]),
                (self[e35] * other[e4]) + (self[e3215] * other[e412]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e423]]) * self.group0().zyz().with_w(self[e15]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxyz())
                + (self.group0().www() * other.group1().xyz()).with_w(self[e25] * other[e431])
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e1]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (self.group0().xxyw() * other.group2().wzxw())
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e3215] * other[e12345])
                + (self.group0().www() * other.group2().xyz()).with_w(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]) + (self[e25] * other[e412]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]) + (self[e35] * other[e423]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]) + (self[e15] * other[e431]) - (self[e3215] * other[e412]),
                0.0,
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e423])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       58        0
    //    simd3        0        2        0
    //    simd4       18       16        0
    // Totals...
    // yes simd       59       76        0
    //  no simd      113      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[scalar] * other[e41],
                self[scalar] * other[e42],
                self[scalar] * other[e43],
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * other[e23]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]),
                (self[scalar] * other[e31]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e3215] * other[e42]),
                (self[scalar] * other[e12]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e3215] * other[e43]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e4235]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25])
                    + (self[scalar] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e3215] * other[e23])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215])
                    + (self[scalar] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e3215] * other[e31])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215])
                    + (self[scalar] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e3215] * other[e12])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (other.group1().zw().with_zw(other[e4235], other[e43]) * self.group1().yyy().with_w(self[e12])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e41],
                self[e3215] * other[e42],
                self[e3215] * other[e43],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().with_w(self[e15]))
                + (other.group3().xyzy() * self.group0().www().with_w(self[e25]))
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e15]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e25]),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiPlane {
    type Output = geometric_product_partial<AntiPlane>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       12       28        0
    //  no simd       29       47        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e41] * self[e5], other[e42] * self[e5], other[e43] * self[e5], -(other[e31] * self[e2]) - (other[e12] * self[e3])])
                - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                -(other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e35] * self[e3]) + (other[scalar] * self[e5]),
            ]) + (other.group2().wwwy() * self.group0().xyzy())
                + (self.group0().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e45])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       28        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       37        0
    //  no simd       44       64        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4] * self[e1] * -1.0,
                other[e4] * self[e2] * -1.0,
                other[e4] * self[e3] * -1.0,
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1]))
                - (self.group0().zxyw() * other.group0().yzx().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3] * self[e2], other[e1] * self[e3], other[e2] * self[e1], other[e4] * self[e5] * -1.0])
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().zxyz() * other.group3().yzx().with_w(other[e435]))
                - (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                other[e412] * self[e3],
            ]) + (self.group0().xyzy() * other.group3().www().with_w(other[e431]))
                + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e3],
                other[e435] * self[e1],
                other[e415] * self[e2],
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       22        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                other[e315] * self[e3],
                other[e125] * self[e1],
                other[e235] * self[e2],
                -(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiFlector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e321] * self[e1]) - (other[e2] * self[e3]),
                -(other[e321] * self[e2]) - (other[e3] * self[e1]),
                -(other[e321] * self[e3]) - (other[e1] * self[e2]),
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e315])),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       13       24        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (self.group0().zxyx() * other.group1().yzx().with_w(other[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        4        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       20       32        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                other[e12] * self[e3] * -1.0,
            ]) - (self.group0().xyzy() * other.group1().www().with_w(other[e31]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                + (self.group0().xyzx() * other.group0().www().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        8       18        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e2] * self[e3] * -1.0,
                other[e3] * self[e1] * -1.0,
                other[e1] * self[e2] * -1.0,
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) - (Simd32x3::from(self[e5]) * other.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        1        4        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       28       41        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * other[e435] * -1.0)
                - (self.group0().xyzy() * other.group1().wwwy())
                - (other.group0() * self.group0().www()).with_w(self[e1] * other[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e1] * other[e435],
                self[e2] * other[e415],
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (self.group0().wwwx() * other.group0().with_w(other[e235]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e2] * other[e315]),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       22        0
    //    simd3        1        5        0
    //    simd4        5        2        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       32       45        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * other[e435] * -1.0)
                - (self.group0().xyzy() * other.group1().wwwy())
                - (other.group0() * self.group0().www()).with_w(self[e1] * other[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e1] * other[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]) - (self[e5] * other[e12345]),
            ]) - (self.group0().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (other.group0() * self.group0().www()).with_w(self[e1] * other[e235]),
        );
    }
}
impl GeometricProduct<Dipole> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd3        1        4        0
    //    simd4        4        2        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       25       43        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e5] * other[e41], self[e5] * other[e42], self[e5] * other[e43], -(self[e2] * other[e31]) - (self[e3] * other[e12])])
                - (self.group0().xyzx() * other.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]),
                -(self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * other[e12] * -1.0,
                self[e3] * other[e23] * -1.0,
                self[e1] * other[e31] * -1.0,
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e1] * other[e15])
                - (other.group0() * self.group0().www()).with_w(self[e5] * other[e45]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       30        0
    //    simd3        0        2        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       17       39        0
    //  no simd       44       64        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * other[e43] * -1.0,
                self[e3] * other[e41] * -1.0,
                self[e1] * other[e42] * -1.0,
                (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (self.group0().xyzy() * other.group2().www().with_w(other[e4315]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(self[e1] * other[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e3] * other[e35],
            ]) + (self.group0().yzxx() * other.group2().zxyx())
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e3] * other[e31], self[e1] * other[e12], self[e2] * other[e23], self[e3] * other[e43] * -1.0])
                - (self.group0().wwwx() * other.group0().with_w(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e2] * other[e42]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        5        0
    // no simd        0       20        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       22        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * other.group0().zxyx()) + Simd32x3::from(0.0).with_w((self[e2] * other[e25]) + (self[e3] * other[e35]))
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<Flector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e3] * other[e4315]),
                -(self[e1] * other[e4125]) - (self[e2] * other[e45]),
                -(self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricProduct<Line> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       13       22        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([self[e3] * other[e315], self[e1] * other[e125], self[e2] * other[e235], self[e3] * other[e435] * -1.0])
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e425]))
                - (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e1] * other[e435],
                self[e2] * other[e415],
                -(self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Motor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       20       29        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]),
                self[e3] * other[e435] * -1.0,
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415]))
                - (self.group0().wwwy() * other.group0().xyzy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       46        0
    //    simd2        3        3        0
    //    simd3       11       17        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       44       73        0
    //  no simd       96      131        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e5] * other[e4] * -1.0, self[e5] * other[e1234]])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e3] * other[e43] * -1.0,
            ]) - (self.group0().yzxy() * other.group5().zxy().with_w(other[e42]))
                - (self.group0().wwwx() * other.group4().with_w(other[e41])),
            // e5
            (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) + (self[e5] * other[scalar]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]),
                self[e5] * other[e4] * -1.0,
            ]) - (self.group0().wwwy() * other.group1().xyz().with_w(other[e425]))
                - (self.group0().wwwz() * other.group6().xyzz())
                - (other.group8().zxy() * self.group0().yzx()).with_w(self[e1] * other[e415]),
            // e41, e42, e43
            (other.group7().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group0().xyz()) - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group0().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e1]]) * self.group0().xxy().with_w(other[e23]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e2]]) * self.group0().zyz().with_w(other[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().yzx() * self.group0().zxy()) - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (self.group0().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().with_w(other[e12345]))
                - (self.group0().yzx() * other.group6().zxy()).with_w(self[e1] * other[e235]),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
        );
    }
}
impl GeometricProduct<Plane> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        8       18        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e3] * other[e4315] * -1.0,
                self[e1] * other[e4125] * -1.0,
                self[e2] * other[e4235] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e5]) * other.group0().xyz()) - (Simd32x3::from(other[e3215]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<RoundPoint> for AntiPlane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       12       24        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, scalar
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().xyzx()) + Simd32x3::from(0.0).with_w((self[e2] * other[e2]) + (self[e3] * other[e3]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for AntiPlane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       12        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        7       15        0
    //  no simd        9       21        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz(),
            // e415, e425, e435, e321
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       48       68        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e2] * other[e4] * -1.0,
                self[e3] * other[e4] * -1.0,
                (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e3], self[e3] * other[e1], self[e1] * other[e2], self[e5] * other[e4] * -1.0])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group0().xyz().with_w(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                self[e3] * other[e412],
            ]) + (self.group0().xxyx() * other.group2().wzx().with_w(other[e423]))
                + (self.group0().zyzy() * other.group2().yww().with_w(other[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e3] * other[e125]) - (self[e5] * other[e12345]) - (self[e5] * other[e321]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (self.group0().wwwy() * other.group0().xyz().with_w(other[e315])),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       48       68        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * other[e43] * -1.0,
                self[e3] * other[e41] * -1.0,
                self[e1] * other[e42] * -1.0,
                (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (self.group0().yzxx() * other.group2().zxyx())
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e3] * other[e43] * -1.0,
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e41]))
                - (self.group0().wwwy() * other.group0().xyzy()),
        );
    }
}
impl std::ops::Div<geometric_product> for AntiScalar {
    type Output = geometric_product_partial<AntiScalar>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * other.group2(),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[e12345]) * other.group0());
    }
}
impl GeometricProduct<AntiFlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<AntiFlector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiLine> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiMotor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiPlane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiScalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ other[e12345] * self[e12345] * -1.0);
    }
}
impl GeometricProduct<Circle> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<CircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Dipole> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        );
    }
}
impl GeometricProduct<DipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<DualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[e12345]) * other.group0() * Simd32x2::from(-1.0));
    }
}
impl GeometricProduct<FlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
    }
}
impl GeometricProduct<Flector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Motor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e1234]]) * other.group9().xyz().with_w(self[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group8().with_w(other[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group6().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group5().with_w(other[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group3().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e5]]) * other.group1().xyz().with_w(self[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<RoundPoint> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e5]]) * other.group0().xyz().with_w(self[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Scalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * other[scalar]);
    }
}
impl GeometricProduct<Sphere> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e1234]]) * other.group0().xyz().with_w(self[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
        );
    }
}
impl GeometricProduct<VersorEven> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<VersorOdd> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl std::ops::Div<geometric_product> for Circle {
    type Output = geometric_product_partial<Circle>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       56        0
    //    simd3        0       10        0
    //    simd4       15        6        0
    // Totals...
    // yes simd       49       72        0
    //  no simd       94      110        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412]),
                -(other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e42] * self[e315]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e235])
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e315])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e125])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxwy() * self.group2().yzz().with_w(self[e315]))
                - (other.group1().wwyx() * self.group2().xyx().with_w(self[e235]))
                - (other.group2().zyzx() * self.group1().ywwx())
                - (other.group2().xxy() * self.group1().wzx()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       55        0
    //    simd3        0       14        0
    //    simd4       27       14        0
    // Totals...
    // yes simd       53       83        0
    //  no simd      134      153        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e315]]) * self.group0().xxx().with_w(other[e431]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e235]]) * self.group0().zzz().with_w(self[e423]))
                + (other.group1().zw().with_zw(other[e1], self[e125]) * self.group0().yyy().with_w(other[e412]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e125]]) * self.group0().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e315]]) * self.group0().xxy().with_w(self[e431]))
                - (other.group3().xyzz() * self.group1().wwwz())
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e2]))
                - (self.group2() * other.group2().www()).with_w(other[e1] * self[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e5] * self[e415] * -1.0,
                other[e5] * self[e425] * -1.0,
                other[e5] * self[e435] * -1.0,
                (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().wzxz() * other.group2().xxy().with_w(other[e412]))
                + (self.group2().yzx() * other.group1().zxy()).with_w(other[e423] * self[e415])
                + (self.group2().yzx() * other.group3().zxy()).with_w(other[e431] * self[e425])
                + (other.group2().zyz() * self.group1().yww()).with_w(other[e415] * self[e423])
                - (Simd32x4::from([other[e425], other[e3], other[e1], other[e2]]) * self.group2().zxy().with_w(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group2().zyz().with_w(self[e412]))
                - (other.group2().yzxw() * self.group1().zxyw())
                - (self.group2().xxy() * other.group1().wzx()).with_w(other[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e425]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e415] * self[e235])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e435] * self[e125])
                + (other.group3().yzx() * self.group1().zxy()).with_w(other[e3] * self[e125])
                + (self.group1().www() * other.group1().xyz()).with_w(other[e2] * self[e315]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       24        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd3        0        5        0
    //    simd4        6        3        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       28       44        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e125] * self[e431],
                other[e235] * self[e412],
                other[e315] * self[e423],
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (other.group0().xxy() * self.group1().wzx()).with_w(0.0) + (other.group0().zyz() * self.group1().yww()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group2()).with_w(0.0)
                - (other.group0().yzx() * self.group1().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e431] * -1.0,
                other[e235] * self[e412] * -1.0,
                other[e315] * self[e423] * -1.0,
                other[e125] * self[e435],
            ]) + (other.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e415]),
        );
    }
}
impl GeometricProduct<AntiFlector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd3        0        4        0
    //    simd4       13        9        0
    // Totals...
    // yes simd       29       45        0
    //  no simd       68       80        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w(other[e125] * self[e412])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e125] * self[e431],
                other[e235] * self[e412],
                other[e315] * self[e423],
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) - (other[e5] * self[e435]),
                0.0,
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group2().zyz().with_w(self[e431]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e125] * self[e431]) - (other[e3] * self[e425]),
                -(other[e235] * self[e412]) - (other[e1] * self[e435]),
                -(other[e315] * self[e423]) - (other[e2] * self[e415]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (self.group1().zxyx() * other.group1().yzx().with_w(other[e235]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e3] * self[e125]),
        );
    }
}
impl GeometricProduct<AntiLine> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       40        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       23       47        0
    //  no simd       44       61        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[e12] * self[e423],
                other[e23] * self[e431],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e235])
                - (other.group1().xxy() * self.group1().wzx()).with_w(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (other.group1().zxy() * self.group0().yzx()).with_w(other[e23] * self[e423]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        0        6        0
    //    simd4        8        2        0
    // Totals...
    // yes simd       40       63        0
    //  no simd       64       81        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) + (other[scalar] * self[e423]),
                (other[e12] * self[e423]) + (other[scalar] * self[e431]),
                (other[e23] * self[e431]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(other[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) + (other[e3215] * self[e412]),
                other[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).with_w(other[scalar] * self[e321])
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e235]))
                - (other.group1().xxy() * self.group1().wzx()).with_w(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(other[e23] * self[e423]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       18        0
    //    simd3        1        5        0
    //    simd4        6        3        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       28       45        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e3] * self[e435] * -1.0)
                - (other.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * other.group0().www()).with_w(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e412] * -1.0])
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (other.group0().wwwx() * self.group0().with_w(self[e235]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e2] * self[e315]),
        );
    }
}
impl GeometricProduct<AntiScalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       45        0
    //    simd3        0       13        0
    //    simd4       16        4        0
    // Totals...
    // yes simd       36       62        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e235])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e423])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e431])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwy() * other.group2().zyz().with_w(other[e431]))
                + (self.group1().wzxx() * other.group2().xxy().with_w(other[e423]))
                + (self.group2().yzx() * other.group1().zxy()).with_w(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e425] * self[e315]) + (other[e435] * self[e125]),
            ]) + (self.group1().wwwz() * other.group1().xyz().with_w(other[e125]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e415])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e425])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e415] * self[e235]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       56        0
    //    simd3        0       11        0
    //    simd4       17        6        0
    // Totals...
    // yes simd       43       73        0
    //  no simd       94      113        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e435] * other[e431]) - (self[e321] * other[e423]),
                -(self[e431] * other[e12345]) - (self[e415] * other[e412]) - (self[e321] * other[e431]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e321] * other[e412]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e125])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxy().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e435] * other[e425] * -1.0,
                self[e425] * other[e12345] * -1.0,
                self[e435] * other[e12345] * -1.0,
                self[e321] * other[e12345],
            ]) + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e423])
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e315] * other[e431])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (other.group1().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e431] * other[e425])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e235] * other[e412]),
                -(self[e423] * other[e315]) - (self[e315] * other[e423]),
                (self[e425] * other[e315]) + (self[e435] * other[e125]),
            ]) + (self.group1().wwwx() * other.group1().xyz().with_w(other[e235]))
                + (other.group1().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e415])
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e315] * other[e425]),
        );
    }
}
impl GeometricProduct<Dipole> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       51        0
    //    simd3        0       11        0
    //    simd4       14        4        0
    // Totals...
    // yes simd       42       66        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]),
                -(self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e25]),
            // e415, e425, e435, e321
            (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e41])
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e315] * other[e42])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e43])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e15])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]),
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) - (self.group1().ywwx() * other.group2().zyz().with_w(other[e15]))
                - (other.group1().zxwy() * self.group2().yzz().with_w(self[e315]))
                - (other.group1().wwyx() * self.group2().xyx().with_w(self[e235]))
                - (other.group2().xxy() * self.group1().wzx()).with_w(self[e125] * other[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().wwwz() * self.group1().xyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e31]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       59        0
    //    simd3        0        6        0
    //    simd4       25       19        0
    // Totals...
    // yes simd       59       84        0
    //  no simd      134      153        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().with_w(self[e235]))
                + (self.group1().zxyy() * other.group1().yzx().with_w(other[e4315]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e435] * other[e25],
                self[e425] * other[e3215],
                self[e435] * other[e3215],
                -(self[e435] * other[e35]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group2().zzy().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group2().yxx().with_w(self[e235]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4125]]) * self.group1().xxy().with_w(self[e125]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23]),
        );
    }
}
impl GeometricProduct<DualNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       23        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e321] * other[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(other[e5]) * self.group1().xyz()) - (Simd32x3::from(other[e12345]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e5]) * self.group0().with_w(self[e321]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd3        0        3        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       28       41        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * other[e25],
                self[e423] * other[e35],
                self[e431] * other[e15],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e435] * other[e25], self[e415] * other[e35], self[e425] * other[e15], 0.0])
                - (self.group1().yzxy() * other.group0().zxyy())
                - (self.group1().wwwz() * other.group0().xyzz())
                - (other.group0().wwwx() * self.group2().with_w(self[e415])),
            // e1, e2, e3, e4
            (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group1().xyz()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<Flector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        3        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       68       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e435] * other[e4125]) - (self[e412] * other[e35]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4125]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4315]]) * self.group1().xxy().with_w(self[e315]))
                + (other.group1().zxyx() * self.group2().yzx().with_w(self[e235]))
                - (Simd32x4::from(self[e321]) * other.group0().xyz().with_w(other[e3215]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e15]]) * self.group2().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e25]]) * self.group2().zyz().with_w(self[e425]))
                - (self.group1().yzxz() * other.group0().zxyz()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e4235]),
        );
    }
}
impl GeometricProduct<Line> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       43        0
    //    simd3        0        8        0
    //    simd4        8        0        0
    // Totals...
    // yes simd       21       51        0
    //  no simd       45       67        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e423] * other[e435] * -1.0,
                self[e431] * other[e415] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                self[e412] * other[e125] * -1.0,
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]),
                0.0,
            ]) + (self.group2().yzx() * other.group0().zxy()).with_w(self[e423] * other[e415])
                + (other.group1().xxy() * self.group1().wzx()).with_w(self[e431] * other[e425])
                + (other.group1().zyz() * self.group1().yww()).with_w(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e125] * other[e435]),
            ]) + (other.group0() * self.group1().www()).with_w(self[e315] * other[e425])
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e235] * other[e415]),
        );
    }
}
impl GeometricProduct<Motor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       46        0
    //    simd3        0        7        0
    //    simd4       11        4        0
    // Totals...
    // yes simd       33       57        0
    //  no simd       66       83        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e423] * other[e12345]) - (self[e412] * other[e425]),
                -(self[e423] * other[e435]) - (self[e431] * other[e12345]),
                -(self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e435] * other[e425]),
                (self[e435] * other[e415]) - (self[e425] * other[e12345]),
                (self[e415] * other[e425]) - (self[e435] * other[e12345]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e321] * other[e12345])
                - (other.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).with_w(self[e412] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]),
                0.0,
            ]) + (other.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e431] * other[e425])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (other.group0().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group0().xxy() * other.group1().wzx()).with_w(self[e235] * other[e415])
                + (self.group0().zyz() * other.group1().yww()).with_w(self[e315] * other[e425]),
        );
    }
}
impl GeometricProduct<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       88        0
    //    simd2        1        1        0
    //    simd3       36       51        0
    //    simd4       30       20        0
    // Totals...
    // yes simd      125      160        0
    //  no simd      288      323        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e423] * other[e23]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            (self.group2().yzx() * other.group1().zxy()).with_w(self[e321] * other[e12345])
                + (self.group2().yzx() * other.group6().zxy()).with_w(self[e235] * other[e423])
                + (other.group8().xxy() * self.group1().wzx()).with_w(self[e315] * other[e431])
                + (other.group8().zyz() * self.group1().yww()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e125]]) * self.group2().zxy().with_w(self[e412]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e3]]) * self.group1().xyzz())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group2().xxy().with_w(self[e431]))
                - (other.group0().yy().with_zw(other[e12345], self[e423]) * self.group2().with_w(other[e235]))
                - (self.group2().zyz() * other.group6().yww()).with_w(self[e415] * other[e1])
                - (other.group8().yzx() * self.group1().zxy()).with_w(self[e425] * other[e2]),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy()) + (self.group2().yzx() * other.group7().zxy()) + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (Simd32x3::from(other[e12345]) * self.group1().xyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group2().xxy())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group2().zyz())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().with_w(self[e235]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e425] * other[e4315])
                - (other.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * other.group4().zxy()).with_w(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                + (other.group4().yzz() * self.group1().zxw())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group2().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group2().yxx())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e423] * other[e315]) - (self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e425]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e415]]) * self.group0().zyz().with_w(self[e235]))
                + (other.group6().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group2().yzx() * other.group7().zxy()).with_w(self[e315] * other[e2]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       28       43        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (other.group0().wwwx() * self.group0().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w(self[e125] * other[e4125])
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        2        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       13       23        0
    //  no simd       35       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group1().xyz()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e415]))
                - (self.group1().wwwz() * other.group0().xyzz())
                - (other.group0().wwwy() * self.group2().with_w(self[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * other[e3],
                self[e125] * other[e1],
                self[e235] * other[e2],
                -(self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group1().xyz().with_w(self[e431]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e321] * other[e5]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e235]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e315])),
        );
    }
}
impl GeometricProduct<Scalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       20        0
    //    simd3        2        4        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       10       30        0
    //  no simd       35       56        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().with_w(self[e425]))
                + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e415] * other[e3215],
                self[e425] * other[e3215],
                self[e435] * other[e3215],
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) + (self.group2().yzx() * other.group0().zxy()).with_w(self[e321] * other[e1234])
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * other[e4315] * -1.0,
                self[e415] * other[e4125] * -1.0,
                self[e425] * other[e4235] * -1.0,
                self[e125] * other[e4125],
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (other.group0().wwwx() * self.group0().with_w(self[e235]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e3215]]) * self.group2().with_w(self[e321])),
        );
    }
}
impl GeometricProduct<VersorEven> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       59        0
    //    simd3        0        8        0
    //    simd4       28       20        0
    // Totals...
    // yes simd       60       87        0
    //  no simd      144      163        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e431] * other[e3]) - (self[e412] * other[e425]) - (self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]),
                -(self[e431] * other[e12345]) - (self[e412] * other[e1]) - (self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]),
                -(self[e431] * other[e415]) - (self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().with_zw(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e321] * other[e1] * -1.0, self[e321] * other[e2] * -1.0, self[e321] * other[e3] * -1.0, self[e321] * other[e12345]])
                + (other.group0().zxyy() * self.group2().yzx().with_w(self[e315]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e1]]) * self.group2().zyz().with_w(self[e415]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e2]]) * self.group1().xxyy())
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group1().zyzz())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e125]]) * self.group2().xxy().with_w(self[e412]))
                - (other.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (self.group1().wwwx() * other.group2().xyz().with_w(other[e423]))
                + (other.group1().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group2().yzx() * other.group3().zxy()).with_w(self[e431] * other[e425])
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e412] * other[e435])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group2().zyz().with_w(self[e321])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e423] * other[e315]) - (self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e435]]) * self.group1().zyz().with_w(self[e125]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e235] * other[e415])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e235] * other[e1])
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e315] * other[e425])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e125] * other[e3]),
        );
    }
}
impl GeometricProduct<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       65        0
    //    simd3        0        6        0
    //    simd4       26       20        0
    // Totals...
    // yes simd       66       91        0
    //  no simd      144      163        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e321] * other[scalar],
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4315]]) * self.group1().xxyy())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().with_w(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]),
                -(self[e435] * other[e35]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().with_zw(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23]),
        );
    }
}
impl std::ops::Div<geometric_product> for CircleRotor {
    type Output = geometric_product_partial<CircleRotor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       63        0
    //    simd3        0        9        0
    //    simd4       17        8        0
    // Totals...
    // yes simd       54       80        0
    //  no simd      105      122        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431]),
                (other[e43] * self[e321]) + (other[e43] * self[e12345]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412]),
                -(other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (other.group0().xyx() * self.group1().wwy()).with_w(other[scalar] * self[e12345])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e42] * self[e315]),
            // e415, e425, e435, e321
            Simd32x4::from([other[scalar] * self[e415], other[scalar] * self[e425], other[scalar] * self[e435], other[e45] * self[e12345] * -1.0])
                + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group1().zx().with_zw(self[e12345], self[e321]) * other.group1().yzz().with_w(other[scalar]))
                + (self.group2().ww().with_zw(self[e425], self[e125]) * other.group1().xyx().with_w(other[e43]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e315])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().zyzx() * self.group1().ywwx())
                - (other.group2().xxy() * self.group1().wzx()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       56        0
    //    simd3        0        9        0
    //    simd4       31       22        0
    // Totals...
    // yes simd       56       87        0
    //  no simd      149      171        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e412] * self[e12345]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e315]]) * self.group0().xxx().with_w(other[e431]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e235]]) * self.group0().zzz().with_w(self[e423]))
                + (other.group1().zw().with_zw(other[e1], self[e125]) * self.group0().yyy().with_w(other[e412]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1] * self[e321] * -1.0, other[e2] * self[e321] * -1.0, other[e3] * self[e321] * -1.0, other[e321] * self[e12345]])
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e125]]) * self.group0().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e315]]) * self.group0().xxy().with_w(self[e431]))
                - (self.group1().zx().with_zw(self[e12345], self[e425]) * other.group1().yzz().with_w(other[e2]))
                - (self.group2().ww().with_zw(self[e425], self[e415]) * other.group1().xyx().with_w(other[e1]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e423])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e5] * self[e415] * -1.0,
                other[e5] * self[e425] * -1.0,
                other[e5] * self[e435] * -1.0,
                (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwz() * other.group2().zyz().with_w(other[e412]))
                + (self.group1().wzxy() * other.group2().xxy().with_w(other[e431]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).with_w(other[e415] * self[e423])
                - (other.group2().yzzw() * self.group1().zx().with_zw(self[e12345], self[e321]))
                - (self.group2().zxyw() * other.group3().yzx().with_w(other[e4]))
                - (self.group2().ww().with_zw(self[e425], other[e3]) * other.group2().xyx().with_w(self[e412]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e1] * self[e423])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e125] * self[e431]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e235] * self[e412]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e315] * self[e423]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e125]]) * self.group0().zyz().with_w(other[e435]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e315]]) * self.group0().xxy().with_w(other[e425]))
                + (other.group3().yzzx() * self.group1().zx().with_zw(self[e12345], self[e235]))
                + (self.group1().xyzy() * other.group1().www().with_w(other[e315]))
                + (self.group1().wwwx() * other.group1().xyz().with_w(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group2().ww().with_zw(self[e425], self[e435]) * other.group3().xyx().with_w(other[e125]))
                - (self.group2().zxyw() * other.group0().yzx().with_w(other[e5])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        7       32        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0().with_w(self[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e321]),
            // e235, e315, e125, e5
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], other[e3215] * self[e321] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e12345])),
            // e1, e2, e3, e4
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd3        0        7        0
    //    simd4        8        3        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       36       48        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(other[e315] * self[e431]) - (other[e125] * self[e412])) + (self.group0().yzx() * other.group0().zxy()).with_w(other[e321] * self[e12345])
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (other.group0().xxy() * self.group1().wzx()).with_w(0.0) + (other.group0().zyz() * self.group1().yww()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group2().xyz()).with_w(0.0)
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group0().yzz()).with_w(0.0)
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group0().xyx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e431] * -1.0,
                other[e235] * self[e412] * -1.0,
                other[e315] * self[e423] * -1.0,
                other[e125] * self[e435],
            ]) + (other.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e415]),
        );
    }
}
impl GeometricProduct<AntiFlector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd3        0        5        0
    //    simd4       16       11        0
    // Totals...
    // yes simd       31       48        0
    //  no simd       79       91        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w(other[e125] * self[e412])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(other[e321] * self[e12345])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                0.0,
            ]) - (self.group1().zx().with_zw(self[e12345], other[e2]) * other.group0().yzz().with_w(self[e431]))
                - (self.group2().ww().with_zw(self[e425], other[e1]) * other.group0().xyx().with_w(self[e423]))
                - (other.group0().www() * self.group2().xyz()).with_w(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e425]]) * self.group0().zyz().with_w(other[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e415]]) * self.group0().xxy().with_w(other[e235]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + (other.group1().xyxx() * self.group2().ww().with_zw(self[e425], self[e235]))
                + (other.group1().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<AntiLine> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       45        0
    //    simd3        0        6        0
    //    simd4        7        1        0
    // Totals...
    // yes simd       29       52        0
    //  no simd       50       67        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[e12] * self[e423],
                other[e23] * self[e431],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group1().xxy() * self.group1().wzx()).with_w(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (other.group1().zxy() * self.group0().yzx()).with_w(other[e23] * self[e423]),
        );
    }
}
impl GeometricProduct<AntiMotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd3        0        7        0
    //    simd4       10        3        0
    // Totals...
    // yes simd       42       66        0
    //  no simd       72       89        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (self.group0().xxy() * other.group0().wzx()).with_w(other[scalar] * self[e12345])
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[scalar] * self[e435]) + (other[e3215] * self[e412]),
                other[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).with_w(other[scalar] * self[e321])
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[scalar] * self[e235]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[scalar] * self[e315]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) + (self.group2().zxyw() * other.group0().yzx().with_w(other[e3215]))
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().xxy() * self.group1().wzx()).with_w(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(other[e23] * self[e423]),
        );
    }
}
impl GeometricProduct<AntiPlane> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       12        0
    //    simd3        1        6        0
    //    simd4        8        4        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       35       46        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e3] * self[e435] * -1.0)
                - (other.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * other.group0().www()).with_w(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e412] * -1.0])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e1] * self[e423])
                - (other.group0().www() * self.group1().xyz()).with_w(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxy() * self.group2().ww().with_zw(self[e425], self[e315]))
                + (other.group0().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + Simd32x3::from(0.0).with_w(other[e5] * self[e321])
                + (self.group0() * other.group0().www()).with_w(other[e1] * self[e235])
                - (other.group0().zxyw() * self.group1().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricProduct<AntiScalar> for CircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       55        0
    //    simd3        0       10        0
    //    simd4       17        7        0
    // Totals...
    // yes simd       43       72        0
    //  no simd       94      113        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]) - (other[e425] * self[e412]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]) - (other[e435] * self[e423]),
                -(other[e412] * self[e321]) - (other[e412] * self[e12345]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e425] * self[e435] * -1.0,
                other[e435] * self[e415] * -1.0,
                other[e435] * self[e12345] * -1.0,
                other[e321] * self[e12345],
            ]) + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (self.group2().ww().with_zw(self[e425], self[e412]) * other.group1().xyx().with_w(other[e125]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e423])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwy() * other.group2().zyz().with_w(other[e431]))
                + (self.group1().wzxx() * other.group2().xxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e425] * self[e315]) + (other[e435] * self[e125]),
            ]) + (other.group1().wwwx() * self.group1().xyz().with_w(self[e235]))
                + (self.group1().wwwz() * other.group1().xyz().with_w(other[e125]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e415])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e425]),
        );
    }
}
impl GeometricProduct<CircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       57        0
    //    simd3        0        8        0
    //    simd4       18       10        0
    // Totals...
    // yes simd       51       75        0
    //  no simd      105      121        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e12345] * self[e423]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e12345] * self[e431]),
                -(other[e412] * self[e12345]) - (other[e415] * self[e431]) - (other[e12345] * self[e412]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321]))
                - (self.group2().ww().with_zw(self[e321], self[e12345]) * other.group0().with_w(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e321] * self[e12345]) + (other[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e431]))
                - (self.group2().ww().with_zw(self[e425], other[e125]) * other.group1().xyx().with_w(self[e412]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e12345] * self[e235]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e12345] * self[e315]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e12345] * self[e125]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwz() * other.group2().zyz().with_w(other[e412]))
                + (self.group1().wzxy() * other.group2().xxy().with_w(other[e431]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group1().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e425] * self[e315]),
        );
    }
}
impl GeometricProduct<Dipole> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       61        0
    //    simd3        0       10        0
    //    simd4       15        5        0
    // Totals...
    // yes simd       49       76        0
    //  no simd       94      111        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e12345] * other[e41]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e12345] * other[e42]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e12345] * other[e43]),
                -(self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e12345] * other[e23], self[e12345] * other[e31], self[e12345] * other[e12], self[e12345] * other[e45] * -1.0])
                + (self.group2().zxyy() * other.group0().yzx().with_w(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e41])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e43])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e12345] * other[e15]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e12345] * other[e25]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e12345] * other[e35]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (self.group1().ywwy() * other.group2().zyz().with_w(other[e25]))
                - (self.group1().wzxx() * other.group2().xxy().with_w(other[e15]))
                - (self.group2().yzzx() * other.group1().zxwx())
                - (self.group2().xyx() * other.group1().wwy()).with_w(self[e435] * other[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().wwwz() * self.group1().xyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e31]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       56        0
    //    simd3        0       11        0
    //    simd4       29       19        0
    // Totals...
    // yes simd       62       86        0
    //  no simd      149      165        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().with_w(other[e41]))
                + (self.group1().zxyx() * other.group1().yzx().with_w(other[e4235]))
                + (self.group2().zxyz() * other.group0().yzx().with_w(other[e43]))
                + (self.group2().www() * other.group1().xyz()).with_w(self[e435] * other[e4125])
                + (other.group2().www() * self.group2().xyz()).with_w(self[e425] * other[e4315])
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e412] * other[e35])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e12345] * other[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e12345] * other[e15],
                self[e12345] * other[e25],
                self[e12345] * other[e35],
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e3215]]) * self.group2().zzyw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().with_zw(other[e4235], other[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (other.group3().xyzz() * self.group2().www().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e423] * other[e4235])
                - (other.group2().www() * self.group2().xyz()).with_w(self[e412] * other[e12]),
        );
    }
}
impl GeometricProduct<DualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        7       27        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e321] * other[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(other[e5]) * self.group1().xyz()) - (Simd32x3::from(other[e12345]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().with_zw(other[e5], (self[e321] * other[e5]) - (self[e12345] * other[e5])) * self.group0().with_w(1.0),
        );
    }
}
impl GeometricProduct<FlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd3        0        3        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       32       45        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * other[e25],
                self[e423] * other[e35],
                self[e431] * other[e15],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]),
                0.0,
            ]) - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e1, e2, e3, e4
            (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group1().xyz()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<Flector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd3        0        3        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       31       43        0
    //  no simd       76       88        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e435] * other[e4125]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group0().xyz().with_w(other[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group2().yzxz() * other.group1().zxyz())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group2().xxy().with_w(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group2().zyz().with_w(self[e321]))
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e12345] * other[e4125]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e4235]),
        );
    }
}
impl GeometricProduct<Line> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       43        0
    //    simd3        0        7        0
    //    simd4        9        2        0
    // Totals...
    // yes simd       25       52        0
    //  no simd       52       72        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e423] * other[e435] * -1.0,
                self[e431] * other[e415] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                0.0,
            ]) - (self.group1().zx().with_zw(self[e12345], other[e125]) * other.group0().yzz().with_w(self[e412]))
                - (self.group2().ww().with_zw(self[e425], other[e315]) * other.group0().xyx().with_w(self[e431]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e125] * other[e425]) - (self[e12345] * other[e235]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e12345] * other[e315]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e12345] * other[e125]),
                0.0,
            ]) + (other.group0().zxy() * self.group2().yzx()).with_w(self[e423] * other[e415])
                + (other.group1().xxy() * self.group1().wzx()).with_w(self[e431] * other[e425])
                + (other.group1().zyz() * self.group1().yww()).with_w(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e125] * other[e435]),
            ]) + (other.group0() * self.group1().www()).with_w(self[e315] * other[e425])
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e235] * other[e415]),
        );
    }
}
impl GeometricProduct<Motor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       44        0
    //    simd3        0        5        0
    //    simd4       13        8        0
    // Totals...
    // yes simd       38       57        0
    //  no simd       77       91        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e431] * other[e12345] * -1.0,
                self[e412] * other[e12345] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e423] * other[e235])
                - (other.group0().wzxw() * self.group0().xxy().with_w(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e435] * other[e425]) - (self[e12345] * other[e415]),
                (self[e435] * other[e415]) - (self[e425] * other[e12345]) - (self[e12345] * other[e425]),
                (self[e415] * other[e425]) - (self[e435] * other[e12345]) - (self[e12345] * other[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e321] * other[e12345])
                - (other.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).with_w(self[e412] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e12345] * other[e235]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]) - (self[e12345] * other[e315]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]) - (self[e12345] * other[e125]),
                0.0,
            ]) + (other.group0().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e425]),
            // e4235, e4315, e4125, e3215
            (self.group1().wwwz() * other.group0().xyz().with_w(other[e125]))
                + (other.group1().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (other.group1().wzxx() * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e321] * other[e5]) + (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]))
                - (other.group1().zxyw() * self.group0().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricProduct<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       79        0
    //    simd2        3        3        0
    //    simd3       40       54        0
    //    simd4       36       27        0
    // Totals...
    // yes simd      129      163        0
    //  no simd      320      355        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from([other[e423], other[scalar]]) * self.group2().xw())
                - (Simd32x2::from([other[e12345], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e12]]) * self.group2().xyz().with_w(self[e412]))
                - (other.group9().xyzz() * self.group2().www().with_w(self[e412]))
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e423] * other[e23])
                - (other.group4().yzx() * self.group2().zxy()).with_w(self[e423] * other[e4235]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e12345] * other[e3215])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e125] * other[e425] * -1.0,
                self[e315] * other[e321] * -1.0,
                self[e125] * other[e321] * -1.0,
                self[e12345] * other[e321],
            ]) + (self.group1().wzxw() * other.group8().xxy().with_w(other[e12345]))
                + (other.group8().zyz() * self.group1().yww()).with_w(self[e235] * other[e423])
                + (self.group2().yzx() * other.group1().zxy()).with_w(self[e315] * other[e431])
                + (self.group2().yzx() * other.group6().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e3]]) * self.group2().zxy().with_w(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().with_w(self[e425]))
                - (other.group0().yy().with_zw(other[e12345], self[e423]) * self.group2().xyz().with_w(other[e235]))
                - (self.group1().zx().with_zw(self[e12345], other[e125]) * other.group8().yzz().with_w(self[e412]))
                - (self.group2().ww().with_zw(self[e425], other[e315]) * other.group8().xyx().with_w(self[e431])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group7().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * other.group7())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy()) + (other.group7().zxy() * self.group2().yzx()) + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().xyz())
                - (Simd32x3::from(self[e12345]) * other.group6().xyz())
                - (Simd32x3::from(other[e12345]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group2().xyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (other.group7().yzx() * self.group2().zxy())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().with_w(other[e41]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().xyz().with_w(self[e435]))
                + (self.group2().zxyz() * other.group4().yzx().with_w(other[e43]))
                + (self.group1().zx().with_zw(self[e12345], other[e4315]) * other.group5().yzz().with_w(self[e425]))
                + (self.group2().ww().with_zw(self[e425], other[e4235]) * other.group5().xyx().with_w(self[e415]))
                - (other.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (other.group4().zxy() * self.group2().yzx()).with_w(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e412] * other[e35])
                - (self.group1().www() * other.group9().xyz()).with_w(self[e12345] * other[e45]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group4().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * other.group4())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group3().xyz())
                + (Simd32x3::from(other[scalar]) * self.group2().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                + (other.group5().yzx() * self.group2().zxy())
                + (self.group2().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group2().zyz())
                - (other.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e1]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e415]]) * self.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e5]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e425]]) * self.group0().zyz().with_w(other[e315]))
                + (self.group2().wwwy() * other.group1().xyzy())
                + (other.group6().xyzx() * self.group1().www().with_w(self[e235]))
                + (other.group7().zxy() * self.group2().yzx()).with_w(self[e435] * other[e125])
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e12345] * other[e5]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e12345] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       12       31        0
    //  no simd       29       50        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12345] * other[e4235] * -1.0,
                self[e12345] * other[e4315] * -1.0,
                self[e12345] * other[e4125] * -1.0,
                (self[e125] * other[e4125]) + (self[e12345] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (other.group0().wwwx() * self.group0().with_w(self[e235]))
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       14        0
    //    simd3        2        4        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       12       26        0
    //  no simd       40       58        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group1().xyz()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e415]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * other[e3],
                self[e125] * other[e1],
                self[e235] * other[e2],
                -(self[e412] * other[e3]) - (self[e321] * other[e4]) - (self[e12345] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyz().with_w(self[e423]))
                - (other.group0().yzxy() * self.group2().zxy().with_w(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e3]])
                + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e321]))
                + (self.group2().wwwy() * other.group0().xyzy())
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e235]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e12345] * other[e5]),
        );
    }
}
impl GeometricProduct<Scalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        2        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       43       58        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e425]))
                + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            (self.group1() * other.group0().www().with_w(other[e1234]))
                + (self.group2().yzxw() * other.group0().zxy().with_w(other[e1234]))
                + Simd32x3::from(0.0).with_w(-(self[e431] * other[e4315]) - (self[e412] * other[e4125]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e235] * other[e1234]) - (self[e12345] * other[e4235]),
                -(self[e315] * other[e1234]) - (self[e12345] * other[e4315]),
                -(self[e125] * other[e1234]) - (self[e12345] * other[e4125]),
                (self[e125] * other[e4125]) + (self[e12345] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (other.group0().wwwx() * self.group0().with_w(self[e235]))
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<VersorEven> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        0        7        0
    //    simd4       32       25        0
    // Totals...
    // yes simd       64       87        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e12345] * other[e423]),
                -(self[e412] * other[e1]) - (self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]) - (self[e12345] * other[e431]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]) - (self[e12345] * other[e412]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().with_zw(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().with_w(self[e321]))
                - (Simd32x4::from([other[e3], other[e12345], other[e415], other[e12345]]) * self.group0().yyy().with_w(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e431]) - (self[e12345] * other[e415]),
                -(self[e315] * other[e4]) - (self[e12345] * other[e425]),
                -(self[e125] * other[e4]) - (self[e12345] * other[e435]),
                (self[e125] * other[e412]) + (self[e12345] * other[e321]),
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group2().xxy().with_w(self[e435]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e12345] * other[e235]),
                -(self[e315] * other[e321]) - (self[e12345] * other[e315]),
                -(self[e125] * other[e321]) - (self[e12345] * other[e125]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e431] * other[e425])
                + (self.group2().yzx() * other.group3().zxy()).with_w(self[e415] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group2().zyzw())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group2().xxy().with_w(self[e321]))
                - (self.group1().xxy() * other.group2().wzx()).with_w(self[e423] * other[e1])
                - (self.group1().zyz() * other.group2().yww()).with_w(self[e431] * other[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e1]))
                + (self.group2().wwwy() * other.group3().xyz().with_w(other[e425]))
                + (other.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (other.group2().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (other.group2().wzxx() * self.group0().xxy().with_w(self[e415]))
                - (other.group2().zxyw() * self.group0().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricProduct<VersorOdd> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       54        0
    //    simd3        0        6        0
    //    simd4       31       26        0
    // Totals...
    // yes simd       67       86        0
    //  no simd      160      176        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41]),
                (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42]),
                (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxy().with_w(self[e12345]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e412] * other[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwz() * other.group1().xyz().with_w(other[e43]))
                - (self.group2().yzxw() * other.group0().zxy().with_w(other[e45]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e12345] * other[e15]),
                (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e125] * other[scalar]) + (self[e12345] * other[e35]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e3215]]) * self.group2().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().with_zw(other[e4235], other[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e423]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group1().zyz().with_w(self[e431]))
                - (other.group3().xyzz() * self.group2().www().with_w(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e23]),
        );
    }
}
impl std::ops::Div<geometric_product> for Dipole {
    type Output = geometric_product_partial<Dipole>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       58        0
    //    simd3        0       12        0
    //    simd4       15        4        0
    // Totals...
    // yes simd       49       74        0
    //  no simd       94      110        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zxyw() * other.group0().yzx().with_w(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e41])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e43])
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e41] * self[e15])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (self.group2().xyx() * other.group1().wwy()).with_w(other[e41] * self[e23])
                - (self.group2().yzz() * other.group1().zxw()).with_w(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e15])
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       67        0
    //    simd3        0       13        0
    //    simd4       24       11        0
    // Totals...
    // yes simd       62       91        0
    //  no simd      134      150        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e4] * self[e23]) + (other[e3] * self[e42]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e4] * self[e31]) + (other[e1] * self[e43]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e4] * self[e12]) + (other[e2] * self[e41]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e425], self[e35]]) * self.group0().xxx().with_w(other[e412]))
                - (Simd32x4::from([other[e2], other[e415], other[e321], other[e315]]) * self.group0().zzz().with_w(self[e42]))
                - (other.group1().zw().with_zw(other[e1], other[e235]) * self.group0().yyy().with_w(self[e41]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e431] * self[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e425] * self[e12]) + (other[e4] * self[e15]),
                (other[e435] * self[e23]) + (other[e4] * self[e25]),
                (other[e415] * self[e31]) + (other[e4] * self[e35]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().with_w(other[e412]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().with_w(other[e431]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e15])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group3().xyzx() * self.group1().wwwx())
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group2().xxy() * other.group1().wzx()).with_w(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (other.group3().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]),
                -(other[e435] * self[e43]) - (other[e4] * self[e45]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group0().zyz().with_w(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group0().xxy().with_w(self[e42]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e1] * self[e41])
                - (self.group2() * other.group2().www()).with_w(other[e412] * self[e12])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e31])
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e425] * self[e42])
                - (self.group1().www() * other.group1().xyz()).with_w(other[e415] * self[e41]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       24        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd3        0        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       27       45        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e43],
                other[e125] * self[e41],
                other[e235] * self[e42],
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e321] * self[e15]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) - (other.group0().zxyx() * self.group1().yzxx()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       43        0
    //    simd3        0        3        0
    //    simd4       10        7        0
    // Totals...
    // yes simd       35       53        0
    //  no simd       65       80        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e3] * self[e42],
                other[e1] * self[e43],
                other[e2] * self[e41],
                -(other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]),
                (other[e235] * self[e42]) + (other[e5] * self[e43]),
                -(other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e5] * self[e31]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e5] * self[e12]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], self[e45]]) * self.group2().xxy().with_w(other[e5]))
                - (other.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e2] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e125] * self[e42]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e235] * self[e43]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e315] * self[e41]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e3] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       43        0
    //    simd3        0        6        0
    //    simd4        6        0        0
    // Totals...
    // yes simd       26       49        0
    //  no simd       44       61        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e31] * self[e43],
                other[e12] * self[e41],
                other[e23] * self[e42],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[e35] * self[e42]),
                -(other[e23] * self[e12]) - (other[e15] * self[e43]),
                -(other[e31] * self[e23]) - (other[e25] * self[e41]),
                other[e35] * self[e43],
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e41])
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e25] * self[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]),
                other[e12] * self[e43] * -1.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e15] * self[e43]),
                (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group1().yzx() * self.group0().zxy()).with_w(other[e23] * self[e15]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       47        0
    //    simd3        0        6        0
    //    simd4       10        4        0
    // Totals...
    // yes simd       35       57        0
    //  no simd       65       81        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[e35] * self[e42]),
                -(other[e23] * self[e12]) - (other[e15] * self[e43]),
                -(other[e31] * self[e23]) - (other[e25] * self[e41]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e35] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e3215] * self[e23]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e3215] * self[e31]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e3215] * self[e12]),
                other[e12] * self[e43] * -1.0,
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(other[e3215] * self[e45])
                - (self.group0().xxy() * other.group1().wzx()).with_w(other[e23] * self[e15])
                - (self.group0().zyz() * other.group1().yww()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       20        0
    //    simd3        1        5        0
    //    simd4        5        2        0
    // Totals...
    // yes simd        8       27        0
    //  no simd       25       43        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], -(other[e2] * self[e31]) - (other[e3] * self[e12])])
                - (other.group0().xyzx() * self.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([other[e3] * self[e25] * -1.0, other[e1] * self[e35] * -1.0, other[e2] * self[e15] * -1.0, other[e3] * self[e43]])
                + (other.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e2] * self[e42]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e2] * self[e12], other[e3] * self[e23], other[e1] * self[e31], -(other[e2] * self[e25]) - (other[e3] * self[e35])])
                + (self.group0() * other.group0().www()).with_w(other[e5] * self[e45])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e1] * self[e15]),
        );
    }
}
impl GeometricProduct<AntiScalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        );
    }
}
impl GeometricProduct<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       13        0
    //    simd4       14        2        0
    // Totals...
    // yes simd       42       68        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().xxy() * self.group1().wzx()).with_w(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e431] * self[e25])
                - (self.group0().xyx() * other.group1().wwy()).with_w(other[e412] * self[e35])
                - (self.group0().yzz() * other.group1().zxw()).with_w(other[e235] * self[e41]),
            // e415, e425, e435, e321
            (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e15])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e431] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e35])
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e42])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e125] * self[e12]),
            ]) - (self.group1().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (self.group2().yzx() * other.group1().zxy()).with_w(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (self.group1().wwwz() * other.group1().xyz().with_w(other[e412]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e31]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       63        0
    //    simd3        0       12        0
    //    simd4       15        3        0
    // Totals...
    // yes simd       49       78        0
    //  no simd       94      111        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e12345] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().xxy() * self.group1().wzx()).with_w(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e431] * self[e25])
                - (self.group0().xyx() * other.group1().wwy()).with_w(other[e412] * self[e35])
                - (self.group0().yzz() * other.group1().zxw()).with_w(other[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e15])
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e35])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e12345] * self[e15]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e12345] * self[e25]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) - (other.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (self.group1().wwwz() * other.group1().xyz().with_w(other[e412]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e31]),
        );
    }
}
impl GeometricProduct<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       13        0
    //    simd4       14        2        0
    // Totals...
    // yes simd       42       68        0
    //  no simd       84      100        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zxyw() * other.group0().yzx().with_w(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e41])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e25] * self[e42])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e43])
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e41] * self[e15])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (self.group2().xyx() * other.group1().wwy()).with_w(other[e42] * self[e31])
                - (self.group2().yzz() * other.group1().zxw()).with_w(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e23])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e25] * self[e31]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       68        0
    //    simd3        0       10        0
    //    simd4       23       13        0
    // Totals...
    // yes simd       65       91        0
    //  no simd      134      150        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e41] * other[e4125]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e42] * other[e4235]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e42] * other[e25])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e43] * other[e35])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e45] * other[e4235]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e35]]) * self.group2().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e41])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e25] * other[e42])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e31]]) * self.group2().zzz().with_w(self[e42]))
                - (other.group1().zw().with_zw(other[e4235], other[e4235]) * self.group2().yyy().with_w(self[e41]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e42] * other[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e45] * other[e23]),
                (self[e31] * other[e45]) + (self[e45] * other[e31]),
                (self[e12] * other[e45]) + (self[e45] * other[e12]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e15]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e35] * other[e12]),
        );
    }
}
impl GeometricProduct<DualNum> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        6       21        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e45] * other[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e5]) * self.group0().with_w(self[e45]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd3        0        4        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       28       44        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * other[e35] * -1.0,
                self[e43] * other[e15] * -1.0,
                self[e41] * other[e25] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group0().xyz()).with_w(0.0) + (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group2()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricProduct<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       25        0
    //    simd3        0        5        0
    //    simd4       15       10        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       71       80        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e4315],
                self[e42] * other[e45],
                self[e43] * other[e45],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w(-(self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                + (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35])
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group2().xxy().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group2().zyz().with_w(self[e42]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e43] * other[e4125]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().with_w(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().with_w(self[e35]))
                + Simd32x3::from(0.0).with_w(self[e45] * other[e3215])
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e35])),
        );
    }
}
impl GeometricProduct<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       41        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       23       48        0
    //  no simd       44       62        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e41] * other[e435],
                self[e42] * other[e415],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group2().yzx() * other.group0().zxy()).with_w(self[e15] * other[e415])
                - (other.group1().zxy() * self.group1().yzx()).with_w(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e315], self[e41] * other[e125], self[e42] * other[e235], self[e43] * other[e435] * -1.0])
                - (other.group0() * self.group1().www()).with_w(self[e42] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd3        0        5        0
    //    simd4        8        3        0
    // Totals...
    // yes simd       40       62        0
    //  no simd       64       81        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]),
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) - (other.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e45] * other[e315]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e45] * other[e125]) + (self[e35] * other[e12345]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) + (self.group2().xxy() * other.group0().wzx()).with_w(self[e45] * other[e5])
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]),
                self[e43] * other[e435] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       70        0
    //    simd2        9        9        0
    //    simd3       36       51        0
    //    simd4       31       20        0
    // Totals...
    // yes simd      114      150        0
    //  no simd      288      321        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0])
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (self.group2().yzx() * other.group7().zxy()).with_w(self[e43] * other[e3])
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e41] * other[e415])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e23] * other[e423])
                - (self.group1().www() * other.group6().xyz()).with_w(self[e31] * other[e431]),
            // e5
            (self[e45] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().with_w(self[e45]))
                + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e25]]) * self.group2().zzy().with_w(self[e42]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e15]]) * self.group2().yxx().with_w(self[e41]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group1().xxy().with_w(self[e43]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e4235])),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().xxy() * self.group1().wzx())
                - (other.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().xyz())
                + (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group2().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group2().xxy())
                + (other.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (self.group2().yzx() * other.group4().zxy())
                - (other.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e25] * other[e4]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e35] * other[e4]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e431]]) * self.group0().xxy().with_w(self[e25]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e412]]) * self.group0().zyz().with_w(self[e35]))
                + (other.group0().yy().with_zw(other[e12345], self[e15]) * self.group1().xyz().with_w(other[e423]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e45] * other[e12345])
                - (self.group2().yzx() * other.group7().zxy()).with_w(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                + (other.group7().yzx() * self.group1().zxy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (other.group7().xxy() * self.group1().wzx())
                - (other.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (self.group2().zyz() * other.group6().yww())
                + (other.group8().xyx() * self.group1().wwy())
                + (other.group8().yzz() * self.group1().zxw())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy())
                - (other.group8().zxy() * self.group1().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (other.group5() * self.group1().www()).with_w(self[e45] * other[e3215])
                + (self.group0().yzx() * other.group3().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * other.group9().zxy().with_w(other[e15]))
                - (self.group2().yzx() * other.group4().zxy()).with_w(self[e35] * other[e12]),
            // e1234
            -(self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       25       40        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd3        2        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       13       24        0
    //  no simd       38       51        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group1().xyz().with_w(self[e42]))
                + (other.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w(self[e43] * other[e3])
                - (other.group0().zxyw() * self.group2().yzx().with_w(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], self[e35] * other[e3] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e45]))
                - (other.group0().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (other.group0().wwwx() * self.group2().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<Scalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group2(),
        );
    }
}
impl GeometricProduct<Sphere> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().with_w(self[e15]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25])),
        );
    }
}
impl GeometricProduct<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       73        0
    //    simd3        0        9        0
    //    simd4       24       15        0
    // Totals...
    // yes simd       72       97        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().with_zw(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group0().xyzy() * self.group1().www().with_w(self[e25]))
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group2().xxy().with_w(self[e35]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e25] * other[e431])
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group2().xxy().with_w(self[e45]))
                - (other.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (other.group3().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (self.group0().xxy() * other.group2().wzx()).with_w(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e42] * other[e2])
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e43] * other[e3])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group2().zyz().with_w(self[e43]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group2().xxy().with_w(self[e42]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e423]))
                - (self.group1().wwwy() * other.group1().xyz().with_w(other[e431]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       72        0
    //    simd3        0        8        0
    //    simd4       24       16        0
    // Totals...
    // yes simd       72       96        0
    //  no simd      144      160        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e45]) + (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e41] * other[e4125]) + (self[e42] * other[scalar]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e42] * other[e4235]) + (self[e43] * other[scalar]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (other.group0().xyzx() * self.group1().www().with_w(self[e15]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e45] * other[e4235]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e45] * other[e4315]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group2().zyz().with_w(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e35]]) * self.group2().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                - (other.group0().zxyy() * self.group2().yzx().with_w(self[e25]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e31]]) * self.group2().zzz().with_w(self[e42]))
                - (other.group1().zw().with_zw(other[e4235], other[e4235]) * self.group2().yyy().with_w(self[e41]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e42] * other[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e45] * other[e23]),
                (self[e31] * other[e45]) + (self[e45] * other[e31]),
                (self[e12] * other[e45]) + (self[e45] * other[e12]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e15]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e35] * other[e12]),
        );
    }
}
impl std::ops::Div<geometric_product> for DipoleInversion {
    type Output = geometric_product_partial<DipoleInversion>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       70        0
    //    simd3        0        9        0
    //    simd4       26       17        0
    // Totals...
    // yes simd       71       96        0
    //  no simd      149      165        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().with_w(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[scalar] * self[e23]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[scalar] * self[e31]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[scalar] * self[e12]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (other.group2().yzxz() * self.group0().zxy().with_w(self[e43]))
                + (self.group1().zxyw() * other.group1().yzx().with_w(other[scalar]))
                + (self.group2().zx().with_zw(self[e3215], other[e25]) * other.group0().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], other[e15]) * other.group0().xyx().with_w(self[e41]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[scalar] * self[e15],
                other[scalar] * self[e25],
                other[scalar] * self[e35],
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group2().yzzw() * self.group3().zx().with_zw(self[e45], self[e1234]))
                + (self.group1().zx().with_zw(self[e4315], self[e1234]) * other.group2().yzx().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41]))
                + (other.group2().xyx() * self.group1().wwy()).with_w(other[e43] * self[e4125])
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (self.group3().ww().with_zw(self[e25], self[e3215]) * other.group0().xyx().with_w(other[scalar]))
                - (other.group1().zxyz() * self.group3().yzx().with_w(self[e35]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e31] * self[e25])
                - (self.group2().www() * other.group2().xyz()).with_w(other[e45] * self[e3215]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       62        0
    //    simd3        0       15        0
    //    simd4       45       30        0
    // Totals...
    // yes simd       74      107        0
    //  no simd      209      227        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4] * self[e23],
                other[e4] * self[e31],
                other[e4] * self[e12],
                -(other[e435] * self[e12]) - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(self[e1234]) * other.group1().xyz().with_w(other[e5]))
                + (Simd32x4::from([other[e425], other[e1], other[e415], self[e4125]]) * self.group0().zzy().with_w(other[e3]))
                + (Simd32x4::from([other[e3], other[e435], other[e2], self[e4315]]) * self.group0().yxx().with_w(other[e2]))
                + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e3215]]) * other.group0().yxx().with_w(other[e4]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e4235]]) * other.group0().zzy().with_w(other[e1]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().with_zw(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e415] * self[e23])
                - (self.group2().www() * other.group3().xyz()).with_w(other[e425] * self[e31]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4235]]) * self.group0().zyz().with_w(other[e415]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e35]]) * self.group0().xxy().with_w(other[e412]))
                + (self.group2() * other.group2().www().with_w(other[e5]))
                + (other.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (self.group2().www() * other.group2().xyz()).with_w(other[e435] * self[e4125])
                - (self.group3() * other.group1().www().with_w(other[e4]))
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e45]) * other.group1().yzz().with_w(other[e5]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).with_w(other[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e2] * self[e12], other[e3] * self[e23], other[e1] * self[e31], other[e4] * self[e45] * -1.0])
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4125]]) * self.group0().zyz().with_w(other[e412]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e4315]]) * self.group0().xxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                + (other.group1().zxy() * self.group3().yzx()).with_w(other[e1] * self[e41])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e2] * self[e42])
                + (self.group2().www() * other.group2().xyz()).with_w(other[e3] * self[e43])
                - (self.group1().ww().with_zw(self[e4315], other[e415]) * other.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().zx().with_zw(self[e45], other[e425]) * other.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e412] * self[e12])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e435] * self[e43])
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e321] * self[e1234]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       13        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        4       19        0
    //  no simd       14       34        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group0().with_w(self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e23], other[scalar] * self[e31], other[scalar] * self[e12], other[e3215] * self[e1234] * -1.0])
                + (other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group0().with_w(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[e3215]) * self.group3().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz()))
                .with_w(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                other[scalar] * self[e3215],
            ]) + (other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group3().xyz().with_w(self[e45])),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd3        3        5        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       44       67        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                other[e125] * self[e43] * -1.0,
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e315] * self[e4315]) - (other[e125] * self[e12]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group1().wwy().with_w(self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().xyz()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(other[e321] * self[e1234] * -1.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       54        0
    //    simd3        0        6        0
    //    simd4       18       12        0
    // Totals...
    // yes simd       54       72        0
    //  no simd      108      120        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w((other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e1] * self[e4235])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e42]))
                - (self.group2().www() * other.group1().xyz()).with_w(other[e125] * self[e43]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e3] * self[e4315]),
                (other[e315] * self[e1234]) + (other[e1] * self[e4125]) + (other[e5] * self[e42]),
                (other[e125] * self[e1234]) + (other[e2] * self[e4235]) + (other[e5] * self[e43]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e1234]]) * self.group0().xxy().with_w(other[e5]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (other.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e23]))
                - (self.group1().ww().with_zw(self[e4315], other[e125]) * other.group1().xyx().with_w(self[e43]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group1().wwy().with_w(self[e3215]))
                + (self.group1().zx().with_zw(self[e4315], self[e45]) * other.group0().yzx().with_w(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx())
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group2().www() * other.group0().xyz()).with_w(other[e3] * self[e43])
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e321] * self[e1234]),
        );
    }
}
impl GeometricProduct<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       51        0
    //    simd3        0        8        0
    //    simd4       12        4        0
    // Totals...
    // yes simd       42       63        0
    //  no simd       78       91        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e23]),
            // e23, e31, e12, e45
            (self.group0().zx().with_zw(self[e1234], self[e43]) * other.group1().yzz().with_w(other[e35]))
                + (self.group2().ww().with_zw(self[e42], self[e42]) * other.group1().xyx().with_w(other[e25]))
                + Simd32x3::from(0.0).with_w(other[e12] * self[e4125] * -1.0)
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e41])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                0.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group0().zx().with_zw(self[e1234], self[e35]) * other.group1().yzz().with_w(other[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * other.group1().xyx().with_w(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e23] * self[e15]),
        );
    }
}
impl GeometricProduct<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       58        0
    //    simd3        0       10        0
    //    simd4       18        8        0
    // Totals...
    // yes simd       51       76        0
    //  no simd      105      120        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[scalar] * self[e42]),
                (other[e12] * self[e1234]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group0().xxy() * other.group0().wzx()).with_w(other[e3215] * self[e1234])
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e35] * self[e43])
                - (other.group0().zxyy() * self.group1().yzx().with_w(self[e4315]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e23] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[scalar] * self[e15])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235]),
                (other[e12] * self[e15])
                    + (other[scalar] * self[e25])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215])
                    + (other[scalar] * self[e35])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e12] * self[e45]) + (other[scalar] * self[e4125]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e4315], self[e45]) * other.group0().xyx().with_w(other[e3215]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[scalar] * self[e3215])
                - (other.group0().zxyz() * self.group3().yzx().with_w(self[e35]))
                - (other.group1().xyzx() * self.group2().www().with_w(self[e23]))
                - (self.group0().xxy() * other.group1().wzx()).with_w(other[e23] * self[e15])
                - (self.group0().zyz() * other.group1().yww()).with_w(other[e31] * self[e25]),
        );
    }
}
impl GeometricProduct<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       35        0
    //    simd3        0        3        0
    //    simd4        8        5        0
    // Totals...
    // yes simd       20       43        0
    //  no simd       44       64        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(other[e1] * self[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (self.group0() * other.group0().www()).with_w(other[e5] * self[e1234])
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, other[e3] * self[e43]])
                + (other.group0().wwwx() * self.group0().with_w(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e2] * self[e42]),
        );
    }
}
impl GeometricProduct<AntiScalar> for DipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       62        0
    //    simd3        0        9        0
    //    simd4       25       16        0
    // Totals...
    // yes simd       59       87        0
    //  no simd      134      153        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * other.group1().wwy()).with_w(other[e235] * self[e41])
                - (self.group0().yzz() * other.group1().zxw()).with_w(other[e315] * self[e42]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (other.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                + (self.group0().zx().with_zw(self[e1234], self[e4235]) * other.group2().yzz().with_w(other[e415]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e35]) * other.group2().xyx().with_w(other[e412]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e42])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]),
                (other[e415] * self[e25]) + (other[e435] * self[e3215]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group2().xyx() * self.group1().wwy()).with_w(other[e321] * self[e3215])
                - (self.group1().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (self.group3().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[e4125]) * other.group2().yzz().with_w(other[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * other.group2().xyx().with_w(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                - (self.group1().ww().with_zw(self[e4315], other[e415]) * other.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().zx().with_zw(self[e45], other[e425]) * other.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e412] * self[e12]),
        );
    }
}
impl GeometricProduct<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       61        0
    //    simd3        0       15        0
    //    simd4       29       15        0
    // Totals...
    // yes simd       62       91        0
    //  no simd      149      166        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * other.group1().wwy()).with_w(other[e235] * self[e41])
                - (self.group0().yzz() * other.group1().zxw()).with_w(other[e315] * self[e42]),
            // e415, e425, e435, e321
            (other.group1().yzxx() * self.group1().zxy().with_w(self[e4235]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e412] * self[e35])
                + (other.group2().www() * self.group1().xyz()).with_w(other[e435] * self[e4125])
                + (self.group2().www() * other.group2().xyz()).with_w(other[e425] * self[e4315])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e12345] * self[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e3215]) * other.group1().yzz().with_w(other[e12345]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (self.group3().yzxz() * other.group1().zxy().with_w(other[e412]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e4315])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e12345] * self[e1234])
                - (self.group1().ww().with_zw(self[e4315], other[e415]) * other.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().zx().with_zw(self[e45], other[e425]) * other.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e412] * self[e12])
                - (other.group2().www() * self.group3().xyz()).with_w(other[e435] * self[e43]),
        );
    }
}
impl GeometricProduct<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       66        0
    //    simd3        0        8        0
    //    simd4       23       15        0
    // Totals...
    // yes simd       65       89        0
    //  no simd      134      150        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().with_w(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e45] * self[e4235]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e45] * self[e4315]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group2().zx().with_zw(self[e3215], self[e42]) * other.group0().yzz().with_w(other[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * other.group2().xyx().with_w(other[e35]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * other.group0().xyx().with_w(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e31] * self[e35],
                other[e12] * self[e15],
                other[e12] * self[e3215],
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                + (self.group1().zx().with_zw(self[e4315], self[e4315]) * other.group2().yzx().with_w(other[e42]))
                + (self.group3().zx().with_zw(self[e45], self[e4125]) * other.group2().yzz().with_w(other[e43]))
                + (other.group2().xyx() * self.group1().wwy()).with_w(other[e41] * self[e4235])
                - (self.group1().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e42] * self[e31])
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e43] * self[e12])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (self.group0().zx().with_zw(self[e1234], self[e31]) * other.group2().yzz().with_w(other[e25]))
                - (self.group2().ww().with_zw(self[e42], self[e4235]) * other.group2().xyx().with_w(other[e15]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e23]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       89        0
    //    simd3        0       12        0
    //    simd4       37       25        0
    // Totals...
    // yes simd       98      126        0
    //  no simd      209      225        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e1234] * self[e23]) + (other[e4235] * self[e1234]) + (other[e4315] * self[e43]),
                (other[e31] * self[e1234]) + (other[e45] * self[e42]) + (other[e1234] * self[e31]) + (other[e4315] * self[e1234]) + (other[e4125] * self[e41]),
                (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[e1234] * self[e12]) + (other[e4235] * self[e42]) + (other[e4125] * self[e1234]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().with_w(other[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e3215]]) * other.group0().zzy().with_w(other[e1234]))
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e3215] * self[e1234])
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(other[e15] * self[e41])
                - (self.group0().yzx() * other.group3().zxy()).with_w(other[e25] * self[e42])
                - (other.group2().www() * self.group3().xyz()).with_w(other[e35] * self[e43]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125]),
                (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235]),
                (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e3215]]) * self.group0().zyz().with_w(other[e1234]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group0().xxy().with_w(self[e43]))
                + (self.group2().zx().with_zw(self[e3215], other[e25]) * other.group0().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], other[e15]) * other.group0().xyx().with_w(self[e41]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group3().yzxx() * other.group3().zxy().with_w(other[e23]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e12] * self[e43]) - (other[e1234] * self[e45]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (self.group1().zx().with_zw(self[e4315], self[e1234]) * other.group2().yzx().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41]))
                + (other.group2().xyx() * self.group1().wwy()).with_w(other[e43] * self[e4125])
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (self.group2().zx().with_zw(self[e3215], other[e31]) * other.group3().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], other[e4235]) * other.group3().xyx().with_w(self[e41]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e1234] * self[e15]) + (other[e4315] * self[e12]),
                (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e1234] * self[e25]) + (other[e4125] * self[e23]),
                (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e4315], self[e45]) * other.group1().xyx().with_w(other[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e4235]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e4125] * self[e35])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e35]]) * self.group0().zyz().with_w(other[e12]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e25]]) * self.group0().xxy().with_w(other[e31]))
                - (other.group1().zxyw() * self.group3().yzxw())
                - (other.group2().xyzx() * self.group2().www().with_w(self[e23]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e15] * self[e4235]),
        );
    }
}
impl GeometricProduct<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        4       15        0
    //  no simd       15       31        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().with_zw(other[e12345], other[e5]) * self.group0().with_w(self[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e23] * other[e12345], self[e31] * other[e12345], self[e12] * other[e12345], self[e45] * other[e12345] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], 0.0])
                + (Simd32x4::from(other[e5]) * self.group1())
                + (self.group3() * other.group0().xx().with_zw(other[e5], other[e12345])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group3().xyz())).with_w(self[e1234] * other[e12345]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd3        5        6        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       20       34        0
    //  no simd       45       64        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e42] * other[e35] * -1.0, self[e43] * other[e15] * -1.0, self[e41] * other[e25] * -1.0, 0.0])
                + (other.group0().xyzy() * self.group2().www().with_w(self[e42]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * other.group0().xyz()) + (self.group1().zxy() * other.group0().yzx()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group2().xyz())
                - (self.group1().yzx() * other.group0().zxy())
                - (self.group3().yzx() * other.group0().zxy()))
            .with_w(self[e1234] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e12] * other[e35]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) - (other.group0().xyzy() * self.group2().www().with_w(self[e31]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricProduct<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       49        0
    //    simd3        0        5        0
    //    simd4       19       14        0
    // Totals...
    // yes simd       51       68        0
    //  no simd      108      120        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e4235],
                self[e1234] * other[e4315],
                self[e1234] * other[e4125],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group0().zyz().with_w(self[e1234]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e15]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]),
                (self[e1234] * other[e25]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]),
                (self[e1234] * other[e35]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35])
                - (other.group1().zxyy() * self.group3().yzx().with_w(self[e31]))
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxy().with_w(self[e1234]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e41] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e4125]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e35]))
                - (other.group0().xyzx() * self.group2().www().with_w(self[e4235])),
        );
    }
}
impl GeometricProduct<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       52        0
    //    simd3        0        9        0
    //    simd4       12        3        0
    // Totals...
    // yes simd       42       64        0
    //  no simd       78       91        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]),
                (self[e41] * other[e435]) + (self[e1234] * other[e425]),
                (self[e42] * other[e415]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e43] * other[e125] * -1.0)
                + (other.group1() * self.group2().www()).with_w(self[e4125] * other[e435])
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e4235] * other[e415])
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e4315] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) - (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(self[e25] * other[e425])
                - (other.group1().zxy() * self.group3().yzx()).with_w(self[e35] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435]),
                (self[e41] * other[e125]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415]),
                (self[e42] * other[e235]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425]),
                0.0,
            ]) - (self.group1().ww().with_zw(self[e4315], other[e425]) * other.group0().xyx().with_w(self[e42]))
                - (self.group3().zx().with_zw(self[e45], other[e435]) * other.group0().yzz().with_w(self[e43]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       60        0
    //    simd3        0        8        0
    //    simd4       17        9        0
    // Totals...
    // yes simd       54       77        0
    //  no simd      105      120        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]),
                (self[e42] * other[e12345]) + (self[e1234] * other[e425]),
                (self[e43] * other[e12345]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xxy() * other.group0().wzx()).with_w(self[e1234] * other[e5])
                - (self.group0().yzx() * other.group0().zxy()).with_w(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) + (other.group0().ywwz() * self.group1().zyz().with_w(self[e4125]))
                + (other.group0().wzxy() * self.group1().xxy().with_w(self[e4315]))
                + (other.group1().wzxw() * self.group0().xxy().with_w(self[e1234]))
                + (self.group0().zyz() * other.group1().yww()).with_w(self[e4235] * other[e415])
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415]),
                (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e12345])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425]),
                (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e12345])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435]),
                -(self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (self.group1().xxyw() * other.group1().wzxw())
                + (self.group1().zyz() * other.group1().yww()).with_w(self[e3215] * other[e12345])
                - (self.group1().yzxx() * other.group1().zxyx())
                - (other.group1().zxyz() * self.group3().yzx().with_w(self[e12]))
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435]) - (self[e4125] * other[e425]),
                (self[e42] * other[e5]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415]) - (self[e4315] * other[e12345]),
                (self[e43] * other[e5]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425]) - (self[e4125] * other[e12345]),
                0.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).with_w(self[e1234] * other[e12345])
                - (other.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (other.group0().wzxz() * self.group3().xxy().with_w(self[e43]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e415]),
        );
    }
}
impl GeometricProduct<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       94        0
    //    simd2       11       11        0
    //    simd3       56       76        0
    //    simd4       49       34        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      448      480        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e2], other[e321], other[e321], self[e4315]]) * self.group1().zyz().with_w(other[e431]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e1234]]) * self.group0().xxy().with_w(other[e12345]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], self[e4235]]) * self.group1().xxy().with_w(other[e423]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e1]]) * self.group0().zyz().with_w(self[e41]))
                + (other.group8() * self.group2().www()).with_w(self[e43] * other[e3])
                + (other.group7().zxy() * self.group2().yzx()).with_w(self[e42] * other[e2])
                + (self.group3().yzx() * other.group6().zxy()).with_w(self[e4125] * other[e412])
                - (Simd32x4::from(other[e4]) * self.group2().xyz().with_w(self[e45]))
                - (other.group6().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (other.group0().yy().with_zw(other[e12345], self[e41]) * self.group3().xyz().with_w(other[e415]))
                - (self.group2().zx().with_zw(self[e3215], self[e23]) * other.group7().yzz().with_w(other[e423]))
                - (self.group3().ww().with_zw(self[e25], other[e435]) * other.group7().xyx().with_w(self[e43]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e42] * other[e425])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e31] * other[e431])
                - (self.group1().www() * other.group6().xyz()).with_w(self[e12] * other[e412]),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]),
                (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]),
                (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group1().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (self.group2().zx().with_zw(self[e3215], other[e25]) * other.group5().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], other[e15]) * other.group5().xyx().with_w(self[e41]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group2().xxy().with_w(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e4235]]) * self.group2().zyz().with_w(other[e23]))
                - (self.group2().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e25] * other[e42])
                - (self.group3().yzx() * other.group3().zxy()).with_w(self[e4315] * other[e31])
                - (self.group3().www() * other.group9().xyz()).with_w(self[e4125] * other[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group5())
                + (Simd32x3::from(self[e1234]) * other.group9().xyz())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group4().zzy())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().xyz())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().xyz())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group3().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group3().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx())
                - (self.group3().yzx() * other.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().with_w(other[e431]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().with_w(other[e412]))
                + (other.group6().yzxz() * self.group1().zxy().with_w(self[e4125]))
                + (other.group0().yy().with_zw(other[e12345], other[e423]) * self.group1().xyz().with_w(self[e15]))
                + (self.group2().zx().with_zw(self[e3215], other[e415]) * other.group7().yzz().with_w(self[e4235]))
                + (self.group3().ww().with_zw(self[e25], other[e5]) * other.group7().xyx().with_w(self[e1234]))
                + (other.group8() * self.group2().www()).with_w(self[e4315] * other[e425])
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group3().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group3().xxy().with_w(self[e23]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e45] * other[e12345])
                - (other.group7().zxy() * self.group2().yzx()).with_w(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group7().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group7().zzy())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group3().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[e4315]]) * other.group8().yzx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (other.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (other.group8().zxy() * self.group3().yzx())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e4125] * other[e31]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e35] * other[e1234]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e4315], other[e4125]) * other.group5().xyx().with_w(self[e35]))
                + (self.group2().zx().with_zw(self[e3215], other[e4315]) * other.group4().yzz().with_w(self[e25]))
                + (self.group3().ww().with_zw(self[e25], other[e4235]) * other.group4().xyx().with_w(self[e15]))
                + (self.group0().yzx() * other.group3().zxy()).with_w(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e25]]) * self.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e15]]) * self.group0().xxy().with_w(other[e23]))
                - (self.group1().yzxy() * other.group9().zxy().with_w(other[e25]))
                - (self.group2().yzxz() * other.group4().zxy().with_w(other[e12]))
                - (other.group3().xyzz() * self.group2().www().with_w(self[e12]))
                - (other.group5().zxy() * self.group3().yzx()).with_w(self[e23] * other[e15]),
            // e1234
            (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       37        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       44       61        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e4235],
                self[e1234] * other[e4315],
                self[e1234] * other[e4125],
                -(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) - (other.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                self[e43] * other[e4125] * -1.0,
            ]) - (other.group0().xyzy() * self.group3().www().with_w(self[e42]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       39        0
    //    simd3        0        1        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       29       49        0
    //  no simd       59       78        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * other[e2]) - (self[e1234] * other[e1]) - (self[e4235] * other[e4]),
                -(self[e41] * other[e3]) - (self[e1234] * other[e2]) - (self[e4315] * other[e4]),
                -(self[e42] * other[e1]) - (self[e1234] * other[e3]) - (self[e4125] * other[e4]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (other.group0().wwwx() * self.group1().xyz().with_w(self[e4235]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e1234] * other[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().with_w(self[e1234]))
                - (self.group1().wwwx() * other.group0().xyzx())
                - (other.group0().yzxy() * self.group3().zxy().with_w(self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e4235] * other[e5]) + (self[e3215] * other[e1]),
                (self[e15] * other[e3]) + (self[e4315] * other[e5]) + (self[e3215] * other[e2]),
                (self[e25] * other[e1]) + (self[e4125] * other[e5]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                - (self.group2().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, self[e43] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e41]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group1().yzxw() * other.group0().zxyw()),
        );
    }
}
impl GeometricProduct<Scalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       37        0
    //    simd3        0        1        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       59       76        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234] * other[e4235], self[e1234] * other[e4315], self[e1234] * other[e4125], self[e4125] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e1234]) * self.group1().xyz().with_w(self[e3215]))
                + (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyzy())
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e15] * other[e1234]) + (self[e4125] * other[e4315]),
                (self[e45] * other[e4315]) + (self[e25] * other[e1234]) + (self[e4235] * other[e4125]),
                (self[e45] * other[e4125]) + (self[e35] * other[e1234]) + (self[e4315] * other[e4235]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (self.group0() * other.group0().www()).with_w(self[e3215] * other[e1234])
                - (other.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().xyzy() * self.group3().www().with_w(self[e42]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().xyzx())
                + (self.group1().zxyw() * other.group0().yzxw()),
        );
    }
}
impl GeometricProduct<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       66        0
    //    simd3        0       18        0
    //    simd4       47       30        0
    // Totals...
    // yes simd       83      114        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e1234] * other[e415]) + (self[e4315] * other[e412]),
                (self[e1234] * other[e425]) + (self[e4125] * other[e423]),
                (self[e1234] * other[e435]) + (self[e4235] * other[e431]),
                -(self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group1().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e12345], other[e435], other[e2], other[e5]]) * self.group0().xxx().with_w(self[e1234]))
                + (Simd32x4::from([other[e425], other[e1], other[e12345], other[e2]]) * self.group0().zzz().with_w(self[e4315]))
                + (Simd32x4::from([other[e3], other[e12345], other[e415], other[e1]]) * self.group0().yyy().with_w(self[e4235]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group1().xxy().with_w(self[e4125]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().with_zw(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e423]]) * self.group3().zyz().with_w(self[e15]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e321]]) * self.group3().xxy().with_w(self[e45]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e425]))
                - (self.group2().www() * other.group3().xyz()).with_w(self[e12] * other[e435]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]),
                -(self[e45] * other[e12345]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e425]]) * self.group2().zyz().with_w(self[e4315]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e5]]) * self.group1().zyz().with_w(self[e1234]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e415]]) * self.group2().xxy().with_w(self[e4235]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e25] * other[e431])
                + (self.group2().www() * other.group2().xyz()).with_w(self[e4125] * other[e435])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group3().xxy().with_w(self[e31]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group3().zyz().with_w(self[e12]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e43] * other[e125])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e23] * other[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (self.group1().xxyw() * other.group2().wzxw())
                + (self.group1().zyz() * other.group2().yww()).with_w(self[e3215] * other[e12345])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e3215] * other[e321])
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).with_w(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).with_w(self[e12] * other[e125])
                - (self.group3().yzx() * other.group2().zxy()).with_w(self[e15] * other[e415]),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e12345]]) * self.group1().zyz().with_w(self[e1234]))
                + (self.group3().yzxz() * other.group1().zxy().with_w(other[e412]))
                + (other.group0().zxyx() * self.group2().yzx().with_w(self[e4235]))
                + (self.group0().xxy() * other.group2().wzx()).with_w(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).with_w(self[e42] * other[e2])
                + (self.group2().www() * other.group2().xyz()).with_w(self[e4315] * other[e431])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group2().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group3().xxy().with_w(self[e12]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group3().zyz().with_w(self[e45]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group2().xxy().with_w(self[e23]))
                - (other.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e42] * other[e425])
                - (self.group3().www() * other.group0().xyz()).with_w(self[e1234] * other[e321]),
        );
    }
}
impl GeometricProduct<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       92        0
    //    simd3        0       12        0
    //    simd4       40       28        0
    // Totals...
    // yes simd      104      132        0
    //  no simd      224      240        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315])
                    + (self[e23] * other[e1234])
                    + (self[e12] * other[e42])
                    + (self[e1234] * other[e23])
                    + (self[e1234] * other[e4235])
                    + (self[e4315] * other[e43]),
                (self[e42] * other[e45])
                    + (self[e23] * other[e43])
                    + (self[e31] * other[e1234])
                    + (self[e1234] * other[e31])
                    + (self[e1234] * other[e4315])
                    + (self[e4125] * other[e41]),
                (self[e43] * other[e45])
                    + (self[e31] * other[e41])
                    + (self[e12] * other[e1234])
                    + (self[e1234] * other[e12])
                    + (self[e1234] * other[e4125])
                    + (self[e4235] * other[e42]),
                -(self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxy().with_w(self[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group3().zyz().with_w(self[e12]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e31]]) * self.group3().xxy().with_w(self[e31]))
                - (self.group1().wwwx() * other.group0().xyz().with_w(other[e23]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    + (self[e3215] * other[e41]),
                (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    + (self[e3215] * other[e42]),
                (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    + (self[e3215] * other[e43]),
                -(self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * other.group3().xyz()).with_w(self[e3215] * other[e1234])
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e4315]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e23] * other[e4235])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e12] * other[e4125])
                - (self.group3().yzx() * other.group3().zxy()).with_w(self[e15] * other[e41]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e35] * other[e31]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]),
                (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]),
                (self[e35] * other[scalar]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]) - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e42]]) * self.group2().xxx().with_w(self[e4315]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group1().zyz().with_w(self[e1234]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e43]]) * self.group2().yyy().with_w(self[e4125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[scalar]]) * self.group1().xxy().with_w(self[e1234]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e4235] * other[e41])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (other.group3().xyzz() * self.group3().www().with_w(self[e43]))
                - (other.group1().zw().with_zw(other[e4235], other[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e41] * other[e23])
                - (self.group3().yzx() * other.group2().zxy()).with_w(self[e43] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e4235] * other[scalar]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group2().xxy().with_w(self[e3215]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e45] * other[e3215])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e35] * other[e4125])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * other.group3().zxy().with_w(other[e35]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group2().wwwy() * other.group2().xyz().with_w(other[e31]))
                - (other.group1().zxyz() * self.group3().yzx().with_w(self[e35])),
        );
    }
}
impl std::ops::Div<geometric_product> for DualNum {
    type Output = geometric_product_partial<DualNum>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        7       33        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], other[e45] * self[e5] * -1.0])
                + (Simd32x4::from(self[e5]) * other.group1().xyz().with_w(other[scalar])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       14        0
    //    simd3        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4       21        0
    //  no simd       14       39        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[e12345], self[e5]) * other.group0().with_w(other[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e415] * self[e12345] * -1.0,
                other[e425] * self[e12345] * -1.0,
                other[e435] * self[e12345] * -1.0,
                other[e321] * self[e12345],
            ]) - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().xyz()) - (Simd32x3::from(self[e5]) * other.group3().xyz()) - (Simd32x3::from(self[e12345]) * other.group2().xyz()))
                .with_w(other[e4] * self[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1] * self[e12345], other[e2] * self[e12345], other[e3] * self[e12345], other[e5] * self[e12345] * -1.0])
                - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e321])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(other[e3215] * self[e12345]) + (other[scalar] * self[e5]), other[scalar] * self[e12345]]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e321] * self[e5] * -1.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (-(Simd32x3::from(self[e5]) * other.group1().xyz()) - (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(other[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0]) * self.group0().yy().with_zw(self[e12345], -(other[e321] * self[e5]) - (other[e5] * self[e12345])),
        );
    }
}
impl GeometricProduct<AntiLine> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiMotor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group0()) + (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<AntiPlane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        5        0
    // no simd        0       20        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiScalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[e12345]) * self.group0() * Simd32x2::from(-1.0));
    }
}
impl GeometricProduct<Circle> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        2        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        6       27        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().xyz()) - (Simd32x3::from(self[e12345]) * other.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e5]) * other.group0().with_w(other[e321]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<CircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        2        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        7       31        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().xyz()) - (Simd32x3::from(self[e12345]) * other.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().with_zw(self[e5], -(other[e321] * self[e5]) - (other[e12345] * self[e5])) * other.group0().with_w(1.0) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Dipole> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        6       25        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e5]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<DipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd3        1        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       15       30        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[e12345], self[e5]) * other.group0().with_w(other[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e23] * self[e12345]),
                (other[e42] * self[e5]) + (other[e31] * self[e12345]),
                (other[e43] * self[e5]) + (other[e12] * self[e12345]),
                -(other[e45] * self[e12345]) - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], 0.0])
                + (self.group0().xx().with_zw(self[e5], self[e12345]) * other.group1().xyz().with_w(other[e3215]))
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group3().xyz())).with_w(other[e1234] * self[e12345]),
        );
    }
}
impl GeometricProduct<DualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([-(other[e5] * self[e12345]) - (other[e12345] * self[e5]), other[e12345] * self[e12345]]) * Simd32x2::from([1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e5] * other[e45] * -1.0),
        );
    }
}
impl GeometricProduct<Flector> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       18        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e12345]) * other.group0().xyz()) - (Simd32x3::from(self[e5]) * other.group1().xyz())).with_w(self[e12345] * other[e45] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0])
                * self.group0().yy().with_zw(self[e12345], (self[e12345] * other[e3215]) - (self[e5] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for DualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<Motor> for DualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(self[e5]) * other.group0()) - (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricProduct<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd3        4       10        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       18       42        0
    //  no simd       32       68        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e5] * other[e4]) - (self[e12345] * other[e12345]), (self[e5] * other[e1234]) + (self[e12345] * other[scalar])]),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group4()) - (Simd32x3::from(self[e12345]) * other.group9().xyz())).with_w(self[e12345] * other[e1234]),
            // e5
            (self[e5] * other[scalar]) + (self[e12345] * other[e3215]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e5] * other[e415]) - (self[e12345] * other[e235]),
                -(self[e5] * other[e425]) - (self[e12345] * other[e315]),
                -(self[e5] * other[e435]) - (self[e12345] * other[e125]),
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(self[e5]) * other.group7()) - (Simd32x3::from(self[e12345]) * other.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (Simd32x3::from(self[e12345]) * other.group3().xyz()) - (Simd32x3::from(self[e5]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().with_w(other[e12345])),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        5        0
    // no simd        0       20        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<RoundPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e5] * other[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            other.group0() * self.group0().xx().with_zw(self[e5], self[e12345]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e5] * other[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            other.group0() * self.group0().xx().with_zw(self[e5], self[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<VersorEven> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       16        0
    //    simd3        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       23        0
    //  no simd       16       41        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self.group0().yy().with_zw(self[e12345], -(self[e5] * other[e4]) - (self[e12345] * other[e12345]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e12345] * other[e415] * -1.0,
                self[e12345] * other[e425] * -1.0,
                self[e12345] * other[e435] * -1.0,
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * other.group0().xyz().with_w(other[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().xyz()) - (Simd32x3::from(self[e5]) * other.group3().xyz()) - (Simd32x3::from(self[e12345]) * other.group2().xyz()))
                .with_w(self[e12345] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<VersorOdd> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       16       33        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e1234]) + (self[e12345] * other[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group1().xyz().with_w(other[scalar])) + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e3215]))
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group0().xyz()) - (Simd32x3::from(self[e12345]) * other.group3().xyz())).with_w(self[e12345] * other[e1234]),
        );
    }
}
impl std::ops::Div<geometric_product> for FlatPoint {
    type Output = geometric_product_partial<FlatPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       14        0
    //    simd3        0        5        0
    //    simd4        7        5        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       36       49        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            (self.group0().zxyw() * other.group0().yzx().with_w(other[scalar])) + Simd32x3::from(0.0).with_w(-(other[e42] * self[e25]) - (other[e43] * self[e35]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[scalar]) * self.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e45]) * other.group2().xyz()).with_w(0.0)
                + (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group0().xyz()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       26        0
    //    simd3        3        4        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       66        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e412] * self[e25]) - (other[e1] * self[e45]),
                -(other[e423] * self[e35]) - (other[e2] * self[e45]),
                -(other[e431] * self[e15]) - (other[e3] * self[e45]),
                other[e412] * self[e35],
            ]) + (self.group0().xyzy() * other.group2().www().with_w(other[e431]))
                + (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e2] * self[e35]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e3] * self[e15]),
                (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e1] * self[e25]),
                -(other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group0().zxyw() * other.group1().yzx().with_w(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxy() * other.group3().zxy().with_w(other[e425])),
            // e1, e2, e3, e4
            ((other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e4] * self[e45] * -1.0),
        );
    }
}
impl GeometricProduct<AntiDualNum> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e3215] * self[e45]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        3        8        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(other[e321] * self[e45] * -1.0),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e321]) * self.group0().xyz()) + (Simd32x3::from(self[e45]) * other.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * other.group1().xyz().with_w(other[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e2] * self[e35]),
                (other[e321] * self[e25]) + (other[e3] * self[e15]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * other.group0().xyz().with_w(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiLine> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e45]) * other.group1()).with_w(0.0) + (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0]) * other.group0().with_w(-(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35])),
        );
    }
}
impl GeometricProduct<AntiMotor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[scalar]) * self.group0().xyz()) + (Simd32x3::from(self[e45]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e3215] * self[e45]) - (other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35])),
        );
    }
}
impl GeometricProduct<AntiPlane> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       22        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (other.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).with_w(-(other[e2] * self[e25]) - (other[e3] * self[e35]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiScalar> for FlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
    }
}
impl GeometricProduct<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       23        0
    //    simd3        0        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       15       30        0
    //  no simd       27       48        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e412] * self[e25] * -1.0,
                other[e423] * self[e35] * -1.0,
                other[e431] * self[e15] * -1.0,
                (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group1().xyz()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       20        0
    //    simd3        0        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       34       49        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])) + Simd32x3::from(0.0).with_w((other[e431] * self[e25]) + (other[e412] * self[e35]))
                - (self.group0().yzxw() * other.group0().zxy().with_w(other[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e12345] * self[e15]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e12345] * self[e25]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group1().xyz()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricProduct<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd3        0        4        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       28       45        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e42] * self[e35],
                other[e43] * self[e15],
                other[e41] * self[e25],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group2()).with_w(0.0) + (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group0().xyz()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd3        5        6        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       22       33        0
    //  no simd       47       66        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) + (other[e4125] * self[e45]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * other.group2().xyz()) + (other.group1().yzx() * self.group0().zxy()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx())
                - (other.group3().yzx() * self.group0().zxy()))
            .with_w(other[e1234] * self[e45] * -1.0),
            // e4235, e4315, e4125, e3215
            (self.group0().xyzz() * other.group2().www().with_w(other[e4125]))
                + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e4315]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e45]) - (other[e31] * self[e25]) - (other[e12] * self[e35]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<DualNum> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(other[e5] * self[e45]),
        );
    }
}
impl GeometricProduct<FlatPoint> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        1        3        0
    //  no simd        3        7        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(other[e45] * self[e45]),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e45]) * other.group0().xyz()) - (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<Flector> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * other.group1().xyz().with_w(other[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e15] * other[e45]) - (self[e35] * other[e4315]),
                -(self[e15] * other[e4125]) - (self[e25] * other[e45]),
                -(self[e25] * other[e4235]) - (self[e35] * other[e45]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e4315])),
        );
    }
}
impl GeometricProduct<Line> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd       10       20        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(self[e45]) * other.group1()).with_w(0.0) + (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other.group0().with_w(-(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Motor> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       26        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e45]) * other.group1().xyz()) + (self.group0().xxy() * other.group0().wzx()) + (self.group0().zyz() * other.group0().yww())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[e45] * other[e12345] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e45] * other[e5]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       36        0
    //    simd2        3        3        0
    //    simd3       12       22        0
    //    simd4       11        8        0
    // Totals...
    // yes simd       40       69        0
    //  no simd      100      140        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0])
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            ((other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group6().xyz())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (other.group7().yzx() * self.group0().zxy()))
            .with_w(self[e45] * other[e4] * -1.0),
            // e5
            (self[e45] * other[e5])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group0().xxy().with_w(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group0().zyz().with_w(other[e43]))
                - (self.group0().yzxx() * other.group5().zxy().with_w(other[e41])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().xyz()) + (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().yzx() * self.group0().zxy())
                - (other.group4().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e35] * other[e412]])
                + (self.group0().zxyx() * other.group7().yzx().with_w(other[e423]))
                + (other.group1().www() * self.group0().xyz()).with_w(self[e25] * other[e431])
                - (self.group0().yzxw() * other.group7().zxy().with_w(other[e12345])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group0().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * other.group6().yww())
                - (self.group0().yzx() * other.group1().zxy())
                - (self.group0().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group0().xyzz())
                + Simd32x3::from(0.0).with_w((self[e45] * other[e3215]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                + (other.group5() * self.group0().www()).with_w(self[e25] * other[e4315])
                + (other.group4().yzx() * self.group0().zxy()).with_w(self[e15] * other[e4235])
                - (self.group0().yzxx() * other.group4().zxy().with_w(other[e23])),
            // e1234
            self[e45] * other[e1234] * -1.0,
        );
    }
}
impl GeometricProduct<Plane> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        6       25        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e35] * other[e4315] * -1.0,
                self[e15] * other[e4125] * -1.0,
                self[e25] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
        );
    }
}
impl GeometricProduct<RoundPoint> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        9       26        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e4]) * self.group0().xyz()) - (Simd32x3::from(self[e45]) * other.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e45] * other[e4] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Scalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        9       22        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * other.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])),
        );
    }
}
impl GeometricProduct<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd3        3        4        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       48       73        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e35] * other[e412]])
                + (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group0().xxyx())
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[e45] * other[e235]),
                (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]) + (self[e45] * other[e315]),
                (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]) + (self[e45] * other[e125]),
                -(self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group0().yzxx() * other.group3().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy()))
            .with_w(self[e45] * other[e4] * -1.0),
        );
    }
}
impl GeometricProduct<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        6        7        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       51       70        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e45] * other[e45]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e45] * other[e4235]),
                (self[e25] * other[e1234]) + (self[e45] * other[e4315]),
                (self[e35] * other[e1234]) + (self[e45] * other[e4125]),
                -(self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e15]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e25]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e45]) * other.group2().xyz())
                - (Simd32x3::from(self[e15]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e25]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other[e4315], other[e23], other[e45]])))
            .with_w(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e4125]))
                + Simd32x3::from(0.0).with_w((self[e45] * other[e3215]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl std::ops::Div<geometric_product> for Flector {
    type Output = geometric_product_partial<Flector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       46        0
    //    simd3        0        1        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       43       57        0
    //  no simd       76       89        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e43] * self[e35] * -1.0) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e45]) * other.group0().xyx().with_w(other[scalar]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e4125]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * other.group2().xyx().with_w(other[e43]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[scalar] * self[e4125]),
                -(other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e3215]) * other.group0().xyx().with_w(other[scalar]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       56        0
    //    simd3        0        4        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       56       73        0
    //  no simd      107      120        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxw() * other.group0().zxy().with_w(other[e4]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e321] * self[e45]))
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e431]))
                - (other.group2().www() * self.group1().xyz()).with_w(other[e412] * self[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e321] * self[e4235]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e321] * self[e4315]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e321] * self[e4125]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().xyzz() * other.group2().www().with_w(other[e412]))
                + (self.group1().yzxx() * other.group3().zxy().with_w(other[e415]))
                + (self.group0().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e4] * self[e3215]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e4235]),
                (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e4315]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group1().ww().with_zw(self[e25], self[e3215]))
                + (self.group0().zx().with_zw(self[e3215], self[e45]) * other.group1().yzz().with_w(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxz() * other.group3().zxy().with_w(other[e435]))
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]) - (other[e4] * self[e15]),
                -(other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]) - (other[e4] * self[e25]),
                -(other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]) - (other[e4] * self[e35]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e4235])
                - (self.group1().ww().with_zw(self[e25], self[e45]) * other.group0().xyx().with_w(other[e4])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        4       13        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group0().xyz())).with_w(other[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e45]) + (other[scalar] * self[e3215])),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx()),
        );
    }
}
impl GeometricProduct<AntiFlector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235]),
                (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e125] * self[e4125]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * other.group0().yzz().with_w(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e315] * self[e4315]),
        );
    }
}
impl GeometricProduct<AntiLine> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd3        0        2        0
    //    simd4        3        1        0
    // Totals...
    // yes simd       19       30        0
    //  no simd       28       37        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                other[e12] * self[e4125] * -1.0,
            ]) - (self.group1().yzxy() * other.group1().zxy().with_w(other[e31]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e4235]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e15]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       49        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[scalar] * self[e35]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125]),
                other[e12] * self[e4125] * -1.0,
            ]) + (other.group0().xyxw() * self.group1().ww().with_zw(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e31])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * other.group0().yzz().with_w(other[e3215]))
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricProduct<AntiPlane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().zxyx() * self.group1().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e4235]),
                (other[e3] * self[e15]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group1().ww().with_zw(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiScalar> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       46        0
    //    simd3        0        2        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       37       55        0
    //  no simd       64       80        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e4315],
                other[e423] * self[e4125],
                other[e431] * self[e4235],
                -(other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e412] * self[e25]) - (other[e321] * self[e4235]),
                -(other[e423] * self[e35]) - (other[e321] * self[e4315]),
                -(other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e412] * self[e35]) + (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e4235]),
                (other[e415] * self[e25]) + (other[e435] * self[e3215]) + (other[e321] * self[e35]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e125] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e4315], self[e3215]) * other.group2().xyx().with_w(other[e321]))
                - (self.group1().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e315] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]),
                -(other[e431] * self[e3215]) - (other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]),
                -(other[e423] * self[e25]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e4235]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       49        0
    //    simd3        0        2        0
    //    simd4       11        9        0
    // Totals...
    // yes simd       39       60        0
    //  no simd       72       91        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e4315],
                other[e423] * self[e4125],
                other[e431] * self[e4235],
                -(other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e412] * self[e35]) + (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (self.group0().yzxw() * other.group0().zxy().with_w(other[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e435] * self[e35]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group1().ww().with_zw(self[e25], self[e3215]))
                + (self.group0().zx().with_zw(self[e3215], self[e3215]) * other.group1().yzz().with_w(other[e12345]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                -(other[e431] * self[e3215]) - (other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                -(other[e423] * self[e25]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]) - (other[e12345] * self[e4125]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e4235]),
        );
    }
}
impl GeometricProduct<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd3        0        2        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       41       56        0
    //  no simd       68       81        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e43] * self[e35] * -1.0) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e4315]),
                (other[e12] * self[e15]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e4315], self[e4235]) * other.group2().xyx().with_w(other[e41]))
                + (self.group1().zx().with_zw(self[e45], self[e4315]) * other.group2().yzz().with_w(other[e42]))
                + (self.group1().ww().with_zw(self[e25], self[e4125]) * other.group1().xyx().with_w(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (self.group1().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e15] * self[e4235]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       55        0
    //    simd3        0        3        0
    //    simd4       17       14        0
    // Totals...
    // yes simd       57       72        0
    //  no simd      108      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w((other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e42]))
                - (other.group2().www() * self.group1().xyz()).with_w(other[e43] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e1234] * self[e35]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45]),
                -(other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e3215]) * other.group0().xyx().with_w(other[e1234]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * other.group2().xyx().with_w(other[e43]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41]))
                - (self.group0().yzxw() * other.group1().zxy().with_w(other[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e1234] * self[e15],
                other[e1234] * self[e25],
                other[e1234] * self[e35],
                -(other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group0().ww().with_zw(self[e4315], self[e35]) * other.group1().xyx().with_w(other[e4125]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * other.group1().yzz().with_w(other[e3215]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e4235]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        );
    }
}
impl GeometricProduct<DualNum> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       18        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group0().xyz())).with_w(other[e12345] * self[e45] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0])
                * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e45]) + (other[e12345] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e4315])),
        );
    }
}
impl GeometricProduct<Flector> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]),
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e45]))
                - (other.group1().zxyx() * self.group1().yzxx()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e45]))
                + (other.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e4235]))
                + (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e4315]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e4315]))
                - (self.group0().zx().with_zw(self[e3215], self[e3215]) * other.group1().yzz().with_w(other[e45]))
                - (self.group1().ww().with_zw(self[e25], self[e4125]) * other.group1().xyx().with_w(other[e35])),
        );
    }
}
impl GeometricProduct<Line> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       16        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       14       21        0
    //  no simd       29       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4125] * other[e315]) - (self[e25] * other[e435]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) - (self[e35] * other[e415]) - (self[e4125] * other[e235]),
                (self[e45] * other[e125]) - (self[e15] * other[e425]) - (self[e4235] * other[e315]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * other.group0().yzz().with_w(other[e425]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * other.group1().xyx().with_w(other[e435]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * other.group0().xyx().with_w(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e4315] * other[e435],
                self[e4125] * other[e415],
                self[e4235] * other[e425],
                -(self[e35] * other[e435]) - (self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * other.group0().xyx().with_w(other[e415]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * other.group0().yzz().with_w(other[e425])),
        );
    }
}
impl GeometricProduct<Motor> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       18        0
    //    simd3        0        2        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       20       26        0
    //  no simd       44       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) + (self[e3215] * other[e425]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) + (self[e3215] * other[e435]) - (self[e4235] * other[e315]),
                0.0,
            ]) + (other.group0().ywwy() * self.group0().zyz().with_w(self[e4315]))
                + (other.group0().wzxx() * self.group0().xxy().with_w(self[e4235]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e4125] * other[e435])
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w((self[e3215] * other[e12345]) - (self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]))
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e45] * other[e5])
                - (self.group0().wwwx() * other.group0().xyzx())
                - (other.group0().ywwz() * self.group1().zyz().with_w(self[e35]))
                - (other.group0().wzxy() * self.group1().xxy().with_w(self[e25])),
        );
    }
}
impl GeometricProduct<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       79        0
    //    simd2        4        4        0
    //    simd3       24       34        0
    //    simd4       23       17        0
    // Totals...
    // yes simd      103      134        0
    //  no simd      224      257        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from([other[e1234], other[e1]]) * self.group1().wx())
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e15] * other[e4]) - (self[e35] * other[e431]) - (self[e45] * other[e415]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e15] * other[e412]) - (self[e25] * other[e4]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e3215] * other[e431]),
                -(self[e25] * other[e423]) - (self[e35] * other[e4]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e3215] * other[e412]),
                self[e4125] * other[e412],
            ]) + (other.group7().zxy() * self.group0().yzx()).with_w(self[e4235] * other[e423])
                + (self.group1().yzx() * other.group6().zxy()).with_w(self[e4315] * other[e431])
                - (other.group0().yy().with_zw(other[e12345], self[e45]) * self.group1().xyz().with_w(other[e4])),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                self[e4125] * other[e12] * -1.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                + (self.group1().ww().with_zw(self[e25], other[e1234]) * other.group5().xyx().with_w(self[e3215]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group0().xxy().with_w(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group0().zyz().with_w(other[e43]))
                - (self.group0().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e4235] * other[e23])
                - (self.group1().www() * other.group9().xyz()).with_w(self[e4315] * other[e31]),
            // e41, e42, e43
            (other.group4().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group4().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group4().yzz()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().xyz())
                + (Simd32x3::from(other[e1234]) * self.group0().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group1().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group1().zyz())
                - (other.group4().zxy() * self.group0().yzx())
                - (self.group1().yzx() * other.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                -(self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                -(self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]) + (self.group1().yzxx() * other.group1().zxy().with_w(other[e415]))
                + (self.group0().zx().with_zw(self[e3215], self[e25]) * other.group7().yzz().with_w(other[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * other.group7().xyx().with_w(other[e423]))
                + (other.group1().www() * self.group0().xyz()).with_w(self[e35] * other[e412])
                - (other.group1() * self.group0().www().with_w(self[e3215]))
                - (self.group0().yzxw() * other.group7().zxy().with_w(other[e12345])),
            // e423, e431, e412
            (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group7().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group7().yzz()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group8().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group0().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (self.group0().yzx() * other.group1().zxy())
                - (self.group0().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e35] * other[e12]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (self.group0().zx().with_zw(self[e3215], other[e4315]) * other.group4().yzz().with_w(self[e25]))
                + (self.group0().ww().with_zw(self[e4315], other[e4125]) * other.group5().xyx().with_w(self[e35]))
                + (self.group1().zx().with_zw(self[e45], other[e3215]) * other.group5().yzz().with_w(self[e45]))
                + (self.group1().ww().with_zw(self[e25], other[e4235]) * other.group4().xyx().with_w(self[e15]))
                - (self.group0().yzxx() * other.group4().zxy().with_w(other[e23]))
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e25] * other[e31]),
            // e1234
            (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
        );
    }
}
impl GeometricProduct<Plane> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4125] * other[e4315]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]),
                -(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) - (self.group1().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                -(self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                -(self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e25])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       24       50        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e4]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e3215] * other[e1]),
                (self[e4315] * other[e5]) + (self[e3215] * other[e2]),
                (self[e4125] * other[e5]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzx().with_w(other[e5]))
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * self.group0() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Scalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        6        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       47        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * other.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (self.group1().zxy() * other.group0().yzx())
                - (self.group1().yzx() * other.group0().zxy()))
            .with_w(self[e3215] * other[e1234]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])),
        );
    }
}
impl GeometricProduct<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       54        0
    //    simd3        0        2        0
    //    simd4       19       17        0
    // Totals...
    // yes simd       58       73        0
    //  no simd      115      128        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxx() * other.group0().zxy().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().with_w(self[e35]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().with_w(self[e25]))
                - (self.group0().wwwx() * other.group0().xyzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                -(self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                -(self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group0().xxyx())
                + (self.group1().wwwx() * other.group0().xyz().with_w(other[e415]))
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e35] * other[e412])
                - (other.group3() * self.group0().www().with_w(self[e3215]))
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2])
                    + (self[e45] * other[e235])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e25] * other[e321])
                    + (self[e45] * other[e315])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e35] * other[e321])
                    + (self[e45] * other[e125])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e12345]]) * self.group0().xxy().with_w(self[e3215]))
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group0().yzxx() * other.group3().zxyx())
                - (self.group1().yzx() * other.group2().zxy()).with_w(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e35] * other[e431]) - (self[e45] * other[e415]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e25] * other[e4]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e35] * other[e4]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                self[e4125] * other[e412],
            ]) + (self.group1().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricProduct<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd3        0        2        0
    //    simd4       19       17        0
    // Totals...
    // yes simd       59       73        0
    //  no simd      116      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w((self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e45] * other[e45])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e43]]) * self.group1().zyz().with_w(self[e35]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e42]]) * self.group1().xxy().with_w(self[e25]))
                - (self.group0().wwwx() * other.group0().xyzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e3215] * other[e41]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e3215] * other[e42]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e3215] * other[e43]),
                -(self[e35] * other[e43]) - (self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxyx())
                - (self.group1().yzx() * other.group3().zxy()).with_w(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e41]]) * self.group0().xxx().with_w(self[e4235]))
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e43]]) * self.group0().zzz().with_w(self[e4125]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e42]]) * self.group0().yyy().with_w(self[e4315]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e1234]]) * self.group0().xxxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e41],
                self[e3215] * other[e42],
                self[e3215] * other[e43],
                -(self[e35] * other[e12]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e3215]]) * self.group1().xxy().with_w(self[e45]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e4125]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e25])),
        );
    }
}
impl std::ops::Div<geometric_product> for Line {
    type Output = geometric_product_partial<Line>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       37        0
    //    simd3        0        6        0
    //    simd4        9        3        0
    // Totals...
    // yes simd       24       46        0
    //  no simd       51       67        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e41] * self[e425],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                0.0,
            ]) + (Simd32x4::from([other[e31], other[scalar], other[scalar], self[e125]]) * self.group0().zyz().with_w(other[e43]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], self[e315]]) * self.group0().xxy().with_w(other[e42]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) - (other.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (self.group1().xyx() * other.group1().wwy()).with_w(other[e25] * self[e425])
                - (self.group1().yzz() * other.group1().zxw()).with_w(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], other[e43] * self[e435] * -1.0])
                - (self.group0() * other.group1().www()).with_w(other[e42] * self[e425])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e415]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       52        0
    //    simd3        0       10        0
    //    simd4       12        2        0
    // Totals...
    // yes simd       42       64        0
    //  no simd       78       90        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e4] * self[e415]),
                -(other[e412] * self[e415]) - (other[e4] * self[e425]),
                -(other[e423] * self[e425]) - (other[e4] * self[e435]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e412] * self[e125])
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e431] * self[e315])
                - (self.group1() * other.group2().www()).with_w(other[e3] * self[e435])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e1] * self[e415])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e2] * self[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group2().zxy()).with_w(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).with_w(other[e431] * self[e425])
                + (self.group1().yzx() * other.group3().zxy()).with_w(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group0().xxy().with_w(self[e425]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group0().zyz().with_w(self[e435]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e415]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       16        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group1()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().with_w((other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])),
        );
    }
}
impl GeometricProduct<AntiFlector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       19        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       29       39        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e2] * self[e125]),
                (other[e235] * self[e435]) + (other[e1] * self[e125]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) + (other[e2] * self[e235]) - (other[e321] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().with_w(self[e435]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e125] * self[e435]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl GeometricProduct<AntiLine> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        3        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       27        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e31] * self[e435],
                other[e12] * self[e415],
                other[e23] * self[e425],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e235])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e315]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(other[e25] * self[e425]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       13        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        4       16        0
    //  no simd       13       25        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e435] * -1.0])
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       45        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       23       52        0
    //  no simd       44       66        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e423] * self[e425] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e425] * self[e435]),
                -(other[e412] * self[e235]) - (other[e435] * self[e415]),
                -(other[e423] * self[e315]) - (other[e415] * self[e425]),
                other[e412] * self[e125],
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                other[e412] * self[e435],
            ]) + (other.group2().zxy() * self.group0().yzx()).with_w(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).with_w(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e423] * self[e315] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0() * other.group1().www()).with_w(other[e315] * self[e425])
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e415]),
        );
    }
}
impl GeometricProduct<CircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       51        0
    //    simd3        0        7        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       29       58        0
    //  no simd       50       72        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e423] * self[e425] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                other[e412] * self[e125],
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]) - (other[e12345] * self[e235]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]) - (other[e12345] * self[e315]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e12345] * self[e125]),
                other[e412] * self[e435],
            ]) + (self.group0().yzx() * other.group2().zxy()).with_w(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).with_w(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e423] * self[e315] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0() * other.group1().www()).with_w(other[e315] * self[e425])
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e415]),
        );
    }
}
impl GeometricProduct<Dipole> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       37        0
    //    simd3        0        8        0
    //    simd4        8        0        0
    // Totals...
    // yes simd       20       45        0
    //  no simd       44       61        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e41] * self[e425],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                other[e43] * self[e125],
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e235])
                + (self.group0().zxy() * other.group1().yzx()).with_w(other[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) - (other.group2().zxy() * self.group0().yzx()).with_w(other[e15] * self[e415])
                - (self.group1().xyx() * other.group1().wwy()).with_w(other[e25] * self[e425])
                - (self.group1().yzz() * other.group1().zxw()).with_w(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], other[e43] * self[e435] * -1.0])
                - (self.group0() * other.group1().www()).with_w(other[e42] * self[e425])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e415]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       39        0
    //    simd3        0        5        0
    //    simd4       14        9        0
    // Totals...
    // yes simd       33       53        0
    //  no simd       75       90        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]),
                (other[e41] * self[e425]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) + (self.group1() * other.group2().www()).with_w(other[e43] * self[e125])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e235])
                + (self.group0().zxy() * other.group1().yzx()).with_w(other[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e31] * self[e125],
                other[e4235] * self[e125],
                other[e23] * self[e315],
                -(other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group1().yxx().with_w(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzz().with_w(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (other.group1().zw().with_zw(other[e4235], other[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425]) - (other[e1234] * self[e235]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435]) - (other[e1234] * self[e315]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415]) - (other[e1234] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e425]]) * self.group0().xxy().with_w(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e435]]) * self.group0().zyz().with_w(other[e43]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e415]),
        );
    }
}
impl GeometricProduct<DualNum> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd       10       20        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group1()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self.group0().with_w(-(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       14       18        0
    //  no simd       32       36        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(other[e35] * self[e425]) - (other[e45] * self[e235]) - (other[e4315] * self[e125]),
                -(other[e15] * self[e435]) - (other[e45] * self[e315]) - (other[e4125] * self[e235]),
                -(other[e25] * self[e415]) - (other[e45] * self[e125]) - (other[e4235] * self[e315]),
                0.0,
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (other.group1().zxyz() * self.group1().yzx().with_w(self[e435])),
            // e1, e2, e3, e5
            (other.group1().zxyx() * self.group0().yzx().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w((other[e4315] * self[e315]) + (other[e4125] * self[e125]) - (other[e35] * self[e435]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e15]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e25]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl GeometricProduct<Line> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        0        3        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       24        0
    //  no simd       19       30        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e425] * self[e435] * -1.0,
                other[e435] * self[e415] * -1.0,
                other[e415] * self[e425] * -1.0,
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e415] * self[e415]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e235] * self[e425]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e415] * self[e235])
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e425] * self[e315]),
        );
    }
}
impl GeometricProduct<Motor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e415] * other[e12345]) - (self[e435] * other[e425]),
                -(self[e415] * other[e435]) - (self[e425] * other[e12345]),
                -(self[e425] * other[e415]) - (self[e435] * other[e12345]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]),
                (self[e435] * other[e125]) + (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]) + (other.group1().zxyx() * self.group0().yzx().with_w(self[e415]))
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e425] * other[e315]),
        );
    }
}
impl GeometricProduct<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       70        0
    //    simd3       17       26        0
    //    simd4       16       11        0
    // Totals...
    // yes simd       80      107        0
    //  no simd      162      192        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43]) - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42]) - (self[e125] * other[e1234]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group1().xxy().with_w(self[e435])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e321]),
                0.0,
            ]) + (self.group0().yzx() * other.group8().zxy()).with_w(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e315] * other[e431])
                + (self.group1().yzx() * other.group6().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group0().xxy().with_w(self[e425]))
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group0().zyz().with_w(self[e435]))
                - (other.group0().yy().with_zw(other[e12345], self[e415]) * self.group1().with_w(other[e1])),
            // e41, e42, e43
            (self.group0().yzx() * other.group7().zxy())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz()),
            // e23, e31, e12
            (self.group0().yzx() * other.group6().zxy()) + (self.group1().yzx() * other.group7().zxy())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group1().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group1().zyz())
                - (self.group0().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * other[e12]) - (self[e315] * other[e43]),
                -(self[e435] * other[e23]) - (self[e125] * other[e41]),
                -(self[e415] * other[e31]) - (self[e235] * other[e42]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().with_w(self[e435]))
                + (other.group0().xx().with_zw(other[scalar], self[e415]) * self.group0().with_w(other[e4235]))
                + (self.group0().zxy() * other.group5().yzx()).with_w(self[e425] * other[e4315]),
            // e423, e431, e412
            (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz()) + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * other.group4().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group1().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group1().yxx())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (self.group0().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group1().yzx() * other.group7().zxy()).with_w(self[e435] * other[e125]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
        );
    }
}
impl GeometricProduct<Plane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       15        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        4       18        0
    //  no simd       13       27        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                self[e435] * other[e4125],
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e425]))
                + (other.group0().wwwx() * self.group0().with_w(self[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * other[e4315] * -1.0,
                self[e415] * other[e4125] * -1.0,
                self[e425] * other[e4235] * -1.0,
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<RoundPoint> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        5        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       18       38        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self.group1().with_w(-(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e5]) * self.group0()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<Scalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        4        0
    //    simd4        3        2        0
    // Totals...
    // yes simd        9       17        0
    //  no simd       18       31        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w((self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(other[e3215]) * self.group0()).with_w(0.0) + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                -(self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                -(self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricProduct<VersorEven> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       57        0
    //    simd3        0        6        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       45       69        0
    //  no simd       81       99        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * other[e4]) - (self[e435] * other[e431]),
                -(self[e415] * other[e412]) - (self[e425] * other[e4]),
                -(self[e425] * other[e423]) - (self[e435] * other[e4]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzx() * other.group0().zxy()).with_w(self[e415] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e125] * other[e431] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e412]])
                + (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group1().xxy().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                -(self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                -(self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                0.0,
            ]) + (self.group0().yzx() * other.group2().zxy()).with_w(self[e415] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e425] * other[e431])
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e435] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e435] * other[e125]),
        );
    }
}
impl GeometricProduct<VersorOdd> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       37        0
    //    simd3        0        1        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       81       96        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e435] * other[e42]),
                (self[e415] * other[e43]) + (self[e425] * other[e1234]),
                (self[e425] * other[e41]) + (self[e435] * other[e1234]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * other[e12]) - (self[e315] * other[e43]),
                -(self[e435] * other[e23]) - (self[e125] * other[e41]),
                -(self[e415] * other[e31]) - (self[e235] * other[e42]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().with_w(self[e435])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]),
                (self[e315] * other[scalar]) + (self[e125] * other[e4235]),
                (self[e315] * other[e23]) + (self[e125] * other[scalar]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group1().xxx().with_w(self[e125]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzz().with_w(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (other.group1().zw().with_zw(other[e4235], other[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43]) - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42]) - (self[e125] * other[e1234]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group1().xxy().with_w(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl std::ops::Div<geometric_product> for Motor {
    type Output = geometric_product_partial<Motor>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        0        6        0
    //    simd4       13        7        0
    // Totals...
    // yes simd       35       55        0
    //  no simd       74       88        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e43] * self[e12345],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (self.group0().wwyw() * other.group0().xyx().with_w(other[scalar]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e12] * self[e12345]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e41]))
                + (other.group1().xyx() * self.group0().wwy()).with_w(other[e43] * self[e125])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e45] * self[e5]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (self.group1().wwyw() * other.group1().xyx().with_w(other[scalar]))
                - (other.group1().zxyx() * self.group1().yzxx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * other.group1().www().with_w(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       60        0
    //    simd3        0        9        0
    //    simd4       18        9        0
    // Totals...
    // yes simd       51       78        0
    //  no simd      105      123        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e4] * self[e415]),
                -(other[e412] * self[e415]) - (other[e4] * self[e425]),
                -(other[e412] * self[e12345]) - (other[e4] * self[e435]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235])
                - (other.group0().xyx() * self.group0().wwy()).with_w(other[e4] * self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e4] * self[e235] * -1.0,
                other[e4] * self[e315] * -1.0,
                other[e4] * self[e125] * -1.0,
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315])
                - (self.group0().zxwz() * other.group1().yzz().with_w(other[e3]))
                - (self.group0().wwyy() * other.group1().xyx().with_w(other[e2]))
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e4]))
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                -(other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                -(other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzxy() * other.group2().zxy().with_w(other[e431]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e423] * self[e415])
                + (other.group3().zxy() * self.group1().yzx()).with_w(other[e412] * self[e435])
                - (other.group1().xyx() * self.group1().wwy()).with_w(other[e4] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (other.group1().wwwy() * self.group0().xyz().with_w(self[e315]))
                + (self.group0().zxwx() * other.group3().yzz().with_w(other[e235]))
                + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (other.group3().xyx() * self.group0().wwy()).with_w(other[e435] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321]))
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       21        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (other.group0().xyx() * self.group0().wwy())
                - (other.group0().yzz() * self.group0().zxw()))
            .with_w(other[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e321] * self[e5])),
        );
    }
}
impl GeometricProduct<AntiFlector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       18        0
    //    simd3        0        2        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       20       26        0
    //  no simd       44       48        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group0().zxyw() * self.group0().yzxw())
                - (self.group0().zxwy() * other.group0().yzz().with_w(other[e2]))
                - (self.group0().wwyx() * other.group0().xyx().with_w(other[e1]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e3] * self[e435]),
            // e4235, e4315, e4125, e3215
            (other.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zxwz() * other.group1().yzz().with_w(other[e125]))
                + (self.group0().wwyy() * other.group1().xyx().with_w(other[e315]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e321] * self[e5]),
        );
    }
}
impl GeometricProduct<AntiLine> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (self.group1().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e315]),
        );
    }
}
impl GeometricProduct<AntiMotor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       40       48        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]),
                (other[e12] * self[e12345]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[scalar] * self[e235]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[scalar] * self[e315]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (other.group0().xyxw() * self.group1().wwyw())
                + (other.group0().yzz() * self.group1().zxw()).with_w(other[e3215] * self[e12345])
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e315]),
        );
    }
}
impl GeometricProduct<AntiPlane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       24       28        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], 0.0])
                - (other.group0().xyxx() * self.group1().wwy().with_w(self[e415]))
                - (other.group0().yzzy() * self.group1().zxw().with_w(self[e425]))
                - (other.group0().wwwz() * self.group0().xyzz()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group0().wwy().with_w(self[e235]))
                + (other.group0().yzzy() * self.group0().zxw().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w(other[e3] * self[e125])
                - (other.group0().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricProduct<AntiScalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricProduct<Circle> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        0        4        0
    //    simd4        8        4        0
    // Totals...
    // yes simd       40       63        0
    //  no simd       64       83        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]),
                -(other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e431] * self[e125]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]),
                -(other[e431] * self[e5]) - (other[e412] * self[e235]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]),
                -(other[e423] * self[e315]) - (other[e412] * self[e5]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e425] * self[e5]) - (other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e435] * self[e5]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                other[e412] * self[e435],
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e412] * self[e5] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0().xyzy() * other.group1().www().with_w(other[e315]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e415])
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       54        0
    //    simd3        0        3        0
    //    simd4       10        7        0
    // Totals...
    // yes simd       45       64        0
    //  no simd       75       91        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e412] * self[e12345] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e423] * self[e235])
                - (self.group0().wwyw() * other.group0().xyx().with_w(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e431] * self[e125]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e431] * self[e5]) - (other[e412] * self[e235]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e423] * self[e315]) - (other[e412] * self[e5]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                -(other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                -(other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                other[e412] * self[e435],
            ]) + (self.group0().yzxy() * other.group2().zxy().with_w(other[e431]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            (other.group1().wwwy() * self.group0().xyz().with_w(self[e315]))
                + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                + Simd32x3::from(0.0).with_w((other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]))
                - (self.group1().zxww() * other.group0().yzz().with_w(other[e12345]))
                - (self.group1().wwyw() * other.group0().xyx().with_w(other[e321])),
        );
    }
}
impl GeometricProduct<Dipole> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       43        0
    //    simd3        0        7        0
    //    simd4       11        4        0
    // Totals...
    // yes simd       33       54        0
    //  no simd       66       80        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e12] * self[e12345]) - (other[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e41]))
                + (other.group1().xyx() * self.group0().wwy()).with_w(other[e43] * self[e125])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e45] * self[e5]),
            ]) - (self.group0().yzxx() * other.group2().zxy().with_w(other[e15]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e25] * self[e425])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * other.group1().www().with_w(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd3        0       12        0
    //    simd4       22       10        0
    // Totals...
    // yes simd       42       66        0
    //  no simd      108      120        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]),
                (other[e43] * self[e12345]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xyx() * self.group0().wwy()).with_w(other[e1234] * self[e5])
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zxwx() * other.group1().yzz().with_w(other[e4235]))
                + (self.group1().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w(other[e4125] * self[e435])
                + (other.group1().xyx() * self.group0().wwy()).with_w(other[e43] * self[e125])
                + (other.group2().www() * self.group1().xyz()).with_w(other[e4315] * self[e425])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e1234] * self[e5]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (self.group0().zxww() * other.group2().yzz().with_w(other[e3215]))
                + (self.group1().zxwy() * other.group1().yzz().with_w(other[e4315]))
                + (self.group1().wwyx() * other.group1().xyx().with_w(other[e4235]))
                + (other.group2().xyx() * self.group0().wwy()).with_w(other[e4125] * self[e125])
                - (other.group1().zxyx() * self.group1().yzxx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (self.group1().wwyw() * other.group3().xyx().with_w(other[e45]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e12] * self[e125])
                - (other.group3().yzz() * self.group1().zxw()).with_w(other[e15] * self[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e1234] * self[e235]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e1234] * self[e315]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e1234] * self[e125]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                0.0,
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e1234] * self[e12345])
                - (self.group0().xyzz() * other.group1().www().with_w(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<DualNum> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(other[e5]) * self.group0()) - (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricProduct<FlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       26        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((other.group0().xyx() * self.group0().wwy()) + (other.group0().yzz() * self.group0().zxw())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e45] * self[e12345] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e45] * self[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e3215] * self[e415]) - (other[e45] * self[e235]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e3215] * self[e425]) - (other[e45] * self[e315]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e3215] * self[e435]) - (other[e45] * self[e125]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                0.0,
            ]) + (other.group1().zxyz() * self.group1().yzx().with_w(self[e435]))
                + (self.group0().zxwy() * other.group0().yzz().with_w(other[e4315]))
                + (self.group0().wwyx() * other.group0().xyx().with_w(other[e4235]))
                - (other.group0().zxyw() * self.group0().yzxw()),
            // e1, e2, e3, e5
            (other.group1().zxyx() * self.group0().yzx().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w((other[e4315] * self[e315]) + (other[e4125] * self[e125]) + (other[e3215] * self[e12345]) - (other[e45] * self[e5]))
                - (other.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zxwz() * other.group1().yzz().with_w(other[e35]))
                - (self.group0().wwyy() * other.group1().xyx().with_w(other[e25])),
        );
    }
}
impl GeometricProduct<Line> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       28       36        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e415] * self[e12345]) - (other[e425] * self[e435]),
                -(other[e425] * self[e12345]) - (other[e435] * self[e415]),
                -(other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e425] * self[e125]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e425] * self[e5]) - (other[e435] * self[e235]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e435] * self[e5]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e425] * self[e315]),
        );
    }
}
impl GeometricProduct<Motor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       40       48        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().xyxw() * self.group0().wwyw()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e12345] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e5] * self[e415]),
                -(other[e12345] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e5] * self[e425]),
                -(other[e12345] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e5] * self[e435]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group0().zxyx() * self.group1().yzxx())
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e425] * self[e315])
                - (other.group0().xyxw() * self.group1().wwyw())
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       78        0
    //    simd2        4        4        0
    //    simd3       24       43        0
    //    simd4       25       11        0
    // Totals...
    // yes simd       98      136        0
    //  no simd      225      259        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x2::from([other[e415], other[scalar]]) * self.group0().xw())
                + (Simd32x2::from([other[e423], other[e1234]]) * self.group1().xw())
                - (Simd32x2::from([other[e12345], other[e23]]) * self.group0().wx())
                - (Simd32x2::from([other[e4], other[e41]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) - (self[e425] * other[e45]) - (self[e12345] * other[e4315]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) - (self[e435] * other[e45]) - (self[e12345] * other[e4125]) - (self[e125] * other[e1234]),
                0.0,
            ]) + (other.group4().zxy() * self.group1().yzx()).with_w(self[e12345] * other[e1234])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e435]]) * self.group0().xxy().with_w(other[e43]))
                - (other.group4().xyx() * self.group1().wwy()).with_w(self[e415] * other[e41])
                - (other.group4().yzz() * self.group1().zxw()).with_w(self[e425] * other[e42]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]) - (self[e5] * other[e1]) - (self[e5] * other[e415]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e5] * other[e2]) - (self[e5] * other[e425]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e5] * other[e3]) - (self[e5] * other[e435]),
                self[e12345] * other[e321],
            ]) + (other.group8().zxy() * self.group0().yzx()).with_w(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e315] * other[e431])
                + (self.group1().yzx() * other.group6().zxy()).with_w(self[e125] * other[e412])
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group0().xyz().with_w(self[e5]))
                - (other.group0().yy().with_zw(other[e12345], self[e415]) * self.group1().xyz().with_w(other[e1]))
                - (other.group8().xyx() * self.group0().wwy()).with_w(self[e425] * other[e2])
                - (other.group8().yzz() * self.group0().zxw()).with_w(self[e435] * other[e3]),
            // e41, e42, e43
            (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (other.group7().xyx() * self.group0().wwy())
                - (other.group7().yzz() * self.group0().zxw()),
            // e23, e31, e12
            (other.group7().zxy() * self.group1().yzx()) + (self.group0().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e12345]) * other.group6().xyz())
                - (Simd32x3::from(other[e12345]) * self.group0().xyz())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw())
                - (self.group0().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group1().xyz().with_w(self[e435]))
                + (self.group1().zxwz() * other.group4().yzz().with_w(other[e43]))
                + (self.group1().wwyy() * other.group4().xyx().with_w(other[e42]))
                + (other.group0().xx().with_zw(other[scalar], other[e41]) * self.group0().xyz().with_w(self[e235]))
                + (other.group5().xyx() * self.group0().wwy()).with_w(self[e415] * other[e4235])
                + (other.group5().yzz() * self.group0().zxw()).with_w(self[e425] * other[e4315])
                - (other.group4().zxy() * self.group1().yzx()).with_w(self[e12345] * other[e45])
                - (other.group5().zxy() * self.group0().yzx()).with_w(self[e5] * other[e1234]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().xyx() * self.group0().wwy()) + (other.group4().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group3().xyz())
                + (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group5().xyx() * self.group1().wwy())
                + (other.group5().yzz() * self.group1().zxw())
                + (self.group1().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group1().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group1().zyz())
                - (other.group5().zxy() * self.group1().yzx())
                - (self.group0().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                (self[e235] * other[e415]) + (self[e315] * other[e2]) + (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], self[e435]]) * self.group0().zyz().with_w(other[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], self[e425]]) * self.group0().xxy().with_w(other[e315]))
                + (other.group1().xyzx() * self.group0().www().with_w(self[e235]))
                + (other.group7().zxy() * self.group1().yzx()).with_w(self[e415] * other[e235])
                - (self.group1().wwyw() * other.group7().xyx().with_w(other[e12345]))
                - (other.group7().yzz() * self.group1().zxw()).with_w(self[e12345] * other[e5])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e5] * other[e321]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]) - (self[e12345] * other[e4]),
        );
    }
}
impl GeometricProduct<Plane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                -(self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                -(self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                self[e435] * other[e4125],
            ]) + (self.group0().xyzx() * other.group0().wwwx())
                + (other.group0().zxyy() * self.group1().yzx().with_w(self[e425])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                -(self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                -(self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxyw()),
        );
    }
}
impl GeometricProduct<RoundPoint> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd3        3        4        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       24       53        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w(-(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e5] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            ((self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (Simd32x3::from(other[e5]) * self.group0().xyz())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e12345] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e3]])
                + (other.group0().xyzy() * self.group0().www().with_w(self[e315]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e235]))
                - (self.group0().yzxw() * other.group0().zxy().with_w(other[e5])),
        );
    }
}
impl GeometricProduct<Scalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
    }
}
impl GeometricProduct<Sphere> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       41        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                -(self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                -(self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0())
                + (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e12345]) * other.group0().xyz())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e12345] * other[e1234]),
        );
    }
}
impl GeometricProduct<VersorEven> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       56        0
    //    simd3        0        2        0
    //    simd4       20       18        0
    // Totals...
    // yes simd       53       76        0
    //  no simd      113      134        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12345] * other[e423] * -1.0,
                self[e12345] * other[e431] * -1.0,
                self[e12345] * other[e412] * -1.0,
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group0().zyz().with_w(self[e5]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e431]) - (self[e5] * other[e423]),
                -(self[e315] * other[e4]) - (self[e5] * other[e431]),
                -(self[e125] * other[e4]) - (self[e5] * other[e412]),
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxw() * other.group1().zxyw())
                + (self.group1().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group1().xxyw())
                - (self.group0().wwwz() * other.group1().xyz().with_w(other[e3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315])
                    - (self[e12345] * other[e235])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                -(self[e425] * other[e5])
                    - (self[e12345] * other[e315])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                -(self[e435] * other[e5])
                    - (self[e12345] * other[e125])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e423]))
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e425] * other[e431])
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e435] * other[e412])
                - (self.group0().xxyw() * other.group2().wzx().with_w(other[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * other[e423] * -1.0,
                self[e5] * other[e431] * -1.0,
                self[e5] * other[e412] * -1.0,
                (self[e235] * other[e1]) + (self[e315] * other[e425]) + (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxyx())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyzy())
                + (self.group0().wwwz() * other.group3().xyz().with_w(other[e125]))
                + (self.group1().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e321]]) * self.group1().zyzw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group1().xxyw())
                - (self.group0().yzxw() * other.group3().zxy().with_w(other[e5])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        0        1        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       41       54        0
    //  no simd      113      128        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12345] * other[e41],
                self[e12345] * other[e42],
                self[e12345] * other[e43],
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().with_w(self[e5]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group1().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4235]]) * self.group0().xxyx())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group1().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e4125]))
                + (self.group1().wwwz() * other.group0().xyzz())
                - (self.group0().yzxw() * other.group1().zxyw())
                - (self.group1().yzxw() * other.group0().zxy().with_w(other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e5] * other[e23]),
                (self[e125] * other[e4235]) + (self[e5] * other[e31]),
                (self[e125] * other[scalar]) + (self[e5] * other[e12]),
                -(self[e125] * other[e12]) - (self[e5] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group1().xxxz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4235]]) * self.group0().zyz().with_w(self[e235]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group1().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e3215]]) * self.group0().xxyw())
                + (self.group0().www() * other.group2().xyz()).with_w(self[e315] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzzx())
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group3().xyz().with_w(other[e31]))
                - (other.group1().zw().with_zw(other[e4235], other[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]) - (self[e5] * other[e43]),
                0.0,
            ]) + (self.group0().yzxw() * other.group3().zxy().with_w(other[e1234]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e43])),
        );
    }
}
impl std::ops::Div<geometric_product> for MultiVector {
    type Output = geometric_product_partial<MultiVector>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       97        0
    //    simd2       10       10        0
    //    simd3       40       56        0
    //    simd4       29       17        0
    // Totals...
    // yes simd      143      180        0
    //  no simd      320      353        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0]) + (Simd32x2::from(other[scalar]) * self.group0())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[scalar] * self[e1]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[scalar] * self[e2]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group8().yzx()).with_w(other[e45] * self[e4])
                + (self.group7().zxy() * other.group2().yzx()).with_w(other[scalar] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().with_w(other[e41]))
                - (self.group8().zx().with_zw(self[e5], self[e415]) * other.group0().yzz().with_w(other[e41]))
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e42] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e42] * self[e425])
                - (other.group1().www() * self.group6().xyz()).with_w(other[e43] * self[e3]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[scalar] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e45]))
                + (other.group2().xyxw() * self.group3().ww().with_zw(self[e4315], self[e45]))
                + (other.group2().yzxx() * self.group5().zxy().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], other[e35]) * other.group1().yzz().with_w(self[e43]))
                + (self.group9().ww().with_zw(self[e25], other[e25]) * other.group1().xyx().with_w(self[e42]))
                - (self.group3().xyzz() * other.group1().www().with_w(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                - (self.group9().yzxx() * other.group2().zxy().with_w(other[e23]))
                - (self.group5().yzx() * other.group2().zxy()).with_w(other[e41] * self[e15]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([other[scalar], other[e45], other[e45]]) * self.group4())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group4().zxy() * other.group2().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[scalar] * self[e425]),
                (other[e23] * self[e425]) + (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().with_w(other[e42]))
                + (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * other.group0().yzz().with_w(other[e43]))
                + (self.group7().zxy() * other.group2().yzx()).with_w(other[scalar] * self[e321])
                - (other.group2().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group8().yzx()).with_w(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).with_w(other[e25] * self[e431])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([other[scalar], other[e45], other[e45]]) * self.group7())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group8().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group8().xxy())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * other.group1().wwy())
                - (self.group8().yzz() * other.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (self.group9().ww().with_zw(self[e25], self[e3215]) * other.group0().xyx().with_w(other[scalar]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e15]]) * other.group2().xyz().with_w(other[e23]))
                - (other.group2().yzxy() * self.group4().zxy().with_w(self[e31]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e15] * self[e23])
                - (other.group1().zxy() * self.group9().yzx()).with_w(other[e35] * self[e12]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       85        0
    //    simd2        6        6        0
    //    simd3       56       75        0
    //    simd4       56       41        0
    // Totals...
    // yes simd      162      207        0
    //  no simd      448      486        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e5] * self[e4]),
                (other[e5] * self[e1234])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e3215]]) * other.group2().xw())
                - (Simd32x2::from([self[e5], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e4] * self[e45] * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group3().xyz().with_w(other[e4]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group5().xxy().with_w(self[e41]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4125]]) * self.group4().zyz().with_w(other[e412]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e4315]]) * self.group4().xxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e423] * self[e4235])
                + (other.group1().zxy() * self.group9().yzx()).with_w(other[e3] * self[e43])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e4315], other[e425]) * other.group1().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], other[e435]) * other.group1().yzz().with_w(self[e43]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (self.group4().yzx() * other.group2().zxy()).with_w(other[e412] * self[e12])
                - (self.group5().yzx() * other.group3().zxy()).with_w(other[e415] * self[e41])
                - (other.group2().www() * self.group3().xyz()).with_w(other[e321] * self[e1234]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], other[e3] * self[e435] * -1.0])
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group2().yyy().with_w(other[e412]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e4]]) * other.group2().zzz().with_w(other[e5]))
                + (other.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (self.group6().wz().with_zw(self[e2], self[e315]) * other.group2().xxx().with_w(other[e431]))
                + (self.group8().yzx() * other.group3().zxy()).with_w(other[e423] * self[e235])
                - (Simd32x4::from([other[e425], other[e3], other[e1], other[e125]]) * self.group8().zxy().with_w(self[e412]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], self[e1]]) * self.group8().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * other.group2().zzyw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyzy())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e415]]) * other.group3().xyzx())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxx().with_w(other[e435]))
                - (other.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (other.group3().wwwy() * self.group6().xyzy())
                - (self.group8().xxy() * other.group1().wzx()).with_w(other[e315] * self[e431]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group7().zzy())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group7().yxx())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx())
                + (self.group7().yzx() * other.group2().zxy())
                + (other.group1().zxy() * self.group6().yzx())
                + (other.group3().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(self[e12345]) * other.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group2().xyz())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group7().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group3().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group3().xyx())
                - (other.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e4] * self[e3215] * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4235]]) * self.group4().zyz().with_w(other[e415]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e35]]) * self.group4().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().xyz().with_w(other[e435]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e425] * self[e4315])
                + (other.group2().www() * self.group3().xyz()).with_w(other[e5] * self[e1234])
                - (other.group2().zxyy() * self.group4().yzx().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e4315], other[e2]) * other.group3().xyx().with_w(self[e31]))
                - (self.group9().zx().with_zw(self[e45], other[e3]) * other.group3().yzz().with_w(self[e12]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e235] * self[e41])
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e125] * self[e43])
                - (other.group1().www() * self.group9().xyz()).with_w(other[e1] * self[e23]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group4().zzy())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group4().yxx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e4]) * self.group9().xyz())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group2().xyz())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group5().zyz())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group3().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group3().xyx())
                - (self.group5().yzx() * other.group2().zxy())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group9().yzx())
                - (other.group3().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e3] * self[e425] * -1.0, other[e1] * self[e435] * -1.0, other[e2] * self[e415] * -1.0, other[e5] * self[e321]])
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group7().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e425]]) * self.group7().xxy().with_w(self[e315]))
                + (other.group2().xyzy() * self.group1().www().with_w(self[e425]))
                + (self.group6().xyzx() * other.group1().www().with_w(other[e235]))
                + (self.group6().zxyz() * other.group3().yzx().with_w(other[e125]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * other.group3().xyz().with_w(other[e415]))
                + (self.group1().zx().with_zw(self[e321], other[e3]) * other.group1().yzz().with_w(self[e125]))
                + (self.group6().ww().with_zw(self[e2], other[e435]) * other.group1().xyx().with_w(self[e125]))
                + (other.group0().zxy() * self.group8().yzx()).with_w(other[e1] * self[e235])
                - (Simd32x4::from([self[e5], self[e5], self[e315], other[e5]]) * other.group0().xyx().with_w(self[e12345]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group8().zx().with_zw(self[e5], self[e5]) * other.group0().yzz().with_w(other[e321]))
                - (self.group8() * other.group2().www()).with_w(other[e315] * self[e2])
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e235] * self[e1]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd2        1        2        0
    //    simd3        4        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       14       36        0
    //  no simd       32       68        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]])) + (Simd32x2::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e4]),
            // e5
            (other[e3215] * self[e12345]) + (other[scalar] * self[e5]) - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3215] * self[e4235]) + (other[scalar] * self[e15]),
                (other[e3215] * self[e4315]) + (other[scalar] * self[e25]),
                (other[e3215] * self[e4125]) + (other[scalar] * self[e35]),
                other[e3215] * self[e1234] * -1.0,
            ]) + (other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group5().with_w(self[e45])),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group4()) + (Simd32x3::from(other[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e4])) + (Simd32x4::from(other[scalar]) * self.group6()),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz()) + (Simd32x3::from(other[scalar]) * self.group8()) - (Simd32x3::from(other[e3215]) * self.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                (other[e3215] * self[e45]) + (other[scalar] * self[e3215]),
            ]) + (other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group9().xyz().with_w(self[scalar])),
            // e1234
            other[scalar] * self[e1234],
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd2        1        1        0
    //    simd3       12       21        0
    //    simd4       11        8        0
    // Totals...
    // yes simd       42       66        0
    //  no simd      100      133        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (Simd32x2::from([self[e321], self[e41]]) * other.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group5()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().zxy() * other.group0().yzx())
                - (self.group4().yzx() * other.group0().zxy()))
            .with_w(other[e321] * self[e1234] * -1.0),
            // e5
            (other[e321] * self[e3215])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) - (other[e125] * self[e2]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e125] * self[e415]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e315] * self[e1]),
                0.0,
            ]) + (self.group6().wz().with_zw(self[e2], other[e321]) * other.group0().xxx().with_w(self[e12345]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], other[e125]]) * other.group0().yxx().with_w(self[e412]))
                - (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (other.group0().wwwy() * self.group8().with_w(self[e431])),
            // e41, e42, e43
            Simd32x3::from(other[e321]) * self.group7(),
            // e23, e31, e12
            (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (self.group7().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (other.group0().yzxw() * self.group4().zxy().with_w(self[scalar]))
                - (other.group0().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (other.group0().www() * self.group9().xyz()).with_w(other[e315] * self[e42]),
            // e423, e431, e412
            Simd32x3::from(other[e321]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                + (self.group5().zxy() * other.group0().yzx())
                - (self.group5().yzx() * other.group0().zxy())
                - (other.group0().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzy() * self.group1().www().with_w(self[e425]))
                + (other.group0().wwwz() * self.group6().xyzz())
                + Simd32x3::from(0.0).with_w(-(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                + (self.group7().zxy() * other.group0().yzx()).with_w(other[e235] * self[e415])
                - (self.group7().yzx() * other.group0().zxy()).with_w(other[e235] * self[e1]),
            // e1234
            other[e321] * self[e4],
        );
    }
}
impl GeometricProduct<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       65        0
    //    simd2        4        4        0
    //    simd3       24       33        0
    //    simd4       26       21        0
    // Totals...
    // yes simd       99      123        0
    //  no simd      229      256        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e5] * self[e4]),
                (other[e5] * self[e1234]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from([self[e321], self[e41]]) * other.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e315] * self[e1234]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e125] * self[e1234]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group4().zyz().with_w(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group4().xxy().with_w(self[e42]))
                + (other.group1().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                - (self.group4().yzx() * other.group0().zxy()).with_w(other[e321] * self[e1234]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group6().wz().with_zw(self[e2], self[e4]) * other.group0().xxx().with_w(other[e5]))
                + (self.group8().yzx() * other.group1().zxy()).with_w(other[e321] * self[e12345])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group8().zyz().with_w(self[e412]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e425]]) * other.group0().zzy().with_w(other[e2]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e435]]) * other.group1().xyzz())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e415]]) * other.group0().yxx().with_w(other[e1]))
                - (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group7().xxy())
                + (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (self.group7().yzx() * other.group0().zxy()) + (other.group1().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group7().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e3] * self[e4315]),
                (other[e315] * self[e1234]) + (other[e1] * self[e4125]),
                (other[e125] * self[e1234]) + (other[e2] * self[e4235]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e1234]]) * self.group4().zyz().with_w(other[e5]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e321]]) * self.group4().xxy().with_w(self[scalar]))
                - (other.group0().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (self.group3().ww().with_zw(self[e4315], other[e125]) * other.group1().xyx().with_w(self[e43]))
                - (self.group9().zx().with_zw(self[e45], other[e1]) * other.group1().yzz().with_w(self[e23]))
                - (other.group0().www() * self.group9().xyz()).with_w(other[e315] * self[e42]),
            // e423, e431, e412
            (self.group4().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group4().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group4().zyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group5().zyz())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                - (self.group5().yzx() * other.group0().zxy())
                - (other.group0().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group7().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group7().xxy().with_w(self[e315]))
                + (other.group0().xyzx() * self.group1().www().with_w(self[e415]))
                + (other.group0().wwwy() * self.group6().xyzy())
                + (other.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (self.group6().zxyz() * other.group1().yzx().with_w(other[e125]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e321]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                - (self.group7().yzx() * other.group0().zxy()).with_w(other[e5] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).with_w(other[e235] * self[e1]),
            // e1234
            (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       73        0
    //    simd2        5        6        0
    //    simd3       17       28        0
    //    simd4       13        6        0
    // Totals...
    // yes simd       83      113        0
    //  no simd      161      193        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e423])
                - (other.group1().zxy() * self.group7().yzx()).with_w(other[e31] * self[e431]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]),
                (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]),
                (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                0.0,
            ]) + (self.group0().xx().with_zw(self[scalar], other[e15]) * other.group1().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], self[e43]) * other.group0().yzz().with_w(other[e35]))
                + (self.group9().ww().with_zw(self[e25], self[e42]) * other.group0().xyx().with_w(other[e25]))
                - (self.group9().yzxz() * other.group1().zxy().with_w(other[e12]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group5().yzx()).with_w(other[e31] * self[e4315]),
            // e41, e42, e43
            (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx()) + (other.group0().yzz() * self.group4().zx().with_z(self[e1234]))
                - (other.group0().zxy() * self.group4().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group1().xyx())
                + (other.group0().yzx() * self.group5().zxy())
                + (other.group1().yzz() * self.group4().zx().with_z(self[e1234]))
                - (other.group0().zxy() * self.group5().yzx())
                - (other.group1().zxy() * self.group4().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group6().yzx()).with_w(other[e23] * self[e1])
                - (other.group1().zxy() * self.group7().yzx()).with_w(other[e31] * self[e2]),
            // e423, e431, e412
            (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx()) + (other.group0().yzz() * self.group7().zx().with_z(self[e4]))
                - (other.group0().zxy() * self.group7().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group1().zzy())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group1().yxx())
                + (other.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (other.group0().zxy() * self.group8().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e25]]) * other.group1().xyx().with_w(other[e31]))
                - (self.group4().zx().with_zw(self[e1234], self[e35]) * other.group1().yzz().with_w(other[e12]))
                - (other.group0().zxy() * self.group9().yzx()).with_w(other[e23] * self[e15]),
            // e1234
            -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       81        0
    //    simd2        7        8        0
    //    simd3       24       35        0
    //    simd4       21       14        0
    // Totals...
    // yes simd      106      138        0
    //  no simd      224      258        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * self.group0()) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2]) + (other[e25] * self[e4]) + (other[e3215] * self[e431]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                other[e12] * self[e412] * -1.0,
            ]) + (self.group7().xxy() * other.group1().wzx()).with_w(other[scalar] * self[e4])
                - (self.group7().yzx() * other.group1().zxy()).with_w(other[e23] * self[e423])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e31] * self[e431]),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[scalar] * self[e35]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125]),
                other[e3215] * self[e1234] * -1.0,
            ]) + (other.group0().xyxw() * self.group9().ww().with_zw(self[e25], self[e45]))
                + (other.group1().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                + (other.group1().ywwz() * self.group5().zyz().with_w(self[e43]))
                + (other.group1().wzxy() * self.group5().xxy().with_w(self[e42]))
                - (other.group0().zxyy() * self.group3().yzx().with_w(self[e4315]))
                - (self.group9().yzxz() * other.group1().zxy().with_w(other[e12]))
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().xxy() * other.group0().wzx()) + (self.group4().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                + (self.group5().xxy() * other.group0().wzx())
                + (self.group5().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e25] * self[e4]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e35] * self[e412]),
            ]) + (self.group0().yy().with_zw(self[e12345], other[scalar]) * other.group0().xyz().with_w(self[e321]))
                + (self.group7().xxy() * other.group1().wzx()).with_w(other[e3215] * self[e4])
                - (other.group1().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (other.group0().zxy() * self.group6().yzx()).with_w(other[e25] * self[e431]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().xxy() * other.group0().wzx()) + (self.group7().zyz() * other.group0().yww())
                - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from(self[e5]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group1().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group1().yxx())
                + (self.group8().xxy() * other.group0().wzx())
                + (self.group8().zyz() * other.group0().yww())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (self.group8().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e4315], self[e3215]))
                + (other.group1().zxyw() * self.group4().yzx().with_w(self[scalar]))
                + (self.group9().zx().with_zw(self[e45], self[e45]) * other.group0().yzz().with_w(other[e3215]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e15]]) * other.group1().xyz().with_w(other[e23]))
                - (other.group1().ywwy() * self.group4().zyz().with_w(self[e31]))
                - (other.group1().wzxx() * self.group4().xxy().with_w(self[e23]))
                - (other.group0().zxy() * self.group9().yzx()).with_w(other[e35] * self[e12]),
            // e1234
            (other[scalar] * self[e1234]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       31        0
    //    simd2        3        3        0
    //    simd3       11       20        0
    //    simd4       14        9        0
    // Totals...
    // yes simd       34       63        0
    //  no simd      101      133        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e5] * self[e4] * -1.0, other[e5] * self[e1234]])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, 0.0])
                + (other.group0().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                + (other.group0().yzxz() * self.group5().zxy().with_w(self[e43]))
                + (other.group0().wwwy() * self.group4().with_w(self[e42])),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], 0.0]) + (self.group8().yzx() * other.group0().zxy()).with_w(other[e5] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e425]]) * other.group0().xyzy())
                - (other.group0().wwwz() * self.group6().xyzz())
                - (self.group8().zxy() * other.group0().yzx()).with_w(other[e1] * self[e415]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (other.group0().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group0().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (self.group4() * other.group0().www()).with_w(other[e5] * self[e1234])
                - (self.group3().ww().with_zw(self[e4315], other[e1]) * other.group0().xyx().with_w(self[e23]))
                - (self.group9().zx().with_zw(self[e45], other[e2]) * other.group0().yzz().with_w(self[e31])),
            // e423, e431, e412
            (self.group4().yzx() * other.group0().zxy()) - (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                - (other.group0().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (other.group0().wwwy() * self.group7().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w(other[e5] * self[e321])
                + (other.group0().yzx() * self.group6().zxy()).with_w(other[e3] * self[e125])
                - (other.group0().zxy() * self.group6().yzx()).with_w(other[e5] * self[e12345]),
            // e1234
            -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
    }
}
impl GeometricProduct<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * self.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e1234]]) * self.group9().xyz().with_w(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group8().with_w(self[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group6().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group5().with_w(self[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group3().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e5]]) * self.group1().xyz().with_w(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       65        0
    //    simd2        1        1        0
    //    simd3       36       52        0
    //    simd4       35       25        0
    // Totals...
    // yes simd      110      143        0
    //  no simd      288      323        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4315]]) * other.group2().xyx().with_w(other[e431]))
                + (self.group4().zx().with_zw(self[e1234], self[e4125]) * other.group2().yzz().with_w(other[e412]))
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e423] * self[e4235])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e4315], other[e415]) * other.group1().xyx().with_w(self[e41]))
                - (self.group9().zx().with_zw(self[e45], other[e425]) * other.group1().yzz().with_w(self[e42]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (other.group2().zxy() * self.group4().yzx()).with_w(other[e412] * self[e12]),
            // e5
            (other[e321] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group2().yyy().with_w(other[e423]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group2().zzz().with_w(other[e431]))
                + (self.group6().wz().with_zw(self[e2], other[e321]) * other.group2().xxx().with_w(self[e12345]))
                + (self.group8().yzx() * other.group1().zxy()).with_w(other[e412] * self[e125])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e412]]) * other.group2().zzy().with_w(other[e125]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e3]]) * other.group1().xyzz())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e431]]) * other.group2().yxx().with_w(other[e315]))
                - (self.group0().yy().with_zw(self[e12345], other[e235]) * other.group2().with_w(self[e423]))
                - (self.group8().xxy() * other.group1().wzx()).with_w(other[e415] * self[e1])
                - (self.group8().zyz() * other.group1().yww()).with_w(other[e425] * self[e2]),
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw())
                - (self.group7().zxy() * other.group1().yzx()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx()) + (other.group2().zxy() * self.group7().yzx()) + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e12345]) * other.group1().xyz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group2().xyx())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (other.group2().yzz() * self.group7().zx().with_z(self[e4]))
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e35]]) * other.group2().xyx().with_w(other[e412]))
                + (self.group4().zx().with_zw(self[e1234], self[e4235]) * other.group2().yzz().with_w(other[e415]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e425] * self[e4315])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e235] * self[e41])
                - (other.group2().zxy() * self.group4().yzx()).with_w(other[e315] * self[e42])
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e125] * self[e43]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().zxy() * other.group1().yzx())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * other.group1().wwy())
                - (self.group4().yzz() * other.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group2())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (other.group2().yzx() * self.group5().zx().with_z(self[e4315]))
                - (other.group2().zxy() * self.group5().yzx())
                - (other.group2().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().with_zw(self[e4], self[e435]) * other.group2().yzz().with_w(other[e125]))
                + (self.group1().zx().with_zw(self[e321], other[e425]) * other.group1().yzz().with_w(self[e315]))
                + (self.group1().ww().with_zw(self[e431], self[e425]) * other.group2().xyx().with_w(other[e315]))
                + (self.group6().ww().with_zw(self[e2], other[e415]) * other.group1().xyx().with_w(self[e235]))
                + (other.group0().zxy() * self.group8().yzx()).with_w(other[e235] * self[e415])
                + (other.group1().www() * self.group6().xyz()).with_w(other[e435] * self[e125])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().with_w(other[e235]))
                - (other.group1().zxyw() * self.group1().yzx().with_w(self[e5]))
                - (self.group8().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e315]))
                - (other.group2().zxy() * self.group7().yzx()).with_w(other[e125] * self[e3]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4]),
        );
    }
}
impl GeometricProduct<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       69        0
    //    simd2        3        3        0
    //    simd3       40       58        0
    //    simd4       40       27        0
    // Totals...
    // yes simd      117      157        0
    //  no simd      320      357        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e423], self[scalar]]) * other.group2().xw())
                - (Simd32x2::from([self[e12345], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (self.group5() * other.group1().www()).with_w(other[e412] * self[e4125])
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e423] * self[e4235])
                + (self.group4().zxy() * other.group2().yzx()).with_w(other[e431] * self[e4315])
                + (other.group1().zxy() * self.group9().yzx()).with_w(other[e12345] * self[e1234])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e4315], other[e415]) * other.group1().xyx().with_w(self[e41]))
                - (self.group9().zx().with_zw(self[e45], other[e425]) * other.group1().yzz().with_w(self[e42]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (self.group4().yzx() * other.group2().zxy()).with_w(other[e412] * self[e12])
                - (other.group2().www() * self.group9().xyz()).with_w(other[e435] * self[e43]),
            // e5
            (other[e321] * self[e3215]) + (other[e12345] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                other[e125] * self[e2] * -1.0,
                other[e125] * self[e415] * -1.0,
                other[e315] * self[e1] * -1.0,
                other[e12345] * self[e321],
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * other.group2().yyy().with_w(other[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * other.group2().zzz().with_w(other[e412]))
                + (other.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (self.group6().wz().with_zw(self[e2], self[e235]) * other.group2().xxx().with_w(other[e423]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], self[e1]]) * self.group8().zyz().with_w(other[e415]))
                - (Simd32x4::from([other[e12345], other[e321], other[e321], other[e125]]) * self.group8().with_w(self[e412]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyzy())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxx().with_w(other[e435]))
                - (other.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group8().xxy() * other.group1().wzx()).with_w(other[e315] * self[e431]),
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group7().zyz())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx()) + (self.group7().yzx() * other.group2().zxy()) + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(other[e12345]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * other.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group2().xyz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (self.group7().zxy() * other.group2().yzx())
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], self[e4315]]) * self.group5().zyz().with_w(other[e425]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e4235]]) * self.group5().xxy().with_w(other[e415]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().xyz().with_w(other[e435]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (self.group4().zxy() * other.group2().yzx()).with_w(other[e412] * self[e35])
                - (other.group2().zxyy() * self.group4().yzx().with_w(self[e42]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e235] * self[e41])
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e125] * self[e43])
                - (other.group1().www() * self.group9().xyz()).with_w(other[e12345] * self[e45]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group4().zyz())
                + (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group4().xxy())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * other.group1().wwy())
                - (self.group4().yzz() * other.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(other[e12345]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group2().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (self.group5().zxy() * other.group2().yzx())
                - (self.group5().yzx() * other.group2().zxy())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345] * self[e1], other[e12345] * self[e2], other[e12345] * self[e3], other[e12345] * self[e5] * -1.0])
                + (other.group2().xyzz() * self.group1().www().with_w(self[e435]))
                + (self.group6().xyzy() * other.group1().www().with_w(other[e315]))
                + (self.group1().zx().with_zw(self[e321], self[e415]) * other.group1().yzz().with_w(other[e235]))
                + (self.group6().ww().with_zw(self[e2], other[e435]) * other.group1().xyx().with_w(self[e125]))
                + (other.group0().zxy() * self.group8().yzx()).with_w(other[e415] * self[e235])
                + (self.group7().zxy() * other.group2().yzx()).with_w(other[e425] * self[e315])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e5]]) * other.group0().xyx().with_w(other[e321]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group8().zx().with_zw(self[e5], self[e1]) * other.group0().yzz().with_w(other[e235]))
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e315] * self[e2]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       94        0
    //    simd2        9        9        0
    //    simd3       36       51        0
    //    simd4       25       14        0
    // Totals...
    // yes simd      132      168        0
    //  no simd      288      321        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0])
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group8().yzx()).with_w(other[e45] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().with_w(other[e41]))
                - (self.group8().zx().with_zw(self[e5], self[e415]) * other.group0().yzz().with_w(other[e41]))
                - (other.group2().zxy() * self.group7().yzx()).with_w(other[e42] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e42] * self[e425])
                - (other.group1().www() * self.group6().xyz()).with_w(other[e43] * self[e3]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().with_w(other[e45]))
                + (self.group5().zx().with_zw(self[e4315], self[e42]) * other.group2().yzx().with_w(other[e25]))
                + (self.group3().ww().with_zw(self[e31], self[e41]) * other.group2().xyx().with_w(other[e15]))
                + (self.group9().zx().with_zw(self[e45], self[e43]) * other.group2().yzz().with_w(other[e35]))
                - (other.group1().wwwx() * self.group3().xyz().with_w(self[e4235]))
                - (self.group3().yzxz() * other.group1().zxy().with_w(other[e43]))
                - (other.group2().zxy() * self.group5().yzx()).with_w(other[e41] * self[e15])
                - (other.group2().zxy() * self.group9().yzx()).with_w(other[e42] * self[e25]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group2().xyx())
                + (other.group2().yzz() * self.group4().zx().with_z(self[e1234]))
                + (self.group5().zxy() * other.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group4().yzx())
                - (self.group5().yzx() * other.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().with_w(other[e42]))
                + (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * other.group0().yzz().with_w(other[e43]))
                - (other.group0().zxy() * self.group8().yzx()).with_w(other[e45] * self[e12345])
                - (other.group2().zxy() * self.group7().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group6().yzx()).with_w(other[e25] * self[e431])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                + (self.group7().zyz() * other.group1().yww())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                + (self.group8().zxy() * other.group1().yzx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * other.group1().wwy())
                - (self.group8().yzz() * other.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4235]]) * other.group2().xyx().with_w(other[e15]))
                - (self.group9().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (self.group4().zx().with_zw(self[e1234], self[e31]) * other.group2().yzz().with_w(other[e25]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e15] * self[e23]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      110        0
    //    simd2       11       11        0
    //    simd3       56       76        0
    //    simd4       46       30        0
    // Totals...
    // yes simd      187      227        0
    //  no simd      448      480        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group3().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e4125] * self[e425]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e4235] * self[e435]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e321]]) * self.group7().zyz().with_w(other[e1234]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e4]]) * self.group7().xxy().with_w(other[e45]))
                + (other.group0().zxy() * self.group8().yzx()).with_w(other[e1234] * self[e12345])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e415]]) * other.group0().xyx().with_w(other[e41]))
                - (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group3().xyz().with_w(self[e1]))
                - (self.group8().zx().with_zw(self[e5], self[e2]) * other.group0().yzz().with_w(other[e42]))
                - (self.group8() * other.group2().www()).with_w(other[e43] * self[e3])
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e42] * self[e425])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e435])
                - (other.group1().www() * self.group6().xyz()).with_w(other[e23] * self[e423])
                - (other.group3().yzx() * self.group6().zxy()).with_w(other[e4235] * self[e423]),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], self[e3215]) * other.group1().yzz().with_w(other[e1234]))
                + (self.group9().ww().with_zw(self[e25], other[e35]) * other.group1().xyx().with_w(self[e43]))
                - (self.group3().xyzz() * other.group1().www().with_w(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                - (self.group3().zx().with_zw(self[e3215], other[e4125]) * other.group3().yzz().with_w(self[e12]))
                - (self.group9().ww().with_zw(self[e25], other[e4315]) * other.group3().xyx().with_w(self[e31]))
                - (self.group5().yzx() * other.group2().zxy()).with_w(other[e41] * self[e15])
                - (other.group2().zxy() * self.group9().yzx()).with_w(other[e4235] * self[e23]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group4().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group4().yzx() * other.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().xyz())
                + (Simd32x3::from(other[e1234]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group3().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group5().zxy() * other.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy())
                - (other.group3().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e425]]) * self.group7().zyz().with_w(other[e4315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e415]]) * self.group7().xxy().with_w(other[e4235]))
                + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().with_w(other[e42]))
                + (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * other.group0().yzz().with_w(other[e43]))
                + (self.group8() * other.group2().www()).with_w(other[e4125] * self[e435])
                + (other.group1().yzx() * self.group6().zxy()).with_w(other[e3215] * self[e4])
                - (other.group2().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (self.group1().zx().with_zw(self[e321], self[e2]) * other.group3().yzz().with_w(other[e31]))
                - (self.group6().ww().with_zw(self[e2], self[e1]) * other.group3().xyx().with_w(other[e23]))
                - (other.group0().zxy() * self.group8().yzx()).with_w(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).with_w(other[e25] * self[e431])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group7().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy())
                - (self.group7().yzx() * other.group3().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group8().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group8().yxx())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * other.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e1234] * self[e15]) + (other[e4315] * self[e12]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e1234] * self[e25]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e1234] * self[e35]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e45]]) * self.group5().xxy().with_w(other[e3215]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e4235]))
                + (self.group4().yzx() * other.group2().zxy()).with_w(other[e4125] * self[e35])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e35]]) * self.group4().zyz().with_w(self[e12]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e25]]) * self.group4().xxy().with_w(self[e31]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e35]]) * other.group2().xyz().with_w(other[e12]))
                - (other.group1().zxyy() * self.group9().yzx().with_w(self[e25]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e15] * self[e23])
                - (self.group5().yzx() * other.group3().zxy()).with_w(other[e23] * self[e15]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e1234] * self[e45])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43]),
        );
    }
}
impl GeometricProduct<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd3        4       10        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       40        0
    //  no simd       32       69        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e5] * self[e4]) - (other[e12345] * self[e12345]), (other[e5] * self[e1234]) + (other[e12345] * self[scalar])]),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group4()) - (Simd32x3::from(other[e12345]) * self.group9().xyz())).with_w(other[e12345] * self[e1234]),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e12345] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e5] * self[e415]) - (other[e12345] * self[e235]),
                -(other[e5] * self[e425]) - (other[e12345] * self[e315]),
                -(other[e5] * self[e435]) - (other[e12345] * self[e125]),
                other[e12345] * self[e321],
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(other[e5]) * self.group7()) - (Simd32x3::from(other[e12345]) * self.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group4().with_w(self[e1234])),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group5()) + (Simd32x3::from(other[e5]) * self.group9().xyz()) + (Simd32x3::from(other[e12345]) * self.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * self.group7().with_w(self[e321])),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd2        3        3        0
    //    simd3       12       18        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       46       69        0
    //  no simd       97      129        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0])
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group6().xyz())
                - (self.group7().yzx() * other.group0().zxy()))
            .with_w(other[e45] * self[e4]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e35] * self[e4315]) - (other[e45] * self[e15]),
                -(other[e15] * self[e12]) - (other[e15] * self[e4125]) - (other[e45] * self[e25]),
                -(other[e25] * self[e23]) - (other[e25] * self[e4235]) - (other[e45] * self[e35]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (other.group0().yzxx() * self.group5().zxy().with_w(self[e41]))
                + (self.group3().ww().with_zw(self[e4315], other[e25]) * other.group0().xyx().with_w(self[e42]))
                + (self.group9().zx().with_zw(self[e45], other[e35]) * other.group0().yzz().with_w(self[e43])),
            // e41, e42, e43
            Simd32x3::from(other[e45]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().xyz()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().zxy() * other.group0().yzx())
                - (self.group4().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e15] * self[e423]),
            // e423, e431, e412
            Simd32x3::from(other[e45]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group0().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e25]]) * other.group0().xyz().with_w(self[e31]))
                - (other.group0().yzxx() * self.group4().zxy().with_w(self[e23])),
            // e1234
            other[e45] * self[e1234],
        );
    }
}
impl GeometricProduct<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       61        0
    //    simd2        4        4        0
    //    simd3       24       37        0
    //    simd4       27       19        0
    // Totals...
    // yes simd       96      121        0
    //  no simd      229      256        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * other.group1().wx())
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) - (other[e4315] * self[e435]),
                (other[e25] * self[e4]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4125] * self[e415]),
                (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e4]]) * self.group7().xxy().with_w(other[e45]))
                - (other.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group7().yzx() * other.group0().zxy()).with_w(other[e4315] * self[e431])
                - (other.group0().www() * self.group6().xyz()).with_w(other[e4125] * self[e412]),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]) - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]) - (other[e4125] * self[e15]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]) - (other[e4125] * self[e3215]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (self.group3().ww().with_zw(self[e4315], other[e35]) * other.group0().xyx().with_w(self[e43]))
                - (other.group1().xyxw() * self.group9().ww().with_zw(self[e25], self[e1234]))
                - (self.group5().yzx() * other.group0().zxy()).with_w(other[e4235] * self[e23])
                - (other.group0().zxy() * self.group9().yzx()).with_w(other[e4315] * self[e31])
                - (other.group0().www() * self.group3().xyz()).with_w(other[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[e1234]) * other.group0().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                - (self.group4().yzx() * other.group0().zxy())
                - (other.group1().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e425]]) * self.group7().zyz().with_w(other[e4315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e415]]) * self.group7().xxy().with_w(other[e4235]))
                + (other.group1().zxyw() * self.group1().yzxw())
                + (self.group1().www() * other.group0().xyz()).with_w(other[e4125] * self[e435])
                - (other.group0().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (self.group1().zx().with_zw(self[e321], other[e35]) * other.group1().yzz().with_w(self[e412]))
                - (self.group6().ww().with_zw(self[e2], other[e25]) * other.group1().xyx().with_w(self[e431]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e15] * self[e423]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group0().yxx())
                + (self.group8().yzx() * other.group1().zxy())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group8().zyz()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group5().xxy().with_w(other[e4315]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group5().zyz().with_w(other[e4125]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e45]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                + (self.group4().yzx() * other.group0().zxy()).with_w(other[e4235] * self[e15])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group4().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group4().xxy().with_w(self[e23]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group0().xyzx())
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e35] * self[e12]),
            // e1234
            (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
        );
    }
}
impl GeometricProduct<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       60        0
    //    simd3       17       26        0
    //    simd4       19       14        0
    // Totals...
    // yes simd       73      100        0
    //  no simd      164      194        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                0.0,
            ]) - (self.group3().ww().with_zw(self[e4315], self[e41]) * other.group0().xyx().with_w(other[e415]))
                - (self.group9().zx().with_zw(self[e45], self[e42]) * other.group0().yzz().with_w(other[e425]))
                - (other.group1().zxy() * self.group4().yzx()).with_w(other[e435] * self[e43]),
            // e5
            -(other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]),
                other[e125] * self[e412] * -1.0,
            ]) - (Simd32x4::from([self[e2], self[e415], self[e1], self[e431]]) * other.group1().zzy().with_w(other[e315]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e2]]) * other.group0().xyx().with_w(other[e425]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e423]]) * other.group1().yxx().with_w(other[e235]))
                - (self.group0().yy().with_zw(self[e12345], other[e415]) * other.group1().with_w(self[e1]))
                - (self.group8().zx().with_zw(self[e5], self[e3]) * other.group0().yzz().with_w(other[e435])),
            // e41, e42, e43
            (other.group0().zxy() * self.group7().yzx())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group7().zx().with_z(self[e4])),
            // e23, e31, e12
            (other.group0().zxy() * self.group6().yzx()) + (other.group1().zxy() * self.group7().yzx())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group1().xyx())
                - (other.group0().yzx() * self.group6().zxy())
                - (other.group1().yzz() * self.group7().zx().with_z(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4125]]) * other.group1().xyx().with_w(other[e435]))
                + (self.group0().xx().with_zw(self[scalar], other[e415]) * other.group0().with_w(self[e4235]))
                + (other.group0().yzx() * self.group5().zxy()).with_w(other[e425] * self[e4315])
                - (other.group0().zxy() * self.group5().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group4().yzx()).with_w(other[e315] * self[e42]),
            // e423, e431, e412
            (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx()) + (other.group0().yzz() * self.group4().zx().with_z(self[e1234]))
                - (other.group0().zxy() * self.group4().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (other.group1().yzx() * self.group5().zx().with_z(self[e4315]))
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group5().yzx())
                - (other.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().with_zw(self[e4], self[e415]) * other.group1().yzz().with_w(other[e235]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * other.group0().yzz().with_w(other[e425]))
                + (self.group1().ww().with_zw(self[e431], self[e125]) * other.group1().xyx().with_w(other[e435]))
                + (self.group6().ww().with_zw(self[e2], self[e235]) * other.group0().xyx().with_w(other[e415]))
                + Simd32x3::from(0.0).with_w((other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e125] * self[e3]))
                - (self.group1().yzxx() * other.group0().zxy().with_w(other[e235]))
                - (other.group1().zxy() * self.group7().yzx()).with_w(other[e315] * self[e2]),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
        );
    }
}
impl GeometricProduct<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       72        0
    //    simd2        4        4        0
    //    simd3       24       40        0
    //    simd4       26       14        0
    // Totals...
    // yes simd       99      130        0
    //  no simd      229      256        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e415], self[scalar]]) * other.group0().xw())
                + (Simd32x2::from([self[e423], self[e1234]]) * other.group1().xw())
                - (Simd32x2::from([self[e12345], self[e23]]) * other.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e5] * self[e42]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) + (other[e5] * self[e43]) - (other[e12345] * self[e4125]),
                0.0,
            ]) + (self.group4().xxy() * other.group1().wzx()).with_w(other[e12345] * self[e1234])
                - (self.group3().ww().with_zw(self[e4315], other[e425]) * other.group0().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], other[e435]) * other.group0().yzz().with_w(self[e43]))
                - (self.group4().yzx() * other.group1().zxy()).with_w(other[e415] * self[e41]),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group1().xxxw() * self.group6().wz().with_zw(self[e2], self[e4]))
                + (self.group8().yzx() * other.group0().zxy()).with_w(other[e12345] * self[e321])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e3]]) * other.group1().zzy().with_w(other[e435]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().xyzx())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e2]]) * other.group1().yxx().with_w(other[e425]))
                - (other.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group8().xxy() * other.group0().wzx()).with_w(other[e315] * self[e431])
                - (self.group8().zyz() * other.group0().yww()).with_w(other[e125] * self[e412]),
            // e41, e42, e43
            (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (self.group7().xxy() * other.group0().wzx())
                - (self.group7().zyz() * other.group0().yww()),
            // e23, e31, e12
            (self.group7().yzx() * other.group1().zxy()) + (other.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * other.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (self.group7().xxy() * other.group1().wzx())
                - (self.group7().zyz() * other.group1().yww())
                - (other.group0().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e425] * self[e12]) + (other[e235] * self[e1234]),
                (other[e12345] * self[e31]) + (other[e315] * self[e1234]),
                (other[e12345] * self[e12]) + (other[e125] * self[e1234]),
                -(other[e12345] * self[e45]) - (other[e125] * self[e43]),
            ]) + (self.group0().xx().with_zw(self[scalar], other[e415]) * other.group0().xyz().with_w(self[e4235]))
                + (self.group4().xxy() * other.group1().wzx()).with_w(other[e425] * self[e4315])
                + (self.group4().zyz() * other.group1().yww()).with_w(other[e435] * self[e4125])
                + (self.group5().xxy() * other.group0().wzx()).with_w(other[e5] * self[e1234])
                - (other.group1().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (self.group5().yzx() * other.group0().zxy()).with_w(other[e315] * self[e42]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().xxy() * other.group0().wzx()) + (self.group4().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group3().xyz())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group5().xxy() * other.group1().wzx())
                + (self.group5().zyz() * other.group1().yww())
                - (self.group5().yzx() * other.group1().zxy())
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group1().xyzz() * self.group1().www().with_w(self[e435]))
                + (self.group1().zx().with_zw(self[e321], self[e415]) * other.group0().yzz().with_w(other[e235]))
                + (self.group6().ww().with_zw(self[e2], other[e435]) * other.group0().xyx().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e321]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]))
                + (self.group7().xxy() * other.group1().wzx()).with_w(other[e415] * self[e235])
                + (self.group7().zyz() * other.group1().yww()).with_w(other[e425] * self[e315])
                + (other.group0().www() * self.group1().xyz()).with_w(other[e315] * self[e425])
                - (other.group0().zxyw() * self.group1().yzx().with_w(self[e5]))
                - (other.group1().zxyw() * self.group7().yzx().with_w(self[e12345])),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      194        0
    //    simd2       16       16        0
    //    simd3      124      162        0
    //    simd4      112       78        0
    // Totals...
    // yes simd      392      450        0
    //  no simd      992     1024        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
                (other[e12345] * self[scalar])
                    + (other[e5] * self[e1234])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group9().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from([self[e321], self[e23]]) * other.group6().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e435] * self[e4315]) + (other[e4125] * self[e425]),
                (other[e25] * self[e4]) + (other[e415] * self[e4125]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e35] * self[e4]) + (other[e425] * self[e4235]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e4] * self[e45]) - (other[e321] * self[e1234]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e2], other[e321], other[e321], self[e4]]) * self.group5().zyz().with_w(other[e45]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group4().with_w(self[e42]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group5().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group7().xxy().with_w(self[e321]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4125]]) * other.group8().xyx().with_w(other[e412]))
                + (self.group0().xx().with_zw(self[scalar], other[e12345]) * other.group1().xyz().with_w(self[e1234]))
                + (self.group4().zx().with_zw(self[e1234], other[e1]) * other.group8().yzz().with_w(self[e41]))
                + (self.group1().zx().with_zw(self[e321], self[e4235]) * other.group5().yzz().with_w(other[e423]))
                + (self.group6().ww().with_zw(self[e2], other[e1234]) * other.group5().xyx().with_w(self[e12345]))
                + (other.group4().zxy() * self.group8().yzx()).with_w(other[e4] * self[scalar])
                + (other.group7().zxy() * self.group3().yzx()).with_w(other[e431] * self[e4315])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e31]]) * self.group8().with_w(other[e431]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e2]]) * other.group4().xyx().with_w(other[e42]))
                - (self.group1().yzxz() * other.group5().zxy().with_w(other[e43]))
                - (other.group0().yy().with_zw(other[e12345], other[e41]) * self.group9().xyz().with_w(self[e1]))
                - (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group9().xyz().with_w(self[e415]))
                - (self.group8().zx().with_zw(self[e5], self[e425]) * other.group4().yzz().with_w(other[e42]))
                - (self.group3().zx().with_zw(self[e3215], self[e423]) * other.group7().yzz().with_w(other[e23]))
                - (self.group3().ww().with_zw(self[e4315], other[e425]) * other.group6().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], other[e435]) * other.group6().yzz().with_w(self[e43]))
                - (self.group9().ww().with_zw(self[e25], self[e435]) * other.group7().xyx().with_w(other[e43]))
                - (other.group8().zxy() * self.group4().yzx()).with_w(other[e31] * self[e431])
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e12] * self[e412])
                - (self.group7().yzx() * other.group3().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e412] * self[e12])
                - (other.group3().www() * self.group6().xyz()).with_w(other[e415] * self[e41])
                - (other.group9().yzx() * self.group6().zxy()).with_w(other[e4235] * self[e423]),
            // e5
            (other[scalar] * self[e5])
                + (other[e12345] * self[e3215])
                + (other[e5] * self[scalar])
                + (other[e5] * self[e45])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e321] * self[e3215])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e5] * self[e1]) + (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]),
                (other[e5] * self[e2]) + (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]),
                (other[e5] * self[e3]) + (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * other.group8().yyy().with_w(other[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * other.group8().zzz().with_w(other[e412]))
                + (self.group0().xx().with_zw(self[scalar], other[e12345]) * other.group3().xyz().with_w(self[e321]))
                + (self.group3().zx().with_zw(self[e3215], other[e321]) * other.group5().yzz().with_w(self[e12345]))
                + (self.group3().ww().with_zw(self[e4315], other[e1234]) * other.group3().xyx().with_w(self[e3215]))
                + (self.group6().wz().with_zw(self[e2], self[e235]) * other.group8().xxx().with_w(other[e423]))
                + (self.group9().ww().with_zw(self[e25], other[e45]) * other.group5().xyx().with_w(self[scalar]))
                + (self.group8().yzx() * other.group1().zxy()).with_w(other[e35] * self[e43])
                + (self.group8().yzx() * other.group6().zxy()).with_w(other[e5] * self[e4])
                - (Simd32x4::from([other[e2], other[e435], other[e415], self[e431]]) * self.group8().zxy().with_w(other[e315]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group6().xyz().with_w(other[e4]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], self[e423]]) * self.group8().xxy().with_w(other[e235]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e4315]]) * other.group8().zzy().with_w(other[e31]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e4235]]) * other.group1().xyz().with_w(self[e23]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e415]]) * other.group6().xyz().with_w(other[e1]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e4235]]) * other.group8().yxx().with_w(other[e23]))
                - (self.group3().yzxz() * other.group5().zxy().with_w(other[e43]))
                - (other.group0().yy().with_zw(other[e12345], other[e41]) * self.group8().with_w(self[e15]))
                - (self.group0().yy().with_zw(self[e12345], other[e42]) * other.group8().with_w(self[e25]))
                - (self.group3().zx().with_zw(self[e3215], self[e435]) * other.group9().yzz().with_w(other[e3]))
                - (self.group9().ww().with_zw(self[e25], self[e425]) * other.group9().xyx().with_w(other[e2]))
                - (self.group5().yzx() * other.group3().zxy()).with_w(other[e12] * self[e4125])
                - (self.group8().zyz() * other.group6().yww()).with_w(other[e125] * self[e412])
                - (other.group3().zxy() * self.group9().yzx()).with_w(other[e4315] * self[e31])
                - (other.group3().www() * self.group3().xyz()).with_w(other[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e1234]) * other.group9().xyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group4().zzy())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group5().xyx())
                + (other.group5().yzz() * self.group4().zx().with_z(self[e1234]))
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group7())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group6().xyz())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group6().xyz())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group7().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group7().zzy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group7().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (other.group5().zxy() * self.group4().yzx())
                - (other.group7().yzz() * self.group6().zxw())
                - (self.group4().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(other[e45]) * self.group9().xyz())
                + (Simd32x3::from(other[e1234]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group9().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (other.group5().yzx() * self.group5().zxy())
                + (other.group7().zxy() * self.group8().yzx())
                + (other.group8().zxy() * self.group7().yzx())
                + (other.group1().zxy() * self.group1().yzx())
                + (other.group6().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group6().xyz())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e12345]) * other.group6().xyz())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group8().xyx())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx())
                - (other.group4().zxy() * self.group3().yzx())
                - (other.group5().zxy() * self.group5().yzx())
                - (other.group7().yzz() * self.group8().zx().with_z(self[e5]))
                - (other.group8().yzz() * self.group7().zx().with_z(self[e4]))
                - (self.group4().yzx() * other.group3().zxy())
                - (other.group6().yzx() * self.group6().zxy())
                - (other.group9().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]) + (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]) + (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]) + (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e4] * self[e3215]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group6())
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e415]]) * self.group4().with_w(other[e4235]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e4]]) * self.group7().zyz().with_w(other[e3215]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e435]]) * self.group7().xxy().with_w(other[e4125]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e1234]]) * self.group8().with_w(other[e5]))
                + (Simd32x4::from([self[e5], self[e5], self[e315], self[e125]]) * other.group4().xyx().with_w(other[e43]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4315]]) * other.group8().xyx().with_w(other[e425]))
                + (other.group0().yy().with_zw(other[e12345], self[scalar]) * self.group5().with_w(other[e321]))
                + (self.group0().xx().with_zw(self[scalar], other[e41]) * other.group6().xyz().with_w(self[e235]))
                + (self.group0().yy().with_zw(self[e12345], other[e42]) * other.group5().with_w(self[e315]))
                + (self.group4().zx().with_zw(self[e1234], self[e4125]) * other.group8().yzz().with_w(other[e435]))
                + (self.group8().zx().with_zw(self[e5], self[e15]) * other.group4().yzz().with_w(other[e423]))
                + (self.group3().zx().with_zw(self[e3215], self[e4235]) * other.group7().yzz().with_w(other[e415]))
                + (self.group9().ww().with_zw(self[e25], self[e35]) * other.group7().xyx().with_w(other[e412]))
                + (other.group5().yzx() * self.group6().zxy()).with_w(other[e431] * self[e25])
                + (self.group5().zxy() * other.group6().yzx()).with_w(other[e4315] * self[e425])
                - (self.group1().zx().with_zw(self[e321], other[e15]) * other.group9().yzz().with_w(self[e423]))
                - (self.group3().ww().with_zw(self[e4315], self[e42]) * other.group1().xyx().with_w(other[e315]))
                - (self.group6().ww().with_zw(self[e2], other[e3]) * other.group9().xyx().with_w(self[e12]))
                - (self.group9().zx().with_zw(self[e45], self[e43]) * other.group1().yzz().with_w(other[e125]))
                - (other.group4().zxy() * self.group8().yzx()).with_w(other[e12345] * self[e45])
                - (other.group5().zxy() * self.group6().yzx()).with_w(other[e45] * self[e12345])
                - (other.group7().zxy() * self.group3().yzx()).with_w(other[e23] * self[e1])
                - (other.group8().zxy() * self.group4().yzx()).with_w(other[e31] * self[e2])
                - (self.group5().yzx() * other.group6().zxy()).with_w(other[e12] * self[e3])
                - (self.group7().yzx() * other.group3().zxy()).with_w(other[e235] * self[e41])
                - (other.group3().www() * self.group1().xyz()).with_w(other[e1] * self[e23])
                - (other.group6().www() * self.group9().xyz()).with_w(other[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[scalar]) * other.group7())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group9().xyz())
                + (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group4().yxx())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group4().zzy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group4().yzx())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group5().xyx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group7().yxx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group7().zzy())
                + (other.group4().yzz() * self.group6().zxw())
                + (other.group5().yzz() * self.group7().zx().with_z(self[e4]))
                - (Simd32x3::from(other[e4]) * self.group9().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group6().yzx())
                - (other.group5().zxy() * self.group7().yzx())
                - (self.group7().yzx() * other.group9().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group8())
                + (Simd32x3::from(other[e12345]) * self.group3().xyz())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (Simd32x3::from(other[e321]) * self.group3().xyz())
                + (Simd32x3::from(other[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(self[e12345]) * other.group3().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group3().zzy())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group6().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group8().xyx())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group3().yxx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group6().xyx())
                + (other.group5().yzz() * self.group8().zx().with_z(self[e5]))
                + (other.group8().yzx() * self.group5().zx().with_z(self[e4315]))
                + (self.group8().yzx() * other.group9().zxy())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group8().zyz())
                - (other.group5().zxy() * self.group8().yzx())
                - (other.group8().zxy() * self.group5().yzx())
                - (other.group8().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group6().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e321] * self[e415]) + (other[e1234] * self[e15]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e321] * self[e425]) + (other[e1234] * self[e25]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e1234] * self[e35]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]) - (other[e321] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group9())
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e45]]) * self.group7().with_w(other[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group5().xxy().with_w(other[e4315]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group5().zyz().with_w(other[e4125]))
                + (other.group0().yy().with_zw(other[e12345], self[scalar]) * self.group1().xyz().with_w(other[e3215]))
                + (self.group0().xx().with_zw(self[scalar], other[e235]) * other.group9().xyz().with_w(self[e415]))
                + (self.group0().yy().with_zw(self[e12345], other[e315]) * other.group1().xyz().with_w(self[e425]))
                + (self.group7().zx().with_zw(self[e4], other[e435]) * other.group8().yzz().with_w(self[e125]))
                + (self.group1().ww().with_zw(self[e431], other[e3]) * other.group8().xyx().with_w(self[e125]))
                + (self.group3().zx().with_zw(self[e3215], other[e1]) * other.group4().yzz().with_w(self[e235]))
                + (self.group3().ww().with_zw(self[e4315], other[e415]) * other.group5().xyx().with_w(self[e235]))
                + (self.group9().zx().with_zw(self[e45], other[e2]) * other.group5().yzz().with_w(self[e315]))
                + (self.group9().ww().with_zw(self[e25], self[e435]) * other.group4().xyx().with_w(other[e125]))
                + (other.group7().zxy() * self.group8().yzx()).with_w(other[e425] * self[e315])
                + (self.group4().yzx() * other.group3().zxy()).with_w(other[e4235] * self[e15])
                + (other.group1().yzx() * self.group6().zxy()).with_w(other[e5] * self[e321])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e2]]) * self.group4().zyz().with_w(other[e315]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e1]]) * self.group4().xxy().with_w(other[e235]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e15]]) * other.group7().xyx().with_w(other[e23]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e35]]) * other.group3().xyz().with_w(self[e12]))
                - (self.group8().zx().with_zw(self[e5], self[e25]) * other.group7().yzz().with_w(other[e31]))
                - (self.group8() * other.group1().www()).with_w(other[e15] * self[e23])
                - (other.group4().zxy() * self.group3().yzx()).with_w(other[e12345] * self[e5])
                - (other.group5().zxy() * self.group9().yzx()).with_w(other[e5] * self[e12345])
                - (other.group8().zxy() * self.group7().yzx()).with_w(other[e12] * self[e35])
                - (self.group5().yzx() * other.group9().zxy()).with_w(other[e125] * self[e3])
                - (other.group1().zxy() * self.group6().yzx()).with_w(other[e25] * self[e31])
                - (other.group6().zxy() * self.group1().yzx()).with_w(other[e15] * self[e4235]),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e1234] * self[scalar])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
    }
}
impl GeometricProduct<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       50        0
    //    simd2        1        1        0
    //    simd3       11       15        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       49       74        0
    //  no simd       96      129        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * other.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]),
                self[e412] * other[e4125] * -1.0,
            ]) - (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (other.group0().yzxy() * self.group6().zxy().with_w(self[e431])),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) - (other.group0().xyzy() * self.group9().www().with_w(self[e31]))
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().zxy() * other.group0().yzx()) - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0().xyz()) + (Simd32x3::from(other[e3215]) * self.group4()) + (self.group9().zxy() * other.group0().yzx())
                - (self.group9().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                -(self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                -(self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e4]))
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e415])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz()) + (self.group8().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (self.group8().zxy() * other.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (other.group0().yzxx() * self.group5().zxy().with_w(self[e15])),
            // e1234
            -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
    }
}
impl GeometricProduct<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       43        0
    //    simd2        3        3        0
    //    simd3       16       22        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       48       81        0
    //  no simd      128      167        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e4] * other[e5]) - (self[e5] * other[e4]), (self[e3215] * other[e4]) + (self[e1234] * other[e5])])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, self[e43] * other[e3]])
                + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group4().with_w(self[e41]))
                + (other.group0().yzxy() * self.group5().zxy().with_w(self[e42]))
                - (other.group0().zxyw() * self.group5().yzx().with_w(self[e45])),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e1] * other[e5], self[e2] * other[e5], self[e3] * other[e5], self[e5] * other[e4] * -1.0])
                + (self.group8().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e3]]) * other.group0().xyz().with_w(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group6().xyzy())
                - (other.group0().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group6().xyz())
                - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (self.group1().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * self.group4().with_w(self[e1234]))
                - (other.group0().xyzx() * self.group3().www().with_w(self[e23]))
                - (other.group0().yzxy() * self.group9().zxy().with_w(self[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group5()) + (self.group4().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e1234]) * other.group0().xyz())
                - (Simd32x3::from(other[e4]) * self.group9().xyz())
                - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group0().xyz())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().xyz())
                + (self.group3().zxy() * other.group0().yzx())
                - (self.group3().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e3] * -1.0, self[e435] * other[e1] * -1.0, self[e415] * other[e2] * -1.0, self[e321] * other[e5]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group7().with_w(self[e315]))
                + (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (other.group0().yzxz() * self.group6().zxy().with_w(self[e125]))
                - (self.group8() * other.group0().www()).with_w(self[e12345] * other[e5]),
            // e1234
            -(self[e12345] * other[e4]) - (self[e321] * other[e4]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
        );
    }
}
impl GeometricProduct<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group1(),
            // e5
            self[e5] * other[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group9(),
            // e1234
            self[e1234] * other[scalar],
        );
    }
}
impl GeometricProduct<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       42        0
    //    simd2        2        2        0
    //    simd3       16       23        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       52       79        0
    //  no simd      128      163        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group0().wx()),
            // e1, e2, e3, e4
            (self.group6().yzxw() * other.group0().zxy().with_w(other[e1234])) + (self.group7() * other.group0().www()).with_w(self[e12345] * other[e1234])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group8().with_w(self[e431]))
                - (other.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (other.group0().yzxz() * self.group6().zxy().with_w(self[e412])),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (self.group5() * other.group0().www()).with_w(self[e3215] * other[e1234])
                - (other.group0().xyzy() * self.group9().www().with_w(self[e31]))
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group5()) + (self.group4().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0().xyz())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group3().xyz())
                + (self.group9().zxy() * other.group0().yzx())
                - (self.group9().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e4]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group8().with_w(self[e415]))
                + (other.group0().zxyy() * self.group1().yzx().with_w(self[e425]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e5] * other[e1234]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (self.group7().zxy() * other.group0().yzx())
                - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().xyz()) + (self.group8().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (self.group8().zxy() * other.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyzy())
                + (other.group0().yzxx() * self.group5().zxy().with_w(self[e15])),
            // e1234
            (self[scalar] * other[e1234]) - (self[e45] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
    }
}
impl GeometricProduct<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       74        0
    //    simd2        8        8        0
    //    simd3       60       82        0
    //    simd4       59       44        0
    // Totals...
    // yes simd      175      208        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e5] * other[e4]),
                (self[e3215] * other[e4])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e45] * other[e321])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e1234]]) * other.group2().xw())
                + (Simd32x2::from([self[e235], self[scalar]]) * other.group0().xw())
                - (Simd32x2::from([self[e12345], self[e15]]) * other.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e1234]) * other.group2().xyz().with_w(other[e12345]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group5().xxy().with_w(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e423]]) * self.group5().zyz().with_w(self[e4235]))
                + (self.group9().yzxz() * other.group1().zxy().with_w(other[e412]))
                + (other.group0().zxyy() * self.group3().yzx().with_w(self[e4315]))
                + (self.group4().xxy() * other.group2().wzx()).with_w(self[e41] * other[e1])
                + (self.group4().zyz() * other.group2().yww()).with_w(self[e42] * other[e2])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e423]]) * self.group3().zyz().with_w(self[e23]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group9().xxy().with_w(self[e12]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group9().zyz().with_w(self[e45]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e435]]) * self.group3().xxy().with_w(self[e43]))
                - (self.group4().yzx() * other.group2().zxy()).with_w(self[e41] * other[e415])
                - (self.group5().yzx() * other.group3().zxy()).with_w(self[e42] * other[e425])
                - (self.group3().www() * other.group1().xyz()).with_w(self[e31] * other[e431])
                - (self.group9().www() * other.group0().xyz()).with_w(self[e1234] * other[e321]),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e415])
                - (self[e15] * other[e1])
                - (self[e25] * other[e425])
                - (self[e25] * other[e2])
                - (self[e35] * other[e435])
                - (self[e35] * other[e3])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e321]) * other.group2().xyz().with_w(other[e12345]))
                + (other.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (other.group2().zxyw() * self.group6().yzx().with_w(self[e4]))
                + (self.group8().yzx() * other.group3().zxy()).with_w(self[e235] * other[e423])
                + (self.group1().xxy() * other.group2().wzx()).with_w(self[e315] * other[e431])
                + (self.group1().zyz() * other.group2().yww()).with_w(self[e125] * other[e412])
                - (Simd32x4::from(self[e5]) * other.group3())
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e3]]) * other.group1().xyz().with_w(self[e435]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e315]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e415]]) * self.group8().zyz().with_w(self[e1]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group8().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group8().zyz().with_w(self[e2]))
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e435]))
                - (self.group6().xxyx() * other.group2().wzx().with_w(other[e1]))
                - (self.group6().zyzy() * other.group2().yww().with_w(other[e2]))
                - (other.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (self.group1().yzx() * other.group0().zxy())
                + (self.group6().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e12345]) * other.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group1().zyz())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group6().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group1().xxy())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group6().xxy()),
            // e23, e31, e12
            (self.group7().yzx() * other.group2().zxy())
                + (self.group8().yzx() * other.group0().zxy())
                + (self.group1().yzx() * other.group3().zxy())
                + (self.group6().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e12345]) * other.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group2().xyz())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group8().zyz())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group6().xxy())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group6().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group1().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group8().xxy())
                - (self.group7().xxy() * other.group2().wzx())
                - (self.group7().zyz() * other.group2().yww()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e3215] * other[e423]) + (self[e1234] * other[e235]),
                (self[e3215] * other[e431]) + (self[e1234] * other[e315]),
                (self[e3215] * other[e412]) + (self[e1234] * other[e125]),
                -(self[e45] * other[e12345]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group3().zyz().with_w(self[e4125]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group5().xxy().with_w(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e415]]) * self.group5().zyz().with_w(self[e4235]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group3().xxy().with_w(self[e4315]))
                + (self.group4().xxy() * other.group2().wzx()).with_w(self[e15] * other[e423])
                + (self.group4().zyz() * other.group2().yww()).with_w(self[e25] * other[e431])
                + (self.group9().yzx() * other.group3().zxy()).with_w(self[e1234] * other[e5])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group9().xxy().with_w(self[e31]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group9().zyz().with_w(self[e12]))
                - (other.group2().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (other.group3().xyzx() * self.group3().www().with_w(self[e23]))
                - (self.group5().yzx() * other.group1().zxy()).with_w(self[e42] * other[e315])
                - (self.group3().yzx() * other.group0().zxy()).with_w(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group5().zyz())
                + (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group5().xxy())
                + (self.group9().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().xyz())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group9().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group9().xxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2().xyz())
                + (Simd32x3::from(self[e45]) * other.group2().xyz())
                + (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group3().xyz())
                + (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group3().xxy())
                + (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group3().zyz())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group3().xxy())
                + (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group3().zyz())
                + (self.group5().xxy() * other.group2().wzx())
                + (self.group5().zyz() * other.group2().yww())
                + (self.group9().xxy() * other.group2().wzx())
                + (self.group9().zyz() * other.group2().yww())
                - (self.group5().yzx() * other.group2().zxy())
                - (self.group3().yzx() * other.group1().zxy())
                - (self.group3().yzx() * other.group3().zxy())
                - (self.group9().yzx() * other.group2().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e5]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group1().xxy().with_w(self[e125]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group6().xxyy())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group6().zyzz())
                + (other.group2().xyzx() * self.group1().www().with_w(self[e415]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * other.group3().xyz().with_w(other[e415]))
                + (self.group7().xxy() * other.group2().wzx()).with_w(self[e235] * other[e1])
                + (self.group7().zyz() * other.group2().yww()).with_w(self[e315] * other[e425])
                + (self.group8().yzx() * other.group0().zxy()).with_w(self[e315] * other[e2])
                - (Simd32x4::from(self[e5]) * other.group0().xyz().with_w(other[e321]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e315]]) * self.group8().zyz().with_w(self[e2]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e235]]) * self.group8().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (other.group2().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (self.group6().yzx() * other.group3().zxy()).with_w(self[e5] * other[e12345]),
            // e1234
            (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                + (self[e4] * other[e321])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                - (self[e12345] * other[e4])
                - (self[e4] * other[e12345])
                - (self[e321] * other[e4])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3]),
        );
    }
}
impl GeometricProduct<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd2       12       12        0
    //    simd3       60       75        0
    //    simd4       50       39        0
    // Totals...
    // yes simd      198      233        0
    //  no simd      480      512        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group3().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) + (self[e4] * other[e15]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]),
                (self[e2] * other[scalar]) + (self[e4] * other[e25]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]),
                (self[e3] * other[scalar]) + (self[e4] * other[e35]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]),
                -(self[e3] * other[e43]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e1234]]) * self.group1().xxy().with_w(self[e321]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[scalar]]) * self.group7().zyz().with_w(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group7().xxy().with_w(self[e12345]))
                + (self.group8().yzx() * other.group0().zxy()).with_w(self[e4] * other[e45])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e42]]) * other.group0().xyz().with_w(self[e2]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group8().zyz().with_w(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4125]]) * self.group6().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e31]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e41]]) * self.group6().zyz().with_w(self[e1]))
                - (other.group1().zxyz() * self.group1().yzx().with_w(self[e412]))
                - (self.group0().yy().with_zw(self[e12345], self[e423]) * other.group3().xyz().with_w(other[e23]))
                - (self.group7().yzx() * other.group2().zxy()).with_w(self[e423] * other[e4235]),
            // e5
            (self[e12345] * other[e3215])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                + (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                - (self[e5] * other[e45])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]),
                (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]),
                (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e45]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e35]]) * self.group3().xxx().with_w(self[e43]))
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e1234]]) * self.group3().zzz().with_w(self[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group3().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().with_w(self[e41]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4315]]) * self.group3().xxx().with_w(self[e31]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e41]]) * self.group3().zzzx())
                - (other.group1().zw().with_zw(other[e4235], other[e4125]) * self.group3().yyy().with_w(self[e12]))
                - (self.group5().yzx() * other.group2().zxy()).with_w(self[e23] * other[e4235])
                - (self.group9().yzx() * other.group2().zxy()).with_w(self[e25] * other[e42])
                - (self.group9().www() * other.group3().xyz()).with_w(self[e35] * other[e43]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group5().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group4().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group5().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (self.group9().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group9().zyz())
                - (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group9().xxy())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group4().yzx() * other.group3().zxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e45]) * other.group3().xyz())
                + (Simd32x3::from(self[e3215]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group3().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group5().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group9().xxy())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group3().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group9().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy())
                - (self.group3().yzx() * other.group0().zxy())
                - (self.group9().yzx() * other.group3().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e435] * other[e31]),
                (self[e5] * other[e42]) + (self[e425] * other[scalar]),
                (self[e5] * other[e43]) + (self[e435] * other[scalar]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group8().zyz().with_w(self[e415]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group6().xxyw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e43]]) * self.group7().zyz().with_w(self[e125]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group8().xxy().with_w(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e42]]) * self.group7().xxy().with_w(self[e315]))
                + (other.group3().zxyy() * self.group1().yzx().with_w(self[e425]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * other.group1().xyz().with_w(other[e41]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e25]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e35]]) * self.group1().zyz().with_w(self[e412]))
                - (other.group1().zxyx() * self.group6().yzx().with_w(self[e1]))
                - (self.group7().yzx() * other.group2().zxy()).with_w(self[e12345] * other[e45])
                - (self.group8().yzx() * other.group0().zxy()).with_w(self[e423] * other[e15])
                - (self.group6().www() * other.group3().xyz()).with_w(self[e2] * other[e31]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from(self[e321]) * other.group0().xyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group6().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group7().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group1().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group6().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy())
                - (self.group7().yzx() * other.group3().zxy())
                - (self.group1().yzx() * other.group0().zxy())
                - (self.group6().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group6().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group6().xxy())
                + (self.group1().yzx() * other.group2().zxy())
                - (Simd32x3::from(self[e5]) * other.group3().xyz())
                - (Simd32x3::from(self[e321]) * other.group2().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (self.group6().yzx() * other.group2().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e45] * other[e23]) + (self[e4235] * other[scalar]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e45] * other[e31]) + (self[e4235] * other[e12]) + (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e45] * other[e12]) + (self[e4315] * other[e23]) + (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group3().zyz().with_w(self[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group5().xxy().with_w(self[e25]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group3().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group5().zyz().with_w(self[e35]))
                + (self.group4().yzx() * other.group2().zxy()).with_w(self[e15] * other[e4235])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e12]]) * other.group2().xyz().with_w(self[e35]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group4().zyz().with_w(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group4().xxy().with_w(self[e23]))
                - (self.group3().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (other.group1().zxyy() * self.group9().yzx().with_w(self[e25]))
                - (self.group5().yzx() * other.group3().zxy()).with_w(self[e12] * other[e35]),
            // e1234
            (self[scalar] * other[e1234])
                + (self[e4235] * other[e41])
                + (self[e4315] * other[e42])
                + (self[e4125] * other[e43])
                + (self[e1234] * other[scalar])
                + (self[e1234] * other[e45])
                - (self[e45] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43]),
        );
    }
}
impl std::ops::Div<geometric_product> for Plane {
    type Output = geometric_product_partial<Plane>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       29       47        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                other[e43] * self[e4125],
            ]) + (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().with_w(other[scalar]))
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       23       42        0
    //  no simd       44       63        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                -(other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                -(other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxy().with_w(other[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e2] * self[e4125] * -1.0,
                other[e3] * self[e4235] * -1.0,
                other[e1] * self[e4315] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().yzxy() * other.group3().zxy().with_w(other[e425]))
                + (self.group0().wwwx() * other.group0().with_w(other[e415]))
                - (self.group0() * other.group1().www().with_w(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                -(other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                -(other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e423])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       22        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (other.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).with_w(-(other[e315] * self[e4315]) - (other[e125] * self[e4125]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiFlector> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                -(other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                -(other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<AntiLine> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       13       21        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e31] * self[e4125],
                other[e12] * self[e4235],
                other[e23] * self[e4315],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiMotor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiPlane> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        8       18        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e2] * self[e4125] * -1.0,
                other[e3] * self[e4235] * -1.0,
                other[e1] * self[e4315] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) + (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<AntiScalar> for Plane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
    }
}
impl GeometricProduct<Circle> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       17        0
    //    simd3        1        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       28       47        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e412] * self[e4125],
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e431])),
            // e1, e2, e3, e5
            (other.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(other[e125] * self[e4125] * -1.0)
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e315]))
                - (self.group0().wwwx() * other.group0().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       16        0
    //    simd3        1        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd        9       25        0
    //  no simd       32       50        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e412] * self[e4125],
            ]) + (self.group0().zxyy() * other.group2().yzx().with_w(other[e431]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e423])),
            // e1, e2, e3, e5
            (other.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(other[e12345] * self[e3215])
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e315]))
                - (self.group0().wwwx() * other.group0().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Dipole> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       25       43        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                other[e43] * self[e4125],
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e41]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e45] * self[e3215]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       48       61        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234])) + Simd32x3::from(0.0).with_w(other[e4125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * other.group2().www().with_w(other[e4315]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e1234]))
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                -(other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                -(other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().xyzz() * other.group3().www().with_w(other[e43]))
                + (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (other.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricProduct<DualNum> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        5        0
    // no simd        0       20        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       22        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                other[e25] * self[e4125],
                other[e35] * self[e4235],
                other[e15] * self[e4315],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricProduct<Flector> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]),
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e25])),
        );
    }
}
impl GeometricProduct<Line> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        4       15        0
    //  no simd       13       24        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().zxyy() * other.group1().yzx().with_w(other[e425]))
                + (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e435] * self[e4315],
                other[e415] * self[e4125],
                other[e425] * self[e4235],
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Motor> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       24       32        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([other[e125] * self[e4315] * -1.0, other[e235] * self[e4125] * -1.0, other[e315] * self[e4235] * -1.0, 0.0])
                + (other.group0().xyzx() * self.group0().wwwx())
                + (self.group0().xyzz() * other.group1().www().with_w(other[e435]))
                + (self.group0().zxyy() * other.group1().yzx().with_w(other[e425])),
            // e1, e2, e3, e5
            (other.group0().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(other[e125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * other.group0().www().with_w(other[e315]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       50        0
    //    simd2        1        1        0
    //    simd3       11       16        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       46       75        0
    //  no simd       96      132        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]),
            ]) + (Simd32x2::from([other[e1234], other[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                -(other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                -(other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group6().zxy().with_w(other[e423])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                other[e12] * self[e4125] * -1.0,
            ]) + (other.group5() * self.group0().www()).with_w(other[e1234] * self[e3215])
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23]))
                - (self.group0().wwwy() * other.group9().xyz().with_w(other[e31])),
            // e41, e42, e43
            (other.group4().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (other.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group0().xyz()) + (Simd32x3::from(self[e3215]) * other.group4()) + (other.group9().yzx() * self.group0().zxy())
                - (other.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().yzxy() * other.group1().zxy().with_w(other[e425]))
                + (self.group0().wwwx() * other.group7().with_w(other[e415]))
                - (other.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (other.group7().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group0().xyz()) - (other.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group6().xyz())
                + (other.group8().yzx() * self.group0().zxy())
                - (other.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (self.group0().yzxx() * other.group5().zxy().with_w(other[e15])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
    }
}
impl GeometricProduct<Plane> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        8       15        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e4315] * self[e4125],
                other[e4125] * self[e4235],
                other[e4235] * self[e4315],
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricProduct<RoundPoint> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       12       24        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().xyzx())
                + (self.group0().wwwy() * other.group0().xyzy())
                + Simd32x3::from(0.0).with_w((self[e4125] * other[e3]) + (self[e3215] * other[e4])),
        );
    }
}
impl GeometricProduct<Scalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(other[scalar]) * self.group0());
    }
}
impl GeometricProduct<Sphere> for Plane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd       12       23        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e3215] * other[e1234]),
            // e15, e25, e35, scalar
            (self.group0() * other.group0().www().with_w(other[e1234])) + Simd32x3::from(0.0).with_w(-(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                - (self.group0().wwwx() * other.group0().xyzx()),
        );
    }
}
impl GeometricProduct<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       24       43        0
    //  no simd       48       67        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                -(self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                -(self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * other[e2] * -1.0,
                self[e4315] * other[e321] * -1.0,
                self[e4125] * other[e321] * -1.0,
                self[e4125] * other[e435],
            ]) + (self.group0().yzxx() * other.group3().zxy().with_w(other[e415]))
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * other[e415]) + (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) + (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) + (self[e3215] * other[e3]),
                -(self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (self.group0().xxyw() * other.group2().wzx().with_w(other[e12345]))
                + (self.group0().zyzw() * other.group2().yww().with_w(other[e321]))
                - (self.group0().yzxx() * other.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e423])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       52       65        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234])) + Simd32x3::from(0.0).with_w(self[e4125] * other[e4125] * -1.0)
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) + (self[e3215] * other[e41]),
                (self[e4315] * other[e45]) + (self[e3215] * other[e42]),
                (self[e4125] * other[e45]) + (self[e3215] * other[e43]),
                -(self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                -(self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                -(self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
        );
    }
}
impl std::ops::Div<geometric_product> for RoundPoint {
    type Output = geometric_product_partial<RoundPoint>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        2        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       43       58        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group1())
                + (other.group2().zxyw() * self.group0().yzxw())
                + Simd32x3::from(0.0).with_w(-(other[e42] * self[e2]) - (other[e43] * self[e3]))
                - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[scalar] * self[e5]])
                + (other.group2().xyzy() * self.group0().wwwy())
                + (other.group2().wwwz() * self.group0().xyzz())
                + (self.group0().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e45])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd3        0        2        0
    //    simd4       12       11        0
    // Totals...
    // yes simd       23       41        0
    //  no simd       59       78        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4] * self[e1] * -1.0, other[e4] * self[e2] * -1.0, other[e4] * self[e3] * -1.0, other[e3] * self[e3]])
                + (other.group3().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1]))
                - (Simd32x4::from(self[e4]) * other.group1().xyz().with_w(other[e5]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e4] * self[e5]),
            // e23, e31, e12, e45
            (other.group3().zxyw() * self.group0().yzxw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e415]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().xyz().with_w(other[e435]))
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e4] * self[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().xyzy() * other.group3().www().with_w(other[e431]))
                + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<AntiDualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(other[e3215] * self[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e3215] * self[e4]),
            // e235, e315, e125, e5
            other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       21        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e321]) * self.group0().xyz()) - (Simd32x3::from(self[e4]) * other.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5])),
        );
    }
}
impl GeometricProduct<AntiFlector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd3        6        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       12       20        0
    //  no simd       24       42        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4])),
            // e23, e31, e12, e45
            ((other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (other.group1().yzx() * self.group0().zxy()))
            .with_w(other[e5] * self[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5])),
        );
    }
}
impl GeometricProduct<AntiLine> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        0        4        0
    //    simd4        4        3        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       18       34        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0]) * other.group1().with_w(-(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e5]) * other.group0()).with_w(0.0) + (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[e35] * self[e3]])
                + (self.group0().zxyx() * other.group0().yzx().with_w(other[e15]))
                + (self.group0().wwwy() * other.group1().with_w(other[e25])),
        );
    }
}
impl GeometricProduct<AntiMotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       41        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * other.group0().xyz().with_w(other[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e3215] * self[e4]) - (other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e25] * self[e3]) - (other[e3215] * self[e1]),
                -(other[e35] * self[e1]) - (other[e3215] * self[e2]),
                -(other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0())
                + (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[scalar]) * self.group0().xyz()) + (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[scalar] * self[e4]),
        );
    }
}
impl GeometricProduct<AntiPlane> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd       12       20        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0().xyz(),
            // e23, e31, e12, e45
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e5] * self[e4]),
            // e15, e25, e35, scalar
            (other.group0().wwwx() * self.group0().xyzx()) + Simd32x3::from(0.0).with_w((other[e2] * self[e2]) + (other[e3] * self[e3]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group0()),
        );
    }
}
impl GeometricProduct<AntiScalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e5]]) * self.group0().xyz().with_w(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricProduct<Circle> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        2        3        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       16       26        0
    //  no simd       35       50        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (Simd32x3::from(self[e4]) * other.group1().xyz()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e415]))
                - (other.group1().wwwz() * self.group0().xyzz())
                - (self.group0().wwwy() * other.group2().with_w(other[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e321] * self[e5]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e235]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e315])),
        );
    }
}
impl GeometricProduct<CircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       21        0
    //    simd3        2        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       40       58        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (Simd32x3::from(self[e4]) * other.group1().xyz()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e415]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().xyz().with_w(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e125] * self[e2] * -1.0,
                other[e235] * self[e3] * -1.0,
                other[e315] * self[e1] * -1.0,
                (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e423]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group1().xyz().with_w(other[e12345])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e12345] * self[e1]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e12345] * self[e2]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) + (other[e12345] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Dipole> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       20        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       35       53        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([other[e23] * self[e5], other[e31] * self[e5], other[e12] * self[e5], -(other[e42] * self[e2]) - (other[e43] * self[e3])])
                + (self.group0().yzxw() * other.group2().zxy().with_w(other[e45]))
                - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[e35] * self[e3]])
                + (self.group0().zxyy() * other.group1().yzx().with_w(other[e25]))
                + (self.group0().wwwx() * other.group2().with_w(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().with_w(other[e45])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       29        0
    //    simd3        0        2        0
    //    simd4       13       11        0
    // Totals...
    // yes simd       20       42        0
    //  no simd       59       79        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e43] * self[e2] * -1.0, other[e41] * self[e3] * -1.0, other[e42] * self[e1] * -1.0, other[e3215] * self[e4]])
                + (other.group3().xyzz() * self.group0().wwwz())
                + (self.group0().xyzy() * other.group2().www().with_w(other[e4315]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e4235]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e1234] * self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group0().with_w(other[e3215]))
                - (other.group1().wwwx() * self.group0().xyzx())
                - (self.group0().zxyy() * other.group3().yzx().with_w(other[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                other[e35] * self[e3],
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyz().with_w(other[e15]))
                + (other.group2().zxyy() * self.group0().yzxy())
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e45] * self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e43] * self[e3] * -1.0]) + (other.group1().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e41]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e42])),
        );
    }
}
impl GeometricProduct<DualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e5] * self[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e5] * self[e4]),
            // e15, e25, e35, e1234
            self.group0() * other.group0().xx().with_zw(other[e5], other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       21        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) - (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e45] * self[e4]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5])),
        );
    }
}
impl GeometricProduct<Flector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       41        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4])),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (other.group1().yzx() * self.group0().zxy()))
            .with_w(other[e3215] * self[e4]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().yzxw() * self.group0().zxy().with_w(self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * other.group0(),
        );
    }
}
impl GeometricProduct<Line> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        5        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       18       38        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other.group1().with_w(-(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e5]) * other.group0()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Motor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd3        3        4        0
    //    simd4        1        5        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       24       50        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * other.group0().xyz().with_w(other[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e125] * self[e4]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (other.group0().zxyw() * self.group0().yzx().with_w(self[e5])),
        );
    }
}
impl GeometricProduct<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       46        0
    //    simd2        3        3        0
    //    simd3       16       22        0
    //    simd4       13       11        0
    // Totals...
    // yes simd       54       82        0
    //  no simd      128      162        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e4] * self[e5]) - (other[e5] * self[e4]), (other[e3215] * self[e4]) + (other[e1234] * self[e5])])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e43] * self[e3] * -1.0])
                + (Simd32x4::from(other[scalar]) * self.group0())
                + (self.group0().zxyw() * other.group5().yzx().with_w(other[e45]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group4().with_w(other[e41]))
                - (self.group0().yzxy() * other.group5().zxy().with_w(other[e42])),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], other[e435] * self[e3] * -1.0])
                + (other.group8().yzx() * self.group0().zxy()).with_w(other[e5] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyz().with_w(other[e415]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group6().xyzy())
                - (other.group8().zxy() * self.group0().yzx()).with_w(other[e4] * self[e5]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group6().xyz())
                - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (other.group1().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group4().with_w(other[e3215]))
                - (self.group0().xyzx() * other.group3().www().with_w(other[e23]))
                - (self.group0().zxyy() * other.group9().yzx().with_w(other[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().xyz())
                + (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(self[e4]) * other.group9().xyz())
                + (other.group4().yzx() * self.group0().zxy())
                - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e3215]) * self.group0().xyz())
                - (Simd32x3::from(self[e5]) * other.group9().xyz())
                - (other.group3().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) + (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e12345] * self[e2]) + (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e12345] * self[e3]) + (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e321] * self[e5]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().with_w(other[e12345]))
                - (self.group0().yzxx() * other.group6().zxy().with_w(other[e235])),
            // e1234
            (other[e321] * self[e4]) + (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e12345] * self[e4]),
        );
    }
}
impl GeometricProduct<Plane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        7       14        0
    //  no simd        9       20        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e3215] * self[e4]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
        );
    }
}
impl GeometricProduct<RoundPoint> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       17       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().xyz()) - (Simd32x3::from(other[e4]) * self.group0().xyz()),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group0().yzx()).with_w(other[e5] * self[e4]) - (other.group0().yzxw() * self.group0().zxy().with_w(self[e5])),
            // e15, e25, e35, scalar
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e1]]) * self.group0().xyz().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
    }
}
impl GeometricProduct<Scalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[scalar]) * self.group0(), /* e5 */ self[e5] * other[scalar]);
    }
}
impl GeometricProduct<Sphere> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd3        1        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       16        0
    //  no simd       14       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (self.group0().yzxw() * other.group0().zxyw()) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e5] * other[e1234]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
            ]),
        );
    }
}
impl GeometricProduct<VersorEven> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       25       41        0
    //  no simd       64       83        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4] * other[e415] * -1.0, self[e4] * other[e425] * -1.0, self[e4] * other[e435] * -1.0, self[e3] * other[e3]])
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1]))
                + (self.group0().wwwy() * other.group3().xyzy())
                - (Simd32x4::from([other[e431], other[e4], other[e4], self[e5]]) * self.group0().zyz().with_w(other[e4]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e5]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            (self.group0().yzxw() * other.group3().zxy().with_w(other[e5]))
                - (Simd32x4::from(self[e5]) * other.group0().xyz().with_w(other[e4]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group2().xyz().with_w(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e3] * other[e412]) + (self[e4] * other[e321]),
            ]) + (self.group0().xxyx() * other.group2().wzx().with_w(other[e423]))
                + (self.group0().zyzy() * other.group2().yww().with_w(other[e431]))
                - (self.group0().yzxw() * other.group2().zxy().with_w(other[e12345])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) + (self[e4] * other[e235]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) + (self[e4] * other[e315]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) + (self[e4] * other[e125]),
                -(self[e3] * other[e125]) - (self[e5] * other[e12345]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], other[e315]]) * other.group0().xyz().with_w(self[e2]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       28        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       22       42        0
    //  no simd       64       84        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e2] * other[e43] * -1.0, self[e3] * other[e41] * -1.0, self[e1] * other[e42] * -1.0, self[e5] * other[e1234]])
                + (Simd32x4::from(self[e4]) * other.group3())
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e4125])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4] * other[e15]) + (self[e5] * other[e41]),
                (self[e4] * other[e25]) + (self[e5] * other[e42]),
                (self[e4] * other[e35]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (self.group0().yzxw() * other.group3().zxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], other[e25]]) * other.group1().xyz().with_w(self[e2]))
                + (self.group0().yzxx() * other.group2().zxyx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e5]]) * self.group0().xxy().with_w(other[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e4] * other[e15], self[e4] * other[e25], self[e4] * other[e35], self[e3] * other[e43] * -1.0])
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e45]]) * self.group0().zyzw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e42]]) * other.group0().xyz().with_w(self[e2]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
        );
    }
}
impl std::ops::Div<geometric_product> for Scalar {
    type Output = geometric_product_partial<Scalar>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ other[e12345] * self[scalar]);
    }
}
impl GeometricProduct<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group2(),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
    }
}
impl GeometricProduct<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group1(),
            // e5
            other[e5] * self[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group9(),
            // e1234
            other[e1234] * self[scalar],
        );
    }
}
impl GeometricProduct<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[scalar]) * other.group0());
    }
}
impl GeometricProduct<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[scalar]) * other.group0(), /* e5 */ other[e5] * self[scalar]);
    }
}
impl GeometricProduct<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ other[scalar] * self[scalar]);
    }
}
impl GeometricProduct<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1234
            self[scalar] * other[e1234],
        );
    }
}
impl GeometricProduct<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl GeometricProduct<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
    }
}
impl std::ops::Div<geometric_product> for Sphere {
    type Output = geometric_product_partial<Sphere>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       40       58        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234]),
            ]) + (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().with_w(other[scalar]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().xyzx())
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       38        0
    //    simd3        0        1        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       26       49        0
    //  no simd       59       81        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e431] * self[e4125]) - (other[e4] * self[e4235]) - (other[e1] * self[e1234]),
                -(other[e412] * self[e4235]) - (other[e4] * self[e4315]) - (other[e2] * self[e1234]),
                -(other[e423] * self[e4315]) - (other[e4] * self[e4125]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group1().xyz().with_w(other[e1]))
                + (self.group0().yzxw() * other.group0().zxy().with_w(other[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e2] * self[e4125] * -1.0, other[e3] * self[e4235] * -1.0, other[e1] * self[e4315] * -1.0, other[e5] * self[e1234]])
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e425]))
                + (self.group0().yzxz() * other.group3().zxy().with_w(other[e435]))
                + (self.group0().wwwx() * other.group0().with_w(other[e415]))
                - (self.group0() * other.group1().www().with_w(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e412] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e431]))
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e423]))
                - (other.group0() * self.group0().www()).with_w(other[e321] * self[e1234]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group0().xyz().with_w(self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        9       22        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e321] * self[e1234] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125])),
        );
    }
}
impl GeometricProduct<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * other.group0().xyz()) + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (other.group1().yzx() * self.group0().zxy()))
            .with_w(other[e5] * self[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<AntiLine> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        4        0
    //    simd4        4        3        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       18       32        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group0()).with_w(0.0) + (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e31] * self[e4125], other[e12] * self[e4235], other[e23] * self[e4315], other[e35] * self[e4125] * -1.0])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().with_w(other[e25]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        3        4        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       24       42        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * other.group0().xyz().with_w(other[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w(-(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(self[e3215]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[scalar] * self[e4235], other[scalar] * self[e4315], other[scalar] * self[e4125], other[e35] * self[e4125] * -1.0])
                + (other.group0().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().xyzy())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        );
    }
}
impl GeometricProduct<AntiPlane> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd       12       23        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e5] * self[e1234]),
            // e235, e315, e125, e12345
            (other.group0().xyzx() * self.group0().wwwx())
                + (other.group0().wwwy() * self.group0().xyzy())
                + Simd32x3::from(0.0).with_w((other[e3] * self[e4125]) + (other[e5] * self[e1234])),
        );
    }
}
impl GeometricProduct<AntiScalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e1234]]) * self.group0().xyz().with_w(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
        );
    }
}
impl GeometricProduct<Circle> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       14        0
    //    simd3        2        4        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       38       54        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().with_w(other[e425]))
                + (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e235, e315, e125, e4
            (self.group0().zxyx() * other.group2().yzx().with_w(other[e423]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e431]))
                + Simd32x3::from(0.0).with_w(other[e412] * self[e4125])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e321] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e435] * self[e4315], other[e415] * self[e4125], other[e425] * self[e4235], other[e125] * self[e4125] * -1.0])
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e3215]]) * other.group2().with_w(other[e321]))
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e315]))
                - (self.group0().wwwx() * other.group0().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<CircleRotor> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        2        4        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       43       58        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e425]))
                + (self.group0().wwwx() * other.group0().with_w(other[e415])),
            // e235, e315, e125, e4
            (self.group0().zxyy() * other.group2().yzx().with_w(other[e431]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e423]))
                + Simd32x3::from(0.0).with_w((other[e412] * self[e4125]) + (other[e12345] * self[e1234]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e321] * self[e1234]),
            // e1, e2, e3, e5
            (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e3215]]) * other.group2()) + (other.group1().zxyw() * self.group0().yzxw())
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e315]))
                - (self.group0().wwwx() * other.group0().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Dipole> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd3        2        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       35       53        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e41]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().with_w(other[e15]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25])),
        );
    }
}
impl GeometricProduct<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       59       76        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4235] * self[e1234], other[e4315] * self[e1234], other[e4125] * self[e1234], other[e4125] * self[e4125] * -1.0])
                + (Simd32x4::from(self[e1234]) * other.group1().xyz().with_w(other[e3215]))
                + (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234]))
                - (self.group0().xyzy() * other.group2().www().with_w(other[e4315]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e1234]))
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                -(other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                -(other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                other[e45] * self[e1234],
            ]) + (self.group0().xyzz() * other.group3().www().with_w(other[e43]))
                + (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().xyzx())
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricProduct<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(other[e5] * self[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e5] * self[e1234]),
            // e235, e315, e125, e5
            self.group0() * other.group0().xx().with_zw(other[e5], other[e12345]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group0().xyz().with_w(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<FlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        9       25        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e45]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        6        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       47        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e3215] * self[e1234]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125])),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e45]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group1().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Line> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        4        0
    //    simd4        3        2        0
    // Totals...
    // yes simd        9       17        0
    //  no simd       18       31        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w((other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e3215]) * other.group0()).with_w(0.0) + (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235])),
        );
    }
}
impl GeometricProduct<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       24       41        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * other.group0().xyz().with_w(other[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) + (other[e5] * self[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0())
                - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e12345] * self[e1234]),
        );
    }
}
impl GeometricProduct<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       48        0
    //    simd2        2        2        0
    //    simd3       16       21        0
    //    simd4       13       12        0
    // Totals...
    // yes simd       55       83        0
    //  no simd      128      163        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                -(other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                -(other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group8().with_w(other[e12345]))
                + (self.group0().yzxx() * other.group6().zxy().with_w(other[e423]))
                - (other.group0().yy().with_zw(other[e12345], other[e321]) * self.group0().xyz().with_w(self[e1234])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (other.group5() * self.group0().www()).with_w(other[e1234] * self[e3215])
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23]))
                - (self.group0().wwwy() * other.group9().xyz().with_w(other[e31])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group5()) + (Simd32x3::from(self[e1234]) * other.group9().xyz()) + (other.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (other.group9().yzx() * self.group0().zxy())
                - (other.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e5] * self[e1234],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group8().with_w(other[e425]))
                + (self.group0().yzxz() * other.group1().zxy().with_w(other[e435]))
                + (self.group0().wwwx() * other.group7().with_w(other[e415]))
                - (other.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group6().xyz()) + (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (other.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group6().xyz())
                + (other.group8().yzx() * self.group0().zxy())
                - (other.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group3().xyzy())
                - (self.group0().yzxx() * other.group5().zxy().with_w(other[e15])),
            // e1234
            (other[scalar] * self[e1234]) + (other[e45] * self[e1234]) + (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
    }
}
impl GeometricProduct<Plane> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd       12       21        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e23, e31, e12, e45
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e1234])) + Simd32x3::from(0.0).with_w(-(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                - (other.group0().xyzx() * self.group0().wwwx()),
        );
    }
}
impl GeometricProduct<RoundPoint> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       17       25        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            -(Simd32x3::from(other[e4]) * self.group0().xyz()) - (Simd32x3::from(self[e1234]) * other.group0().xyz()),
            // e415, e425, e435, e321
            (other.group0().zxy() * self.group0().yzx()).with_w(other[e5] * self[e1234]) - (other.group0().yzxw() * self.group0().zxyw()),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e4315]]) * self.group0().xyz().with_w(other[e2]))
                + (other.group0().xyzx() * self.group0().wwwx())
                + Simd32x3::from(0.0).with_w((other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234])),
        );
    }
}
impl GeometricProduct<Scalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1234
            other[scalar] * self[e1234],
        );
    }
}
impl GeometricProduct<Sphere> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       17       25        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e23, e31, e12, e45
            (other.group0().yzx() * self.group0().zxy()).with_w(other[e1234] * self[e3215]) - (other.group0().zxyw() * self.group0().yzx().with_w(self[e1234])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e1234]))
                + Simd32x3::from(0.0).with_w((other[e1234] * self[e3215]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                - (other.group0().xyzx() * self.group0().wwwx()),
        );
    }
}
impl GeometricProduct<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       28       47        0
    //  no simd       64       83        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * other[e4]) - (self[e4125] * other[e431]) - (self[e1234] * other[e1]),
                -(self[e4235] * other[e412]) - (self[e4315] * other[e4]) - (self[e1234] * other[e2]),
                -(self[e4315] * other[e423]) - (self[e4125] * other[e4]) - (self[e1234] * other[e3]),
                (self[e4125] * other[e3]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e2]]) * other.group1().xyz().with_w(self[e4315]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * other[e2] * -1.0,
                self[e4315] * other[e321] * -1.0,
                self[e4125] * other[e321] * -1.0,
                self[e1234] * other[e5],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e435]]) * other.group2().xyz().with_w(self[e4125]))
                + (self.group0().yzxx() * other.group3().zxy().with_w(other[e415]))
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * other[e415]) + (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) + (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) + (self[e3215] * other[e3]),
                -(self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (self.group0().xxyw() * other.group2().wzx().with_w(other[e12345]))
                + (self.group0().zyzw() * other.group2().yww().with_w(other[e321]))
                - (self.group0().yzxx() * other.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4125] * other[e412]) + (self[e1234] * other[e12345]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e431]]) * other.group2().xyz().with_w(self[e4315]))
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e423]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], self[e1234]]) * self.group0().xxy().with_w(other[e321])),
        );
    }
}
impl GeometricProduct<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       28       45        0
    //  no simd       64       81        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234] * other[e4235], self[e1234] * other[e4315], self[e1234] * other[e4125], self[e4125] * other[e4125] * -1.0])
                + (Simd32x4::from(self[e1234]) * other.group1().xyz().with_w(other[e3215]))
                + (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) + (self[e3215] * other[e41]) + (self[e1234] * other[e15]),
                (self[e4315] * other[e45]) + (self[e3215] * other[e42]) + (self[e1234] * other[e25]),
                (self[e4125] * other[e45]) + (self[e3215] * other[e43]) + (self[e1234] * other[e35]),
                -(self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                -(self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                -(self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e1234] * other[scalar]) + (self[e1234] * other[e45]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e25]]) * other.group2().xyz().with_w(self[e4315]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
        );
    }
}
impl std::ops::Div<geometric_product> for VersorEven {
    type Output = geometric_product_partial<VersorEven>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       76        0
    //    simd3        0       12        0
    //    simd4       28       16        0
    // Totals...
    // yes simd       76      104        0
    //  no simd      160      176        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431]),
                (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (self.group0().ww().with_zw(self[e425], self[e12345]) * other.group0().xyx().with_w(other[scalar]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[scalar] * self[e415]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[scalar] * self[e425]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (self.group2().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().with_w(other[e41]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * other.group1().xyx().with_w(other[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e321]) * other.group1().yzz().with_w(other[scalar]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * other.group2().zxy().with_w(other[e45]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) + (other[scalar] * self[e235]),
                (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e5]]) * other.group2().yyyw())
                + (other.group1().xyx() * self.group2().wwy()).with_w(other[e15] * self[e1])
                + (other.group1().yzz() * self.group2().zxw()).with_w(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().with_w(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * other.group2().xxx().with_w(other[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[scalar] * self[e1]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[scalar] * self[e2]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (self.group1().ww().with_zw(self[e2], self[e4]) * other.group1().xyx().with_w(other[scalar]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e45] * self[e4])
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e41] * self[e1])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e42] * self[e425])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e42] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e43] * self[e435]),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       71        0
    //    simd3        0       17        0
    //    simd4       48       31        0
    // Totals...
    // yes simd       80      119        0
    //  no simd      224      246        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e4] * self[e1]) - (other[e3] * self[e431]),
                -(other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e4] * self[e2]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e4] * self[e435]) - (other[e4] * self[e3]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * other.group3().yzz().with_w(other[e435]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * other.group3().xyx().with_w(other[e425]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * other.group0().xyx().with_w(other[e321]))
                - (self.group1().zx().with_zw(self[e12345], self[e4]) * other.group0().yzz().with_w(other[e5]))
                - (self.group1().ww().with_zw(self[e2], self[e5]) * other.group0().xyx().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e5] * self[e423] * -1.0, other[e5] * self[e431] * -1.0, other[e5] * self[e412] * -1.0, other[e5] * self[e4]])
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                + (other.group3().zxy() * self.group3().yzx()).with_w(other[e321] * self[e12345])
                - (other.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e3]))
                - (other.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e412]))
                - (other.group2().yzzw() * self.group0().zx().with_zw(self[e4], self[e5]))
                - (other.group3().xyxy() * self.group1().ww().with_zw(self[e2], self[e425]))
                - (other.group3().yzzz() * self.group3().zx().with_zw(self[e321], self[e435]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * other.group1().yzz().with_w(other[e235]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e425] * self[e2])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e315] * self[e431])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e125] * self[e415]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e125] * self[e12345]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().with_w(other[e431]))
                + (self.group3().xyzz() * other.group3().www().with_w(other[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * other.group2().xxx().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).with_w(other[e412] * self[e435])
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * other.group2().xxx().with_w(other[e2]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * other.group2().yyy().with_w(other[e3]))
                - (other.group1().xyx() * self.group2().wwy()).with_w(other[e4] * self[e12345])
                - (other.group1().yzz() * self.group2().zxw()).with_w(other[e4] * self[e321])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e3] * self[e425] * -1.0, other[e1] * self[e435] * -1.0, other[e2] * self[e415] * -1.0, other[e5] * self[e321]])
                + (other.group1().xyxy() * self.group1().ww().with_zw(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group3().zx().with_zw(self[e321], self[e125]))
                + (other.group2().xyxy() * self.group3().ww().with_zw(self[e431], self[e425]))
                + (other.group2().yzzz() * self.group0().zx().with_zw(self[e4], self[e435]))
                + (other.group3().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (other.group3().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (other.group3().wwwz() * self.group0().xyz().with_w(self[e125]))
                + (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group2().zxyz() * self.group0().yzx().with_w(self[e3]))
                - (self.group2().wwyw() * other.group0().xyx().with_w(other[e321]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e235] * self[e1])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       16       33        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e4]) + (other[scalar] * self[e12345])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e4])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e12345])) + (Simd32x4::from(other[scalar]) * self.group2())
                - (Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(other[scalar]) * self.group3().xyz())).with_w(other[scalar] * self[e4]),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        6        7        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       18       24        0
    //  no simd       51       65        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group0().yzxw())
                - (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e235]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                + (Simd32x3::from(other[e315]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                + (Simd32x3::from(other[e125]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e235]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                - (Simd32x3::from(other[e315]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                - (Simd32x3::from(other[e125]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                - (Simd32x3::from(other[e321]) * self.group2().xyz()))
            .with_w(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + Simd32x3::from(0.0).with_w(-(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricProduct<AntiFlector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       34        0
    //    simd3        0        2        0
    //    simd4       23       22        0
    // Totals...
    // yes simd       50       58        0
    //  no simd      119      128        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zx().with_zw(self[e4], self[e412]) * other.group1().yzz().with_w(other[e125]))
                + (self.group3().ww().with_zw(self[e431], self[e431]) * other.group1().xyx().with_w(other[e315]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e321] * self[e321]),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group0().yzxw()) + (other.group1().zxyw() * self.group3().yzxw())
                - (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e412]))
                - (other.group1().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (other.group1().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (other.group1().wwwz() * self.group0().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group0().xxxw() * self.group1().wz().with_zw(self[e2], self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]) * other.group0().xxx().with_w(other[e1]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]) * other.group0().yyy().with_w(other[e2]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]) * other.group0().zzz().with_w(other[e3])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + (other.group1().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (other.group1().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (other.group1().wwwz() * self.group0().xyz().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e321]) - (other[e125] * self[e3]) - (other[e321] * self[e5]) - (other[e5] * self[e12345]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e315] * self[e2]),
        );
    }
}
impl GeometricProduct<AntiLine> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        0        6        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       44       67        0
    //  no simd       80       97        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e23] * self[e4]) + (other[e31] * self[e412]),
                (other[e31] * self[e4]) + (other[e12] * self[e423]),
                (other[e23] * self[e431]) + (other[e12] * self[e4]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e1])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e25] * self[e435]) + (other[e35] * self[e2]),
                (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e25] * self[e1]) + (other[e35] * self[e12345]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group1().xxx().with_w(other[e35]))
                + (other.group0().xyx() * self.group2().wwy()).with_w(other[e15] * self[e1])
                + (other.group0().yzz() * self.group2().zxw()).with_w(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzz().with_w(other[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().with_w(other[e12]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * other.group1().xxx().with_w(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                other[e12] * self[e412] * -1.0,
            ]) - (self.group0().yzxy() * other.group1().zxy().with_w(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e23] * self[e423]),
        );
    }
}
impl GeometricProduct<AntiMotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        3        0
    //    simd4       20       17        0
    // Totals...
    // yes simd       52       72        0
    //  no simd      112      129        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[scalar] * self[e423],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e12345]))
                + (self.group0().zx().with_zw(self[e4], self[e4]) * other.group0().yzz().with_w(other[e3215]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[scalar] * self[e415]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[scalar] * self[e425]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[scalar] * self[e435]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e425], self[e321]))
                + (self.group1().zx().with_zw(self[e12345], self[e4]) * other.group0().yzz().with_w(other[e3215]))
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e1]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) + (other[e3215] * self[e415]),
                (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group1().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e12345]]) * other.group1().yyyw())
                + (other.group0().xyxw() * self.group2().wwyw())
                + (other.group0().yzz() * self.group2().zxw()).with_w(other[e15] * self[e1])
                + (other.group0().www() * self.group2().xyz()).with_w(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().with_w(other[e12]))
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group3().xyz().with_w(self[e425]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * other.group1().xxx().with_w(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[scalar] * self[e1]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e12] * self[e1]) + (other[scalar] * self[e2]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[scalar] * self[e3]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                other[e12] * self[e412] * -1.0,
            ]) + (other.group0().xyxw() * self.group1().ww().with_zw(self[e2], self[e4]))
                - (other.group0().zxyx() * self.group3().yzx().with_w(self[e423]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e31])),
        );
    }
}
impl GeometricProduct<AntiPlane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       16       22        0
    //  no simd       55       64        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2]))
                + Simd32x3::from(0.0).with_w(other[e3] * self[e3])
                - (other.group0().zxyw() * self.group0().yzx().with_w(self[e4])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group3().yzxw())
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (other.group0().wwwz() * self.group0().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]),
                0.0,
            ]) - (other.group0().xyxx() * self.group2().wwy().with_w(self[e423]))
                - (other.group0().yzzy() * self.group2().zxw().with_w(self[e431]))
                - (other.group0().wwwz() * self.group1().xyz().with_w(self[e412])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (other.group0().wwwz() * self.group0().xyz().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(other[e5] * self[e321])
                - (other.group0().zxyw() * self.group1().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricProduct<AntiScalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3().xyz().with_w(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricProduct<Circle> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        0       12        0
    //    simd4       27       16        0
    // Totals...
    // yes simd       63       91        0
    //  no simd      144      163        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e321]) - (other[e431] * self[e435]) - (other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]),
                -(other[e431] * self[e321]) - (other[e412] * self[e415]) - (other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]),
                -(other[e423] * self[e2]) - (other[e412] * self[e12345]) - (other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (self.group0().xyzx() * other.group1().www().with_w(other[e235]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * other.group0().xyx().with_w(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e321] * self[e1] * -1.0, other[e321] * self[e2] * -1.0, other[e321] * self[e3] * -1.0, other[e321] * self[e12345]])
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e125])
                - (other.group1().xyxy() * self.group0().ww().with_zw(self[e425], self[e2]))
                - (other.group1().yzzz() * self.group1().zx().with_zw(self[e12345], self[e3]))
                - (self.group0().zx().with_zw(self[e4], self[e1]) * other.group2().yzz().with_w(other[e415]))
                - (self.group3().ww().with_zw(self[e431], self[e412]) * other.group2().xyx().with_w(other[e125]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e235] * self[e423])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                -(other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                -(other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e425]]) * other.group2().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e1]]) * other.group2().yyy().with_w(other[e423]))
                + (self.group1().wz().with_zw(self[e2], self[e415]) * other.group2().xxx().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e431] * self[e2]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (other.group1().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (other.group1().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * other.group2().yzz().with_w(other[e125]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * other.group2().xyx().with_w(other[e315]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e415])
                - (other.group1().zxyw() * self.group3().yzx().with_w(self[e5]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e235] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e315] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e125] * self[e3]),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd3        0       11        0
    //    simd4       30       19        0
    // Totals...
    // yes simd       70       98        0
    //  no simd      160      177        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e12345] * self[e423]),
                -(other[e412] * self[e415]) - (other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e12345] * self[e431]),
                -(other[e412] * self[e12345]) - (other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e12345] * self[e412]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).with_w(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * other.group0().xyx().with_w(other[e321]))
                - (self.group1().ww().with_zw(self[e2], self[e12345]) * other.group0().xyx().with_w(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e315] * self[e412]) - (other[e12345] * self[e415]),
                -(other[e125] * self[e423]) - (other[e12345] * self[e425]),
                -(other[e125] * self[e4]) - (other[e12345] * self[e435]),
                (other[e321] * self[e12345]) + (other[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * other.group0().zxy().with_w(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                - (other.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e3]))
                - (other.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e412]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * other.group1().yzz().with_w(other[e235]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e425] * self[e2])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e12345] * self[e235]),
                -(other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                -(other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().with_w(other[e431]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * other.group2().xxx().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415])
                - (other.group1().xyx() * self.group2().wwy()).with_w(other[e12345] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345] * self[e1], other[e12345] * self[e2], other[e12345] * self[e3], other[e12345] * self[e5] * -1.0])
                + (other.group1().xyxy() * self.group1().ww().with_zw(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group3().zx().with_zw(self[e321], self[e125]))
                + (other.group2().xyxy() * self.group3().ww().with_zw(self[e431], self[e425]))
                + (other.group2().yzzz() * self.group0().zx().with_zw(self[e4], self[e435]))
                + (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group2().zxyz() * self.group0().yzx().with_w(self[e3]))
                - (self.group2().wwyw() * other.group0().xyx().with_w(other[e321]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e235] * self[e1]),
        );
    }
}
impl GeometricProduct<Dipole> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       73        0
    //    simd3        0        9        0
    //    simd4       24       15        0
    // Totals...
    // yes simd       72       97        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e45] * self[e12345]),
            ]) + (self.group2().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().with_w(other[e41]))
                + (self.group3().ww().with_zw(self[e431], self[e125]) * other.group2().xyx().with_w(other[e43]))
                - (other.group1().wwwx() * self.group3().xyzx())
                - (self.group0().yzxy() * other.group2().zxy().with_w(other[e25]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]),
                -(other[e12] * self[e125]) - (other[e45] * self[e5]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group2().yzx()).with_w(other[e45] * self[e4])
                - (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e41] * self[e1])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e42] * self[e425]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       65        0
    //    simd3        0       17        0
    //    simd4       47       31        0
    // Totals...
    // yes simd       83      113        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[e1234] * self[e415])
                    + (other[e1234] * self[e1])
                    + (other[e4235] * self[e4])
                    + (other[e4315] * self[e412]),
                (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[e1234] * self[e425])
                    + (other[e1234] * self[e2])
                    + (other[e4315] * self[e4])
                    + (other[e4125] * self[e423]),
                (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[e1234] * self[e435])
                    + (other[e1234] * self[e3])
                    + (other[e4235] * self[e431])
                    + (other[e4125] * self[e4]),
                -(other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (self.group0().ww().with_zw(self[e425], self[e5]) * other.group0().xyx().with_w(other[e1234]))
                + (self.group1().zx().with_zw(self[e12345], self[e2]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group1().ww().with_zw(self[e2], self[e1]) * other.group0().xyx().with_w(other[e4235]))
                + (self.group3().zx().with_zw(self[e321], self[e3]) * other.group0().yzz().with_w(other[e4125]))
                + (self.group3().ww().with_zw(self[e431], self[e4]) * other.group1().xyx().with_w(other[e3215]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e43] * self[e125])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) + (other[e3215] * self[e423]),
                (other[e4235] * self[e3]) + (other[e3215] * self[e431]),
                (other[e4315] * self[e1]) + (other[e3215] * self[e412]),
                -(other[e35] * self[e412]) - (other[e1234] * self[e5]),
            ]) + (self.group2().zxwy() * other.group0().yzz().with_w(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().with_w(other[e41]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * other.group2().yzz().with_w(other[e4125]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * other.group1().xyx().with_w(other[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e415]) * other.group1().yzz().with_w(other[e4235]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * other.group2().xyx().with_w(other[e4315]))
                + (other.group2().www() * self.group2().xyz()).with_w(other[e3215] * self[e4])
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * other.group2().zxy().with_w(other[e45]))
                - (self.group1().ww().with_zw(self[e2], self[e423]) * other.group3().xyx().with_w(other[e15]))
                - (self.group3().zx().with_zw(self[e321], self[e431]) * other.group3().yzz().with_w(other[e25]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e12345]))
                + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e235]]) * other.group2().yyy().with_w(other[e4235]))
                + (Simd32x4::from([self[e2], self[e415], self[e12345], self[e315]]) * other.group2().zzz().with_w(other[e4315]))
                + (other.group3().zxyz() * self.group2().yzxz())
                + (other.group1().xyx() * self.group2().wwy()).with_w(other[e15] * self[e1])
                + (other.group1().yzz() * self.group2().zxw()).with_w(other[e25] * self[e2])
                - (Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e321]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().with_w(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * other.group2().xxx().with_w(other[e12]))
                - (other.group3().xyx() * self.group2().wwy()).with_w(other[e25] * self[e425])
                - (other.group3().yzz() * self.group2().zxw()).with_w(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e412]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (self.group1().ww().with_zw(self[e2], self[e12345]) * other.group1().xyx().with_w(other[e1234]))
                + (self.group3().zx().with_zw(self[e321], self[e321]) * other.group1().yzz().with_w(other[e1234]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e45] * self[e4])
                - (self.group0().ww().with_zw(self[e425], self[e423]) * other.group3().xyx().with_w(other[e23]))
                - (self.group1().zx().with_zw(self[e12345], self[e431]) * other.group3().yzz().with_w(other[e31]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e41] * self[e1])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e42] * self[e425])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e42] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e43] * self[e435])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e43] * self[e3]),
        );
    }
}
impl GeometricProduct<DualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd3        2        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       16       38        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other.group0().yy().with_zw(other[e12345], -(other[e5] * self[e4]) - (other[e12345] * self[e12345]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e5] * self[e423]) - (other[e12345] * self[e415]),
                -(other[e5] * self[e431]) - (other[e12345] * self[e425]),
                -(other[e5] * self[e412]) - (other[e12345] * self[e435]),
                (other[e5] * self[e4]) + (other[e12345] * self[e321]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group3().xyz()) - (Simd32x3::from(other[e5]) * self.group1().xyz()) - (Simd32x3::from(other[e12345]) * self.group2().xyz()))
                .with_w(other[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e321])),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       18       27        0
    //  no simd       48       65        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e35] * self[e412]) - (other[e45] * self[e12345]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group0().yzz()) + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e45] * self[e4]),
        );
    }
}
impl GeometricProduct<Flector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       25       24        0
    // Totals...
    // yes simd       41       52        0
    //  no simd      116      128        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group1().xyxy() * self.group3().ww().with_zw(self[e431], self[e2]))
                + (other.group1().yzzz() * self.group0().zx().with_zw(self[e4], self[e3]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e4]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e4235] * self[e1])
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e4]))
                + (other.group1().zxyz() * self.group3().yzx().with_w(self[e435]))
                + (self.group0().zx().with_zw(self[e4], self[e425]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group3().ww().with_zw(self[e431], self[e415]) * other.group0().xyx().with_w(other[e4235]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431]))
                - (self.group1().ww().with_zw(self[e2], self[e412]) * other.group1().xyx().with_w(other[e35]))
                - (self.group3().zx().with_zw(self[e321], self[e12345]) * other.group1().yzz().with_w(other[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (other.group1().zxyx() * self.group2().yzxx())
                + (other.group1().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2())
                - (other.group1().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4125] * self[e415]),
                (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4125] * self[e12345]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e4]))
                - (other.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e412]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e4235]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e4315] * self[e431]),
        );
    }
}
impl GeometricProduct<Line> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        3        0
    //    simd4       14       11        0
    // Totals...
    // yes simd       42       57        0
    //  no simd       84       96        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e415] * self[e4]) - (other[e425] * self[e412]),
                -(other[e425] * self[e4]) - (other[e435] * self[e423]),
                -(other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(other[e415] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]),
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) - (self.group0().zx().with_zw(self[e4], self[e423]) * other.group1().yzz().with_w(other[e235]))
                - (self.group0().ww().with_zw(self[e425], self[e1]) * other.group0().xyx().with_w(other[e415]))
                - (self.group1().zx().with_zw(self[e12345], self[e2]) * other.group0().yzz().with_w(other[e425]))
                - (self.group3().ww().with_zw(self[e431], self[e3]) * other.group1().xyx().with_w(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * other.group1().yyy().with_w(other[e435]))
                + (self.group1().wz().with_zw(self[e2], self[e431]) * other.group1().xxx().with_w(other[e425]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e415] * self[e423]),
            // e4235, e4315, e4125, e3215
            (self.group0().zx().with_zw(self[e4], self[e415]) * other.group1().yzz().with_w(other[e235]))
                + (self.group1().ww().with_zw(self[e2], self[e235]) * other.group0().xyx().with_w(other[e415]))
                + (self.group3().zx().with_zw(self[e321], self[e315]) * other.group0().yzz().with_w(other[e425]))
                + (self.group3().ww().with_zw(self[e431], self[e125]) * other.group1().xyx().with_w(other[e435]))
                + Simd32x3::from(0.0).with_w((other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e125] * self[e3]))
                - (self.group3().yzxx() * other.group0().zxy().with_w(other[e235]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e315] * self[e2]),
        );
    }
}
impl GeometricProduct<Motor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       39        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       50       62        0
    //  no simd      116      131        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12345] * self[e423] * -1.0,
                other[e12345] * self[e431] * -1.0,
                other[e12345] * self[e412] * -1.0,
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (other.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e12345]))
                - (self.group0().zx().with_zw(self[e4], self[e4]) * other.group0().yzz().with_w(other[e5])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group1().yzxw()) + (other.group1().zxyw() * self.group0().yzx().with_w(self[e4]))
                - (other.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e1]))
                - (other.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e2]))
                - (other.group0().wwwz() * self.group1().xyz().with_w(self[e3]))
                - (other.group1().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (other.group1().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (other.group1().wwwz() * self.group0().xyzz()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e5] * self[e1])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415]),
                (other[e125] * self[e1]) + (other[e5] * self[e2])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e125] * self[e321]) + (other[e5] * self[e3])
                    - (other[e435] * self[e5])
                    - (other[e12345] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * other.group1().yyy().with_w(other[e435]))
                + (other.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().wz().with_zw(self[e2], self[e431]) * other.group1().xxx().with_w(other[e425]))
                - (other.group0().xyxw() * self.group2().wwy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (other.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e125]))
                + (other.group1().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (other.group1().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (other.group1().wwwz() * self.group0().xyz().with_w(self[e435]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e321]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e5] * self[e12345]))
                - (other.group0().zxyw() * self.group3().yzx().with_w(self[e5]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       85        0
    //    simd2        8        8        0
    //    simd3       60       77        0
    //    simd4       56       45        0
    // Totals...
    // yes simd      184      215        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e5] * self[e4]),
                (other[e3215] * self[e4])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e423], other[e1234]]) * self.group2().xw())
                + (Simd32x2::from([other[e235], other[scalar]]) * self.group0().xw())
                - (Simd32x2::from([other[e12345], other[e15]]) * self.group0().wx())
                - (Simd32x2::from([other[e4], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e412]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e2], other[e1234]) * other.group5().xyx().with_w(self[e12345]))
                + (self.group3().zx().with_zw(self[e321], other[e1234]) * other.group5().yzz().with_w(self[e321]))
                + (other.group4().zxy() * self.group2().yzx()).with_w(other[e45] * self[e4])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e431]]) * self.group2().xyz().with_w(other[e31]))
                - (self.group1().xyzz() * other.group3().www().with_w(other[e43]))
                - (self.group0().ww().with_zw(self[e425], self[e3]) * other.group9().xyx().with_w(other[e43]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * other.group9().yzz().with_w(other[e23]))
                - (other.group4().xyx() * self.group2().wwy()).with_w(other[e41] * self[e415])
                - (other.group4().yzz() * self.group2().zxw()).with_w(other[e41] * self[e1])
                - (other.group5().zxy() * self.group3().yzx()).with_w(other[e42] * self[e425])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e42] * self[e2]),
            // e5
            (other[scalar] * self[e5])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e5]) * self.group3())
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group8().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group8().yyy().with_w(other[e423]))
                + (other.group6().zxyw() * self.group2().yzx().with_w(self[e12345]))
                + (self.group2().yzxz() * other.group1().zxy().with_w(other[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e321]) * other.group8().xxx().with_w(other[e12345]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e3]]) * self.group1().xyz().with_w(other[e435]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * other.group8().xxx().with_w(other[e315]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * other.group8().yyy().with_w(other[e125]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e415]]) * other.group8().zzz().with_w(other[e1]))
                - (other.group1().xyxy() * self.group2().wwy().with_w(self[e425]))
                - (other.group1().yzzz() * self.group2().zxw().with_w(self[e435]))
                - (other.group6().yzzx() * self.group2().zxw().with_w(self[e1]))
                - (other.group6().wwwy() * self.group2().xyz().with_w(self[e2]))
                - (self.group2().wwyw() * other.group6().xyx().with_w(other[e4]))
                - (other.group0().yy().with_zw(other[e12345], other[e235]) * self.group2().xyz().with_w(self[e423])),
            // e41, e42, e43
            (Simd32x3::from(other[e321]) * self.group0().xyz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group1().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group1().xyx())
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group3().yzx())
                + (other.group6().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0().xyz())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group6().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group7().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group7().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group6().xyx())
                - (other.group1().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (other.group7().zxy() * self.group2().yzx())
                + (other.group8().zxy() * self.group0().yzx())
                + (other.group1().zxy() * self.group3().yzx())
                + (other.group6().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group1().xyz())
                - (Simd32x3::from(other[e4]) * self.group2().xyz())
                - (Simd32x3::from(other[e5]) * self.group0().xyz())
                - (Simd32x3::from(other[e321]) * self.group3().xyz())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group8().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group6().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group6().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group8().xyx())
                - (other.group7().xyx() * self.group2().wwy())
                - (other.group7().yzz() * self.group2().zxw()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3215] * self[e423]) + (other[e1234] * self[e235]),
                (other[e3215] * self[e431]) + (other[e1234] * self[e315]),
                (other[e3215] * self[e412]) + (other[e1234] * self[e125]),
                -(other[e45] * self[e12345]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group9().zxyw() * self.group3().yzxw())
                + (self.group2().zxwy() * other.group4().yzz().with_w(other[e42]))
                + (self.group2().wwyx() * other.group4().xyx().with_w(other[e41]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * other.group3().yzz().with_w(other[e4125]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * other.group5().xyx().with_w(other[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e415]) * other.group5().yzz().with_w(other[e4235]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * other.group3().xyx().with_w(other[e4315]))
                - (other.group3().wwwx() * self.group3().xyz().with_w(self[e423]))
                - (self.group1().ww().with_zw(self[e2], self[e431]) * other.group9().xyx().with_w(other[e25]))
                - (self.group3().zx().with_zw(self[e321], self[e412]) * other.group9().yzz().with_w(other[e35]))
                - (other.group4().zxy() * self.group2().yzx()).with_w(other[e23] * self[e1])
                - (other.group5().zxy() * self.group1().yzx()).with_w(other[e31] * self[e2])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e12] * self[e3]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from(other[e45]) * self.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group3().xyz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group5().yzz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group9().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group4().xyx())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group4().yzz())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group5().xyx())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group9().xyx())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group3().yzx())
                - (other.group5().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2().xyz())
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group1().xyz())
                + (other.group5().xyx() * self.group2().wwy())
                + (other.group5().yzz() * self.group2().zxw())
                + (other.group9().zxy() * self.group2().yzx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group2().xyz())
                - (Simd32x3::from(other[e3215]) * self.group3().xyz())
                - (other.group5().zxy() * self.group2().yzx())
                - (other.group9().xyx() * self.group2().wwy())
                - (other.group9().yzz() * self.group2().zxw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e321]))
                + (other.group1().xyxy() * self.group0().ww().with_zw(self[e425], self[e315]))
                + (other.group1().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + (other.group6().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (other.group6().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (other.group6().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (other.group0().yy().with_zw(other[e12345], other[e235]) * self.group3().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e235]) * other.group8().yzz().with_w(other[e1]))
                + (self.group3().ww().with_zw(self[e431], self[e435]) * other.group8().xyx().with_w(other[e125]))
                + (other.group7().zxy() * self.group2().yzx()).with_w(other[e315] * self[e425])
                - (self.group2() * other.group1().www().with_w(other[e321]))
                - (self.group2().wwyw() * other.group7().xyx().with_w(other[e12345]))
                - (other.group7().yzz() * self.group2().zxw()).with_w(other[e235] * self[e1])
                - (other.group8().zxy() * self.group0().yzx()).with_w(other[e315] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e3])
                - (other.group6().zxy() * self.group3().yzx()).with_w(other[e5] * self[e12345]),
            // e1234
            (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e415])
                + (other[e423] * self[e1])
                + (other[e431] * self[e425])
                + (other[e431] * self[e2])
                + (other[e412] * self[e435])
                + (other[e412] * self[e3])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321]),
        );
    }
}
impl GeometricProduct<Plane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       48       68        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]) + (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                -(other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                -(other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4125] * self[e435]) + (other[e3215] * self[e4]),
            ]) + (other.group0().zxyx() * self.group3().yzx().with_w(self[e415]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e425])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (other.group0().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                other[e4125] * self[e412] * -1.0,
            ]) - (other.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e423]))
                - (other.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e431])),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       25        0
    //    simd3        0        3        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       64       86        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4] * self[e1] * -1.0, other[e4] * self[e2] * -1.0, other[e4] * self[e3] * -1.0, other[e3] * self[e3]])
                + (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2]))
                - (other.group0().zxyw() * self.group0().yzx().with_w(self[e5]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e5] * self[e4]),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group3().yzx()).with_w(other[e5] * self[e4])
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group0().xyz().with_w(other[e4]))
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (other.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]),
                -(other[e4] * self[e12345]) - (other[e4] * self[e321]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], self[e412]]) * self.group1().xyz().with_w(other[e3]))
                - (other.group0().xyxx() * self.group2().wwy().with_w(self[e423]))
                - (other.group0().yzzy() * self.group2().zxw().with_w(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4] * self[e235] * -1.0, other[e4] * self[e315] * -1.0, other[e4] * self[e125] * -1.0, other[e5] * self[e321]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e125]]) * self.group0().xyz().with_w(other[e3]))
                + (other.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<Scalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       24        0
    //    simd3        0        2        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       64       86        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                other[e1234] * self[e5],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e3]]) * self.group1().xyz().with_w(other[e4125]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e4]]) * self.group3().xyz().with_w(other[e3215]))
                + (other.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e4315] * self[e3] * -1.0,
                other[e4125] * self[e1] * -1.0,
                other[e4125] * self[e321] * -1.0,
                other[e3215] * self[e4],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e435]]) * self.group2().xyz().with_w(other[e4125]))
                + (other.group0().zxyx() * self.group3().yzx().with_w(self[e415]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e425]))
                - (self.group1().ww().with_zw(self[e2], other[e1234]) * other.group0().xyx().with_w(self[e5])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (other.group0().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group1().yzx()).with_w(other[e1234] * self[e12345]) + (other.group0().www() * self.group0().xyz()).with_w(other[e1234] * self[e321])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e412]]) * self.group2().xyz().with_w(other[e4125]))
                - (other.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e423]))
                - (other.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e431])),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       67        0
    //    simd3        0       19        0
    //    simd4       51       33        0
    // Totals...
    // yes simd       87      119        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e12345] * self[e423])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431])
                    - (other[e4] * self[e415])
                    - (other[e4] * self[e1]),
                -(other[e12345] * self[e431])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412])
                    - (other[e4] * self[e425])
                    - (other[e4] * self[e2]),
                -(other[e12345] * self[e412])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4])
                    - (other[e2] * self[e423])
                    - (other[e4] * self[e435])
                    - (other[e4] * self[e3]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                + (other.group0().zxyy() * self.group3().yzx().with_w(self[e315]))
                + (other.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * other.group3().yzz().with_w(other[e435]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * other.group3().xyx().with_w(other[e425]))
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                - (other.group0().xyxw() * self.group0().ww().with_zw(self[e425], self[e12345]))
                - (self.group1().zx().with_zw(self[e12345], self[e4]) * other.group0().yzz().with_w(other[e5]))
                - (self.group1().ww().with_zw(self[e2], self[e321]) * other.group0().xyx().with_w(other[e321]))
                - (self.group3().zx().with_zw(self[e321], self[e5]) * other.group0().yzz().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e2] * self[e3]) - (other[e4] * self[e235]),
                -(other[e3] * self[e1]) - (other[e4] * self[e315]),
                -(other[e3] * self[e321]) - (other[e4] * self[e125]),
                (other[e321] * self[e12345]) + (other[e5] * self[e4]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e412] * self[e125])
                + (other.group3().zxy() * self.group3().yzx()).with_w(other[e12345] * self[e321])
                - (other.group3().xyxw() * self.group1().ww().with_zw(self[e2], self[e5]))
                - (self.group0().zx().with_zw(self[e4], self[e425]) * other.group2().yzz().with_w(other[e2]))
                - (self.group0().ww().with_zw(self[e425], self[e423]) * other.group1().xyx().with_w(other[e235]))
                - (self.group1().zx().with_zw(self[e12345], self[e431]) * other.group1().yzz().with_w(other[e315]))
                - (self.group3().ww().with_zw(self[e431], self[e415]) * other.group2().xyx().with_w(other[e1]))
                - (other.group0().xyx() * self.group2().wwy()).with_w(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).with_w(other[e425] * self[e2])
                - (other.group0().www() * self.group1().xyz()).with_w(other[e435] * self[e3])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e125] * self[e412])
                - (other.group2().www() * self.group0().xyz()).with_w(other[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e5] * self[e415]) - (other[e1] * self[e5]) - (other[e2] * self[e125]),
                -(other[e125] * self[e415]) - (other[e5] * self[e425]) - (other[e2] * self[e5]) - (other[e3] * self[e235]),
                -(other[e125] * self[e12345]) - (other[e5] * self[e435]) - (other[e1] * self[e315]) - (other[e3] * self[e5]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().with_w(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().with_w(other[e431]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * other.group2().xxx().with_w(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).with_w(other[e423] * self[e415])
                + (other.group2().www() * self.group3().xyz()).with_w(other[e412] * self[e435])
                + (other.group3().zxy() * self.group2().yzx()).with_w(other[e412] * self[e3])
                - (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e12345]]) * other.group2().xxx().with_w(other[e4]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e321]]) * other.group2().yyy().with_w(other[e4]))
                - (other.group1().xyx() * self.group2().wwy()).with_w(other[e1] * self[e423])
                - (other.group1().yzz() * self.group2().zxw()).with_w(other[e2] * self[e431])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxz() * self.group1().ww().with_zw(self[e2], self[e125]))
                + (other.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e435]))
                + (other.group2().yzzw() * self.group0().zx().with_zw(self[e4], self[e321]))
                + (other.group3().xyxy() * self.group0().ww().with_zw(self[e425], self[e315]))
                + (other.group3().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + (self.group1().xyzy() * other.group1().www().with_w(other[e315]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                + (self.group3().zx().with_zw(self[e321], self[e415]) * other.group1().yzz().with_w(other[e235]))
                + (other.group0().www() * self.group3().xyz()).with_w(other[e425] * self[e315])
                + (other.group2().www() * self.group0().xyz()).with_w(other[e1] * self[e235])
                - (other.group0().xyxw() * self.group2().wwyw())
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e2]))
                - (self.group2().zxww() * other.group0().yzz().with_w(other[e321]))
                - (self.group3().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e125] * self[e3])
                - (other.group3().www() * self.group2().xyz()).with_w(other[e5] * self[e12345]),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       59        0
    //    simd3        0       11        0
    //    simd4       51       41        0
    // Totals...
    // yes simd       87      111        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]),
                (self[e425] * other[e1234]) + (self[e321] * other[e42]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e2] * other[e41]) + (self[e3] * other[e1234]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]),
                -(self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4235]]) * self.group0().zyz().with_w(self[e1]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxy().with_w(self[e5]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group1().xxy().with_w(self[e4]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e3] * other[e4125])
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15]))
                - (self.group0().yzxy() * other.group3().zxy().with_w(other[e25]))
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e412] * other[e35])
                - (self.group3().yzx() * other.group0().zxy()).with_w(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e4] * other[e15]),
                (self[e3] * other[e4235]) + (self[e4] * other[e25]),
                (self[e1] * other[e4315]) + (self[e4] * other[e35]),
                -(self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e43]]) * self.group2().zyzz())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e42]]) * self.group2().xxyy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e435] * other[e4125])
                + (self.group2().www() * other.group0().xyz()).with_w(self[e4] * other[e3215])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group3().xxy().with_w(self[e5]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e23]]) * self.group3().zyzx())
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e12345] * other[e45]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e3215]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e15]]) * self.group2().zzz().with_w(self[e1]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group2().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxz() * other.group2().zxyz())
                + (self.group2().www() * other.group1().xyz()).with_w(self[e2] * other[e25])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group3().zyz().with_w(self[e5]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e12]]) * self.group3().xxy().with_w(self[e125]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (self.group2().wwwy() * other.group3().xyz().with_w(other[e31]))
                - (other.group1().zw().with_zw(other[e4235], other[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]) + (self[e4] * other[e15]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]) + (self[e4] * other[e25]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]) + (self[e4] * other[e35]),
                -(self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().with_w(self[e321]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                + (other.group1() * self.group1().www().with_w(self[e4]))
                + (self.group1().yzx() * other.group3().zxy()).with_w(self[e4] * other[scalar])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e12]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e23]))
                - (self.group0().wwwx() * other.group3().xyzx())
                - (other.group0().xyzx() * self.group2().www().with_w(self[e415]))
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e425] * other[e42]),
        );
    }
}
impl std::ops::Div<geometric_product> for VersorOdd {
    type Output = geometric_product_partial<VersorOdd>;
    fn div(self, _rhs: geometric_product) -> Self::Output {
        geometric_product_partial(self)
    }
}
impl GeometricProduct<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       70        0
    //    simd3        0        6        0
    //    simd4       28       22        0
    // Totals...
    // yes simd       76       98        0
    //  no simd      160      176        0
    fn geometric_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().with_w(other[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[scalar]]) * other.group0().yyy().with_w(other[scalar]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[scalar] * self[e23]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[scalar] * self[e31]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[scalar] * self[e12]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e42]) * other.group1().xyx().with_w(other[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * other.group1().yzz().with_w(other[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[e41]) * other.group0().yzz().with_w(other[e15]))
                + (self.group3().ww().with_zw(self[e25], self[scalar]) * other.group0().xyx().with_w(other[e45]))
                + (other.group1().www() * self.group3().xyz()).with_w(other[scalar] * self[e45])
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[e1234]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * other.group2().xyx().with_w(other[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * other.group2().xyx().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41]))
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (self.group3().ww().with_zw(self[e25], self[e3215]) * other.group0().xyx().with_w(other[scalar]))
                - (other.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * other.group2().yzz().with_w(other[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * other.group2().xyx().with_w(other[e12])),
        );
    }
}
impl GeometricProduct<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       63        0
    //    simd3        0       13        0
    //    simd4       48       35        0
    // Totals...
    // yes simd       80      111        0
    //  no simd      224      242        0
    fn geometric_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4] * self[e23]) + (other[e3] * self[e42]),
                (other[e4] * self[e31]) + (other[e1] * self[e43]),
                (other[e4] * self[e12]) + (other[e2] * self[e41]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e3215]]) * other.group0().xxx().with_w(other[e4]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e4235]]) * other.group0().yyy().with_w(other[e1]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4315]]) * other.group0().zzz().with_w(other[e2]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * other.group1().yzz().with_w(other[e5]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * other.group1().xyx().with_w(other[e3]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (other.group1().wwwy() * self.group0().xyz().with_w(self[e31]))
                - (self.group0().zx().with_zw(self[e1234], self[e41]) * other.group3().yzz().with_w(other[e235]))
                - (self.group2().ww().with_zw(self[e42], self[e45]) * other.group3().xyx().with_w(other[e321]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e435] * self[e12]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e3] * self[e12] * -1.0])
                + (other.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e4235]))
                + (other.group3().zxyw() * self.group3().yzx().with_w(self[e1234]))
                + (self.group0().zx().with_zw(self[e1234], self[e4125]) * other.group2().yzz().with_w(other[e435]))
                + (self.group0().ww().with_zw(self[e31], self[e35]) * other.group1().xyx().with_w(other[e412]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * other.group2().xyx().with_w(other[e425]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (other.group2().www() * self.group2().xyz()).with_w(other[e321] * self[scalar])
                - (other.group2().zxyw() * self.group0().yzx().with_w(self[e3215]))
                - (other.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e315] * self[e42])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * other.group1().yzz().with_w(other[e5]))
                + (other.group1().www() * self.group2().xyz()).with_w(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).with_w(other[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e4] * self[e45] * -1.0])
                + (other.group2().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (other.group3().xyxy() * self.group0().ww().with_zw(self[e31], self[e42]))
                + (other.group3().yzzz() * self.group1().zx().with_zw(self[scalar], self[e43]))
                + (self.group3().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (self.group0().zx().with_zw(self[e1234], self[e41]) * other.group2().yzz().with_w(other[e1]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e412] * self[e4125])
                - (other.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e41]))
                - (self.group0().yzxy() * other.group2().zxy().with_w(other[e425]))
                - (self.group1().ww().with_zw(self[e4315], self[e12]) * other.group1().xyx().with_w(other[e412]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (other.group2().www() * self.group2().xyz()).with_w(other[e435] * self[e43])
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e321] * self[e1234]),
        );
    }
}
impl GeometricProduct<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       16        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       22        0
    //  no simd       16       37        0
    fn geometric_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e1234]) + (other[scalar] * self[scalar])),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e23], other[scalar] * self[e31], other[scalar] * self[e12], other[e3215] * self[e1234] * -1.0])
                + (other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group0().xyz().with_w(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[e3215]) * self.group3().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz()))
                .with_w(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                (other[e3215] * self[e45]) + (other[scalar] * self[e3215]),
            ]) + (other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group3().xyz().with_w(self[scalar])),
        );
    }
}
impl GeometricProduct<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd3        3        4        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       24       39        0
    //  no simd       48       71        0
    fn geometric_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e42])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e235] * self[e4315]) + (other[e125] * self[scalar]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e315] * self[e4315]) - (other[e125] * self[e12]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group0().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e321] * self[e1234] * -1.0),
        );
    }
}
impl GeometricProduct<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       50        0
    //    simd3        0        2        0
    //    simd4       20       18        0
    // Totals...
    // yes simd       56       70        0
    //  no simd      116      128        0
    fn geometric_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group1().zxyx() * self.group0().yzx().with_w(self[e4235]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]))
                - (other.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zx().with_zw(self[e1234], self[e43]) * other.group1().yzz().with_w(other[e125]))
                - (self.group2().ww().with_zw(self[e42], self[e42]) * other.group1().xyx().with_w(other[e315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e5] * self[e41]),
                (other[e1] * self[e4125]) + (other[e5] * self[e42]),
                (other[e2] * self[e4235]) + (other[e5] * self[e43]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * other.group0().yzz().with_w(other[e5]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e42]))
                - (other.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e23]))
                - (self.group1().ww().with_zw(self[e4315], self[e43]) * other.group1().xyx().with_w(other[e125])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e3215]))
                + (self.group1().zx().with_zw(self[scalar], self[e45]) * other.group0().yzz().with_w(other[e5]))
                + (self.group1().ww().with_zw(self[e4315], self[scalar]) * other.group0().xyx().with_w(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx())
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e1234], self[e42]) * other.group0().yzz().with_w(other[e2]))
                + (self.group2().ww().with_zw(self[e42], self[e41]) * other.group0().xyx().with_w(other[e1]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e3] * self[e43])
                - (other.group0().zxyw() * self.group0().yzx().with_w(self[e1234])),
        );
    }
}
impl GeometricProduct<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       56        0
    //    simd3        0        7        0
    //    simd4       12        5        0
    // Totals...
    // yes simd       45       68        0
    //  no simd       81       97        0
    fn geometric_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e25] * self[e43], other[e35] * self[e41], other[e35] * self[e1234], other[e12] * self[e4125] * -1.0])
                + (self.group0().ww().with_zw(self[e31], self[e41]) * other.group0().xyx().with_w(other[e15]))
                + (self.group1().zx().with_zw(self[scalar], self[e42]) * other.group0().yzz().with_w(other[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * other.group1().xyx().with_w(other[e35]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45]),
                0.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group0().zx().with_zw(self[e1234], self[e35]) * other.group1().yzz().with_w(other[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * other.group1().xyx().with_w(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e23] * self[e15]),
        );
    }
}
impl GeometricProduct<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       53        0
    //    simd3        0        5        0
    //    simd4       20       15        0
    // Totals...
    // yes simd       53       73        0
    //  no simd      113      128        0
    fn geometric_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[scalar] * self[e41],
                other[scalar] * self[e42],
                other[scalar] * self[e43],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * other.group0().yzz().with_w(other[e3215]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e25] * self[e43]) + (other[e3215] * self[e41]),
                (other[e35] * self[e41]) + (other[e3215] * self[e42]),
                (other[e35] * self[e1234]) + (other[e3215] * self[e43]),
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e45]))
                + (other.group1().xyxz() * self.group2().ww().with_zw(self[e42], self[e43]))
                + (self.group1().zx().with_zw(self[scalar], self[e41]) * other.group0().yzz().with_w(other[e15]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e25] * self[e42])
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e4235]))
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[scalar] * self[e15])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235]),
                (other[e12] * self[e15])
                    + (other[scalar] * self[e25])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215])
                    + (other[scalar] * self[e35])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e35] * self[e42],
                other[e15] * self[e43],
                other[e25] * self[e41],
                -(other[e15] * self[e4235]) - (other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group1().ww().with_zw(self[e4315], self[e3215]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * other.group0().yzz().with_w(other[e3215]))
                + (other.group0().www() * self.group3().xyz()).with_w(other[e3215] * self[e45])
                - (other.group0().zxyx() * self.group3().yzx().with_w(self[e15]))
                - (other.group1().wwwx() * self.group0().xyz().with_w(self[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e35]) * other.group1().yzz().with_w(other[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * other.group1().xyx().with_w(other[e31])),
        );
    }
}
impl GeometricProduct<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       38        0
    //  no simd       49       68        0
    fn geometric_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e3] * self[e12] * -1.0])
                + (other.group0().zxyw() * self.group3().yzx().with_w(self[e1234]))
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[scalar]))
                + (other.group0().yzzw() * self.group2().zx().with_zw(self[e3215], self[e45]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, 0.0])
                + (other.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e41]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e42]))
                + (other.group0().wwwz() * self.group0().xyzz()),
        );
    }
}
impl GeometricProduct<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group3().xyz().with_w(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricProduct<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       64        0
    //    simd3        0        5        0
    //    simd4       26       21        0
    // Totals...
    // yes simd       66       90        0
    //  no simd      144      163        0
    fn geometric_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyzy() * other.group1().www().with_w(other[e315]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e321] * self[scalar],
            ]) + (other.group1().xyxy() * self.group0().ww().with_zw(self[e31], self[e4315]))
                + (other.group1().yzzz() * self.group1().zx().with_zw(self[scalar], self[e4125]))
                + (self.group0().zx().with_zw(self[e1234], self[e4235]) * other.group2().yzz().with_w(other[e415]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e35]) * other.group2().xyx().with_w(other[e412]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                - (self.group0().yzxy() * other.group2().zxy().with_w(other[e315]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e3215]) * other.group2().xyx().with_w(other[e321]))
                - (self.group1().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (self.group3().yzxx() * other.group2().zxy().with_w(other[e235]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[e4125]) * other.group2().yzz().with_w(other[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * other.group2().xyx().with_w(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                - (other.group1().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (other.group1().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e412] * self[e12]),
        );
    }
}
impl GeometricProduct<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       58        0
    //    simd3        0        9        0
    //    simd4       31       23        0
    // Totals...
    // yes simd       67       90        0
    //  no simd      160      177        0
    fn geometric_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxx().with_w(other[e12345]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (other.group1().wwwy() * self.group0().xyz().with_w(self[e31])),
            // e415, e425, e435, e321
            (other.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e4235]))
                + (self.group0().zx().with_zw(self[e1234], self[e4125]) * other.group2().yzz().with_w(other[e435]))
                + (self.group0().ww().with_zw(self[e31], self[e35]) * other.group1().xyx().with_w(other[e412]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * other.group2().xyx().with_w(other[e425]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e423]))
                + (other.group2().www() * self.group1().xyz()).with_w(other[e321] * self[scalar])
                - (other.group2().zxyw() * self.group0().yzx().with_w(self[e45]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e315] * self[e42])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e12345] * self[e15]),
                (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e12345] * self[e25]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e12345] * self[e35]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e3215]) * other.group1().yzz().with_w(other[e12345]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (other.group2().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                + (self.group3().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e4235])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e412] * self[e4125])
                - (other.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e41]))
                - (self.group0().yzxy() * other.group2().zxy().with_w(other[e425]))
                - (self.group1().ww().with_zw(self[e4315], self[e12]) * other.group1().xyx().with_w(other[e412]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * other.group0().yzz().with_w(other[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * other.group0().xyx().with_w(other[e423]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e435] * self[e43]),
        );
    }
}
impl GeometricProduct<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       69        0
    //    simd3        0        5        0
    //    simd4       24       19        0
    // Totals...
    // yes simd       72       93        0
    //  no simd      144      160        0
    fn geometric_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e42] * self[scalar]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e42] * self[e4235]) + (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().with_w(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e45] * self[e4235]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e45] * self[e4315]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[scalar]) * other.group2().yzz().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e42]) * other.group0().yzz().with_w(other[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * other.group2().xyx().with_w(other[e35]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * other.group0().xyx().with_w(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]),
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e4235]) * other.group2().xyx().with_w(other[e41]))
                + (self.group1().zx().with_zw(self[scalar], self[e4125]) * other.group2().yzz().with_w(other[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e4315]) * other.group2().xyx().with_w(other[e42]))
                + (self.group3().zx().with_zw(self[e45], self[e1234]) * other.group2().yzz().with_w(other[e45]))
                - (other.group1().wwwx() * self.group2().xyz().with_w(self[e41]))
                - (self.group1().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e42] * self[e31])
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (self.group0().zx().with_zw(self[e1234], self[e31]) * other.group2().yzz().with_w(other[e25]))
                - (self.group2().ww().with_zw(self[e42], self[e4235]) * other.group2().xyx().with_w(other[e15]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e23]),
        );
    }
}
impl GeometricProduct<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       88        0
    //    simd3        0        8        0
    //    simd4       40       32        0
    // Totals...
    // yes simd      104      128        0
    //  no simd      224      240        0
    fn geometric_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234])
                    + (other[e31] * self[e43])
                    + (other[e45] * self[e41])
                    + (other[e1234] * self[e23])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43]),
                (other[e31] * self[e1234])
                    + (other[e12] * self[e41])
                    + (other[e45] * self[e42])
                    + (other[e1234] * self[e31])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41]),
                (other[e23] * self[e42])
                    + (other[e12] * self[e1234])
                    + (other[e45] * self[e43])
                    + (other[e1234] * self[e12])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().with_w(other[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e3215]]) * other.group0().yyy().with_w(other[e1234]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e1234]]) * other.group0().zzz().with_w(other[e3215]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e31] * self[e31])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41]),
                (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42]),
                (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (self.group3() * other.group1().www().with_w(other[e1234]))
                + (self.group0().ww().with_zw(self[e31], self[e42]) * other.group1().xyx().with_w(other[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * other.group1().yzz().with_w(other[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[e41]) * other.group0().yzz().with_w(other[e15]))
                + (self.group3().ww().with_zw(self[e25], self[scalar]) * other.group0().xyx().with_w(other[e45]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                - (self.group3().yzxx() * other.group3().zxy().with_w(other[e23]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e1234] * self[e45]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (other.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * other.group2().xyx().with_w(other[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * other.group2().xyx().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * other.group1().yzz().with_w(other[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * other.group1().xyx().with_w(other[e41]))
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (self.group2().zx().with_zw(self[e3215], self[e43]) * other.group3().yzz().with_w(other[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e42]) * other.group3().xyx().with_w(other[e31]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e1234] * self[e15]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]),
                (other[e15] * self[e43]) + (other[e1234] * self[e25]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]),
                (other[e25] * self[e41]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1() * other.group1().www().with_w(other[e3215]))
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * other.group1().xyx().with_w(other[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group0().yzz().with_w(other[e4315]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * other.group1().yzz().with_w(other[e3215]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group0().xyx().with_w(other[e4235]))
                - (other.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * other.group2().yzz().with_w(other[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * other.group2().xyx().with_w(other[e12]))
                - (other.group3().www() * self.group0().xyz()).with_w(other[e15] * self[e4235]),
        );
    }
}
impl GeometricProduct<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       15        0
    //  no simd       16       34        0
    fn geometric_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e1234]) + (other[e12345] * self[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e1234])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[scalar]))
                + (Simd32x4::from(other[e5]) * self.group3().xyz().with_w(self[e45]))
                + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) - (Simd32x3::from(other[e12345]) * self.group3().xyz())).with_w(other[e12345] * self[e1234]),
        );
    }
}
impl GeometricProduct<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       23        0
    //    simd3        6        7        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       48       68        0
    fn geometric_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e45] * self[e45]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e35] * self[e42] * -1.0, other[e15] * self[e43] * -1.0, other[e25] * self[e41] * -1.0, other[e45] * self[scalar]])
                + (other.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e41]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e1234], self[e42]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group0().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                - (Simd32x3::from(other[e45]) * self.group2().xyz())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx()))
            .with_w(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e23]))
                - (other.group0().yzzx() * self.group0().zx().with_zw(self[e1234], self[e4235])),
        );
    }
}
impl GeometricProduct<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        7        0
    //    simd4       21       14        0
    // Totals...
    // yes simd       53       72        0
    //  no simd      116      128        0
    fn geometric_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4315] * self[e43],
                other[e4125] * self[e41],
                other[e4125] * self[e1234],
                -(other[e25] * self[e42]) - (other[e35] * self[e43]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * self.group0().xyz().with_w(self[e45]))
                + (other.group1().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) + (other[e3215] * self[e41]),
                (other[e4125] * self[e4235]) + (other[e3215] * self[e42]),
                (other[e4125] * self[e45]) + (other[e3215] * self[e43]),
                -(other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (other.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e41]))
                + (other.group0().yzzy() * self.group0().zx().with_zw(self[e1234], self[e42]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[scalar]) * other.group1().xyx().with_w(other[e45]))
                - (other.group1().zxyy() * self.group3().yzx().with_w(self[e31]))
                - (other.group0().zxy() * self.group0().yzx()).with_w(other[e4235] * self[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                0.0,
            ]) + (other.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e1234]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e4235] * self[e41])
                - (other.group0().zxy() * self.group3().yzx()).with_w(other[e4315] * self[e42])
                - (other.group0().www() * self.group2().xyz()).with_w(other[e4125] * self[e43]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxz() * self.group0().ww().with_zw(self[e31], self[e35]))
                + (other.group1().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e45]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                + (other.group0().zxy() * self.group0().yzx()).with_w(other[e4235] * self[e15])
                + (other.group0().www() * self.group1().xyz()).with_w(other[e4315] * self[e25])
                - (other.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e23]))
                - (other.group0().yzzx() * self.group0().zx().with_zw(self[e1234], self[e4235]))
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (other.group1().www() * self.group0().xyz()).with_w(other[e25] * self[e4315]),
        );
    }
}
impl GeometricProduct<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       53        0
    //    simd3        0        4        0
    //    simd4       12        8        0
    // Totals...
    // yes simd       45       65        0
    //  no simd       81       97        0
    fn geometric_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e415] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (self.group0().ww().with_zw(self[e31], self[e4235]) * other.group0().xyx().with_w(other[e415]))
                + (self.group1().zx().with_zw(self[scalar], self[e4315]) * other.group0().yzz().with_w(other[e425]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * other.group1().xyx().with_w(other[e435]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e41]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) - (self.group2().yzxx() * other.group0().zxy().with_w(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                0.0,
            ]) - (self.group0().yzxz() * other.group1().zxy().with_w(other[e435]))
                - (self.group1().ww().with_zw(self[e4315], self[e41]) * other.group0().xyx().with_w(other[e415]))
                - (self.group3().zx().with_zw(self[e45], self[e42]) * other.group0().yzz().with_w(other[e425])),
        );
    }
}
impl GeometricProduct<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       55        0
    //    simd3        0        3        0
    //    simd4       19       16        0
    // Totals...
    // yes simd       56       74        0
    //  no simd      113      128        0
    fn geometric_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e12345] * self[e41],
                other[e12345] * self[e42],
                other[e12345] * self[e43],
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * other.group0().yzz().with_w(other[e5]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]),
                (other[e125] * self[e1234]) + (other[e5] * self[e43]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (other.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e4235]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e4315]))
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e4125]))
                + (other.group1().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (other.group0().zxyw() * self.group1().yzxw())
                - (other.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * other.group0().yzz().with_w(other[e5]))
                + (other.group0().www() * self.group2().xyz()).with_w(other[e5] * self[e45])
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group1().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e5] * self[e41]) - (other[e125] * self[e42]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e5] * self[e42]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e5] * self[e43]) - (other[e315] * self[e41]),
                0.0,
            ]) + (other.group0().zxyw() * self.group3().yzx().with_w(self[e1234]))
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
        );
    }
}
impl GeometricProduct<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       95        0
    //    simd2       12       12        0
    //    simd3       60       79        0
    //    simd4       53       39        0
    // Totals...
    // yes simd      189      225        0
    //  no simd      480      512        0
    fn geometric_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(self[scalar]) * other.group0())
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], self[scalar]]) * self.group0().xyz().with_w(other[e4]))
                + (other.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e41]))
                + (self.group2().yzxw() * other.group7().zxy().with_w(other[e12345]))
                + (self.group0().zx().with_zw(self[e1234], self[e4315]) * other.group8().yzz().with_w(other[e431]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * other.group1().xyx().with_w(other[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4235]) * other.group8().xyx().with_w(other[e423]))
                + (other.group6().zxy() * self.group3().yzx()).with_w(other[e2] * self[e42])
                + (other.group6().www() * self.group1().xyz()).with_w(other[e3] * self[e43])
                - (other.group6().xyxz() * self.group1().ww().with_zw(self[e4315], self[e43]))
                - (other.group6().yzzw() * self.group3().zx().with_zw(self[e45], self[e1234]))
                - (other.group0().yy().with_zw(other[e12345], other[e423]) * self.group3().xyz().with_w(self[e23]))
                - (self.group2().zx().with_zw(self[e3215], self[e12]) * other.group7().yzz().with_w(other[e412]))
                - (self.group3().ww().with_zw(self[e25], self[e31]) * other.group7().xyx().with_w(other[e431]))
                - (other.group8().zxy() * self.group0().yzx()).with_w(other[e4] * self[e45])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e415] * self[e41])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e425] * self[e42]),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e321] * self[e3215])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (other.group3().xyxz() * self.group0().ww().with_zw(self[e31], self[e43]))
                + (other.group3().xyxw() * self.group1().ww().with_zw(self[e4315], self[scalar]))
                + (self.group1().zx().with_zw(self[scalar], other[e1234]) * other.group3().yzz().with_w(self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e42]) * other.group5().yzz().with_w(other[e25]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * other.group5().xyx().with_w(other[e15]))
                - (self.group2().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e4125]) * other.group9().yzz().with_w(other[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e4315]) * other.group9().xyx().with_w(other[e31]))
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e42] * self[e25])
                - (other.group3().zxy() * self.group3().yzx()).with_w(other[e43] * self[e35])
                - (other.group3().www() * self.group2().xyz()).with_w(other[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from(other[e45]) * self.group0().xyz())
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group5().yzz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group9().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group5().xyx())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group9().xyx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().xyz())
                - (other.group5().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e45]) * self.group3().xyz())
                + (Simd32x3::from(other[e3215]) * self.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group3().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group5().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group5().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group9().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx())
                - (other.group3().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e5] * self[e41]) + (other[e425] * self[e12]),
                (other[e5] * self[e42]) + (other[e435] * self[e23]),
                (other[e5] * self[e43]) + (other[e435] * self[scalar]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (self.group3().yzxz() * other.group1().zxy().with_w(other[e435]))
                + (other.group0().yy().with_zw(other[e12345], other[e423]) * self.group1().xyz().with_w(self[e15]))
                + (self.group0().zx().with_zw(self[e1234], self[e4315]) * other.group8().yzz().with_w(other[e425]))
                + (self.group0().ww().with_zw(self[e31], other[e5]) * other.group6().xyx().with_w(self[e1234]))
                + (self.group2().zx().with_zw(self[e3215], self[e35]) * other.group7().yzz().with_w(other[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4235]) * other.group8().xyx().with_w(other[e415]))
                + (self.group3().ww().with_zw(self[e25], self[e25]) * other.group7().xyx().with_w(other[e431]))
                + (other.group1().www() * self.group2().xyz()).with_w(other[e321] * self[scalar])
                - (self.group0().yzxx() * other.group8().zxy().with_w(other[e235]))
                - (self.group1().yzxx() * other.group6().zxy().with_w(other[e1]))
                - (self.group1().ww().with_zw(self[e4315], self[e42]) * other.group1().xyx().with_w(other[e315]))
                - (self.group3().zx().with_zw(self[e45], self[e43]) * other.group1().yzz().with_w(other[e125]))
                - (other.group7().zxy() * self.group2().yzx()).with_w(other[e12345] * self[e45])
                - (other.group6().www() * self.group3().xyz()).with_w(other[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group6().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group6().xyx())
                + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group1().yzz())
                - (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group1().xyx())
                - (other.group6().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group3().xyz())
                + (Simd32x3::from(other[e321]) * self.group2().xyz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group8().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group8().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group8().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group6().yzz())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group6().xyx())
                - (other.group8().zxy() * self.group1().yzx())
                - (other.group8().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group2().yzx())
                - (other.group6().zxy() * self.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e23]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]) + (other[e1234] * self[e15]),
                (other[e45] * self[e31]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]) + (other[e1234] * self[e25]),
                (other[e45] * self[e12]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]) + (other[e1234] * self[e35]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * other.group5().xyx().with_w(other[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * other.group4().yzz().with_w(other[e4315]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * other.group5().yzz().with_w(other[e3215]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * other.group4().xyx().with_w(other[e4235]))
                + (other.group3().zxy() * self.group0().yzx()).with_w(other[e3215] * self[e45])
                - (other.group3().yzzx() * self.group0().zx().with_zw(self[e1234], self[e23]))
                - (self.group2().yzxx() * other.group4().zxy().with_w(other[e23]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * other.group3().xyx().with_w(other[e12]))
                - (other.group5().zxy() * self.group3().yzx()).with_w(other[e31] * self[e25])
                - (other.group9().zxy() * self.group1().yzx()).with_w(other[e15] * self[e4235])
                - (other.group9().www() * self.group0().xyz()).with_w(other[e25] * self[e31]),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
    }
}
impl GeometricProduct<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       37        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       27       44        0
    //  no simd       48       65        0
    fn geometric_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4315] * self[e43],
                other[e4125] * self[e41],
                other[e4125] * self[e1234],
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]),
                -(other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) - (other.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                other[e4125] * self[e43] * -1.0,
            ]) - (other.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e41]))
                - (other.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                -(other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                -(other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4125] * self[e35]) + (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (other.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e15]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e25])),
        );
    }
}
impl GeometricProduct<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd3        0        1        0
    //    simd4       12       11        0
    // Totals...
    // yes simd       28       48        0
    //  no simd       64       83        0
    fn geometric_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]) - (other[e4] * self[e4235]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]) - (other[e4] * self[e4315]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]) - (other[e4] * self[e4125]),
                (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4] * self[e15]) + (other[e5] * self[e41]),
                (other[e4] * self[e25]) + (other[e5] * self[e42]),
                (other[e4] * self[e35]) + (other[e5] * self[e43]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (other.group0().zxy() * self.group3().yzx()).with_w(other[e5] * self[e1234])
                - (other.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group2().zx().with_zw(self[e3215], other[e5]) * other.group0().yzz().with_w(self[e45]))
                + (self.group3().ww().with_zw(self[e25], other[e5]) * other.group0().xyx().with_w(self[scalar]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e4] * self[e15] * -1.0, other[e4] * self[e25] * -1.0, other[e4] * self[e35] * -1.0, other[e4] * self[scalar]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e43]]) * self.group0().xyz().with_w(other[e3]))
                + (other.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e41]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e42]))
                - (other.group0().zxyw() * self.group1().yzxw()),
        );
    }
}
impl GeometricProduct<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
    }
}
impl GeometricProduct<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       34        0
    //    simd3        0        1        0
    //    simd4       12       11        0
    // Totals...
    // yes simd       28       46        0
    //  no simd       64       81        0
    fn geometric_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e1234] * self[e23], other[e1234] * self[e31], other[e1234] * self[e12], other[e4125] * self[e4125] * -1.0])
                + (other.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                + (self.group0().zx().with_zw(self[e1234], other[e1234]) * other.group0().yzz().with_w(self[e3215]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e4315]]) * self.group3().xyz().with_w(other[e4315]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) + (other[e1234] * self[e15]),
                (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) + (other[e1234] * self[e25]),
                (other[e4125] * self[e45]) + (other[e3215] * self[e43]) + (other[e1234] * self[e35]),
                -(other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (self.group1().ww().with_zw(self[e4315], other[e1234]) * other.group0().xyx().with_w(self[e3215]))
                - (other.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e4125] * self[e43]) - (other[e1234] * self[e45]),
            ]) + (other.group0().zxy() * self.group2().yzx()).with_w(other[e1234] * self[scalar])
                - (other.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e41]))
                - (other.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                -(other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                -(other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e35]]) * self.group2().xyz().with_w(other[e4125]))
                + (other.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e15]))
                + (other.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e25])),
        );
    }
}
impl GeometricProduct<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       58        0
    //    simd3        0       10        0
    //    simd4       51       42        0
    // Totals...
    // yes simd       87      110        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) + (other[e4] * self[e23]),
                (other[e1] * self[e43]) + (other[e4] * self[e31]),
                (other[e2] * self[e41]) + (other[e4] * self[e12]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e1234]]) * other.group0().yyy().with_w(other[e5]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4235]]) * other.group0().zzz().with_w(other[e1]))
                + (self.group0().zx().with_zw(self[e1234], self[e3215]) * other.group1().yzz().with_w(other[e4]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * other.group1().xyx().with_w(other[e3]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e2] * self[e4315])
                - (Simd32x4::from(other[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (other.group1().wwwy() * self.group0().xyz().with_w(self[e31]))
                - (self.group0().zx().with_zw(self[e1234], self[e45]) * other.group3().yzz().with_w(other[e321]))
                - (self.group2().ww().with_zw(self[e42], self[e12]) * other.group3().xyx().with_w(other[e435]))
                - (other.group3().www() * self.group3().xyz()).with_w(other[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e1234]))
                + (other.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e15]))
                + (other.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e25]))
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e35]))
                + (other.group1().xyxx() * self.group0().ww().with_zw(self[e31], self[e4235]))
                + (other.group1().yzzy() * self.group1().zx().with_zw(self[scalar], self[e4315]))
                + (self.group0().zx().with_zw(self[e1234], self[scalar]) * other.group2().yzz().with_w(other[e321]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * other.group2().xyx().with_w(other[e435]))
                - (other.group0().zxyw() * self.group2().yzx().with_w(self[e45]))
                - (other.group2().zxyz() * self.group0().yzxz())
                - (other.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e235] * self[e41])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e3215]))
                + (other.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * other.group1().yzz().with_w(other[e5]))
                + (other.group1().www() * self.group2().xyz()).with_w(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).with_w(other[e235] * self[e23]),
            // e1, e2, e3, e4
            (other.group0().zxyx() * self.group2().yzx().with_w(self[e4235]))
                + (other.group3().xyxz() * self.group0().ww().with_zw(self[e31], self[e43]))
                + (other.group3().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().xyzy() * other.group2().www().with_w(other[e2]))
                + (self.group3().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (self.group0().zx().with_zw(self[e1234], self[e41]) * other.group2().yzz().with_w(other[e1]))
                + (self.group2().ww().with_zw(self[e42], self[e1234]) * other.group2().xyx().with_w(other[e12345]))
                + (other.group1().www() * self.group1().xyz()).with_w(other[e412] * self[e4125])
                - (Simd32x4::from(other[e4]) * self.group2().xyz().with_w(self[e45]))
                - (other.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e23]))
                - (other.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e31]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e12]))
                - (other.group1().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (other.group1().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (self.group0().yzxz() * other.group2().zxy().with_w(other[e435]))
                - (other.group3().zxy() * self.group1().yzx()).with_w(other[e321] * self[e1234]),
        );
    }
}
impl GeometricProduct<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       91        0
    //    simd3        0       11        0
    //    simd4       44       33        0
    // Totals...
    // yes simd      108      135        0
    //  no simd      240      256        0
    fn geometric_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234])
                    + (other[e31] * self[e43])
                    + (other[e45] * self[e41])
                    + (other[e1234] * self[e23])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43]),
                (other[e31] * self[e1234])
                    + (other[e12] * self[e41])
                    + (other[e45] * self[e42])
                    + (other[e1234] * self[e31])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41]),
                (other[e23] * self[e42])
                    + (other[e12] * self[e1234])
                    + (other[e45] * self[e43])
                    + (other[e1234] * self[e12])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e45]]) * other.group0().yyy().with_w(other[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e3215]]) * other.group0().zzz().with_w(other[e1234]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e3215] * self[e1234])
                - (Simd32x4::from(other[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e31] * self[e31])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41]),
                (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42]),
                (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (self.group3() * other.group1().www().with_w(other[e1234]))
                + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e45]))
                + (self.group0().ww().with_zw(self[e31], self[e42]) * other.group1().xyx().with_w(other[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * other.group1().yzz().with_w(other[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * other.group0().yzz().with_w(other[e45]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e15] * self[e41])
                - (other.group0().zxyx() * self.group2().yzxx())
                - (self.group3().yzxx() * other.group3().zxy().with_w(other[e23]))
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e1234] * self[e45]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (other.group0().wwwx() * self.group2().xyz().with_w(self[e4235]))
                + (other.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().ww().with_zw(self[e31], self[e1234]) * other.group2().xyx().with_w(other[scalar]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * other.group2().xyx().with_w(other[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4125]) * other.group1().yzz().with_w(other[e43]))
                + (self.group3().ww().with_zw(self[e25], self[e4315]) * other.group1().xyx().with_w(other[e42]))
                - (self.group1().yzxz() * other.group2().zxy().with_w(other[e43]))
                - (self.group2().zx().with_zw(self[e3215], self[e43]) * other.group3().yzz().with_w(other[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e42]) * other.group3().xyx().with_w(other[e31]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e41] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e1234] * self[e15]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]),
                (other[e15] * self[e43]) + (other[e1234] * self[e25]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]),
                (other[e25] * self[e41]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1() * other.group1().www().with_w(other[e3215]))
                + (other.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * other.group1().xyx().with_w(other[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e15]) * other.group0().yzz().with_w(other[e4235]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * other.group1().yzz().with_w(other[e3215]))
                + (other.group0().www() * self.group3().xyz()).with_w(other[e4315] * self[e25])
                - (other.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group1().yzxx() * other.group3().zxy().with_w(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * other.group2().yzz().with_w(other[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * other.group2().xyx().with_w(other[e12]))
                - (other.group3().www() * self.group0().xyz()).with_w(other[e15] * self[e4235]),
        );
    }
}
